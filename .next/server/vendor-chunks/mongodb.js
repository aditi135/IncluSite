"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb";
exports.ids = ["vendor-chunks/mongodb"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongodb/lib/admin.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/admin.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGVBQWUsbUJBQU8sQ0FBQyx3REFBUTtBQUMvQiw0QkFBNEIsbUJBQU8sQ0FBQyx3R0FBZ0M7QUFDcEUseUJBQXlCLG1CQUFPLENBQUMsa0dBQTZCO0FBQzlELHNCQUFzQixtQkFBTyxDQUFDLDRGQUEwQjtBQUN4RCxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDeEQsOEJBQThCLG1CQUFPLENBQUMsNEdBQWtDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlCQUFpQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFTO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3SUFBd0ksNkJBQTZCO0FBQ3JLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFCQUFxQjtBQUNuRDtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2FkbWluLmpzP2M5NzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFkbWluID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4vYnNvblwiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgbGlzdF9kYXRhYmFzZXNfMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvbGlzdF9kYXRhYmFzZXNcIik7XG5jb25zdCByZW1vdmVfdXNlcl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9yZW1vdmVfdXNlclwiKTtcbmNvbnN0IHJ1bl9jb21tYW5kXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL3J1bl9jb21tYW5kXCIpO1xuY29uc3QgdmFsaWRhdGVfY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uXCIpO1xuLyoqXG4gKiBUaGUgKipBZG1pbioqIGNsYXNzIGlzIGFuIGludGVybmFsIGNsYXNzIHRoYXQgYWxsb3dzIGNvbnZlbmllbnQgYWNjZXNzIHRvXG4gKiB0aGUgYWRtaW4gZnVuY3Rpb25hbGl0eSBhbmQgY29tbWFuZHMgZm9yIE1vbmdvREIuXG4gKlxuICogKipBRE1JTiBDYW5ub3QgZGlyZWN0bHkgYmUgaW5zdGFudGlhdGVkKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYic7XG4gKlxuICogY29uc3QgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KCdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3Jyk7XG4gKiBjb25zdCBhZG1pbiA9IGNsaWVudC5kYigpLmFkbWluKCk7XG4gKiBjb25zdCBkYkluZm8gPSBhd2FpdCBhZG1pbi5saXN0RGF0YWJhc2VzKCk7XG4gKiBmb3IgKGNvbnN0IGRiIG9mIGRiSW5mby5kYXRhYmFzZXMpIHtcbiAqICAgY29uc29sZS5sb2coZGIubmFtZSk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgQWRtaW4ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBZG1pbiBpbnN0YW5jZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgICAgIHRoaXMucyA9IHsgZGIgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhIGNvbW1hbmRcbiAgICAgKlxuICAgICAqIFRoZSBkcml2ZXIgd2lsbCBlbnN1cmUgdGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIGF0dGFjaGVkIHRvIHRoZSBjb21tYW5kIHNlbnQgdG8gdGhlIHNlcnZlcjpcbiAgICAgKiAtIGBsc2lkYCAtIHNvdXJjZWQgZnJvbSBhbiBpbXBsaWNpdCBzZXNzaW9uIG9yIG9wdGlvbnMuc2Vzc2lvblxuICAgICAqIC0gYCRyZWFkUHJlZmVyZW5jZWAgLSBkZWZhdWx0cyB0byBwcmltYXJ5IG9yIGNhbiBiZSBjb25maWd1cmVkIGJ5IG9wdGlvbnMucmVhZFByZWZlcmVuY2VcbiAgICAgKiAtIGAkZGJgIC0gc291cmNlZCBmcm9tIHRoZSBuYW1lIG9mIHRoaXMgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIElmIHRoZSBjbGllbnQgaGFzIGEgc2VydmVyQXBpIHNldHRpbmc6XG4gICAgICogLSBgYXBpVmVyc2lvbmBcbiAgICAgKiAtIGBhcGlTdHJpY3RgXG4gICAgICogLSBgYXBpRGVwcmVjYXRpb25FcnJvcnNgXG4gICAgICpcbiAgICAgKiBXaGVuIGluIGEgdHJhbnNhY3Rpb246XG4gICAgICogLSBgcmVhZENvbmNlcm5gIC0gc291cmNlZCBmcm9tIHJlYWRDb25jZXJuIHNldCBvbiB0aGUgVHJhbnNhY3Rpb25PcHRpb25zXG4gICAgICogLSBgd3JpdGVDb25jZXJuYCAtIHNvdXJjZWQgZnJvbSB3cml0ZUNvbmNlcm4gc2V0IG9uIHRoZSBUcmFuc2FjdGlvbk9wdGlvbnNcbiAgICAgKlxuICAgICAqIEF0dGFjaGluZyBhbnkgb2YgdGhlIGFib3ZlIGZpZWxkcyB0byB0aGUgY29tbWFuZCB3aWxsIGhhdmUgbm8gZWZmZWN0IGFzIHRoZSBkcml2ZXIgd2lsbCBvdmVyd3JpdGUgdGhlIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbW1hbmQgLSBUaGUgY29tbWFuZCB0byBleGVjdXRlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBjb21tYW5kKGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyBydW5fY29tbWFuZF8xLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbihjb21tYW5kLCB7XG4gICAgICAgICAgICAuLi4oMCwgYnNvbl8xLnJlc29sdmVCU09OT3B0aW9ucykob3B0aW9ucyksXG4gICAgICAgICAgICBzZXNzaW9uOiBvcHRpb25zPy5zZXNzaW9uLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHNlcnZlciBidWlsZCBpbmZvcm1hdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBidWlsZEluZm8ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKHsgYnVpbGRpbmZvOiAxIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgc2VydmVyIGJ1aWxkIGluZm9ybWF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHNlcnZlckluZm8ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKHsgYnVpbGRpbmZvOiAxIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGlzIGRiJ3Mgc2VydmVyIHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgc2VydmVyU3RhdHVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IHNlcnZlclN0YXR1czogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGluZyB0aGUgTW9uZ29EQiBzZXJ2ZXIgYW5kIHJldHJpZXZlIHJlc3VsdHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgcGluZyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyBwaW5nOiAxIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSB1c2VyIGZyb20gYSBkYXRhYmFzZVxuICAgICAqXG4gICAgICogQHBhcmFtIHVzZXJuYW1lIC0gVGhlIHVzZXJuYW1lIHRvIHJlbW92ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlVXNlcih1c2VybmFtZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IHJlbW92ZV91c2VyXzEuUmVtb3ZlVXNlck9wZXJhdGlvbih0aGlzLnMuZGIsIHVzZXJuYW1lLCB7IGRiTmFtZTogJ2FkbWluJywgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGFuIGV4aXN0aW5nIGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb2xsZWN0aW9uIHRvIHZhbGlkYXRlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgdmFsaWRhdGVDb2xsZWN0aW9uKGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyB2YWxpZGF0ZV9jb2xsZWN0aW9uXzEuVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uKHRoaXMsIGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIGF2YWlsYWJsZSBkYXRhYmFzZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgbGlzdERhdGFiYXNlcyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnMuZGIuY2xpZW50LCBuZXcgbGlzdF9kYXRhYmFzZXNfMS5MaXN0RGF0YWJhc2VzT3BlcmF0aW9uKHRoaXMucy5kYiwgb3B0aW9ucykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgUmVwbGljYVNldCBzdGF0dXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgcmVwbFNldEdldFN0YXR1cyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyByZXBsU2V0R2V0U3RhdHVzOiAxIH0sIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWRtaW4gPSBBZG1pbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkbWluLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bson.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/bson.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_1.Binary; } }));\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_1.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_1.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_1.BSONType; } }));\nObject.defineProperty(exports, \"calculateObjectSize\", ({ enumerable: true, get: function () { return bson_1.calculateObjectSize; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_1.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_1.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_1.Decimal128; } }));\nObject.defineProperty(exports, \"deserialize\", ({ enumerable: true, get: function () { return bson_1.deserialize; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_1.Double; } }));\nObject.defineProperty(exports, \"EJSON\", ({ enumerable: true, get: function () { return bson_1.EJSON; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_1.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_1.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_1.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_1.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_1.ObjectId; } }));\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return bson_1.serialize; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_1.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_1.UUID; } }));\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\nexports.resolveBSONOptions = resolveBSONOptions;\n//# sourceMappingURL=bson.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_functions_1 = __webpack_require__(/*! ../operations/common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult, isOrdered) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0)\n            return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, bulkOperation.isOrdered, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        if (bulkOperation.handleWriteError(callback, writeResult))\n            return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites =\n                finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n        }\n    }\n    try {\n        const operation = isInsertBatch(batch)\n            ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n            : isUpdateBatch(batch)\n                ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                : isDeleteBatch(batch)\n                    ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                    : null;\n        if (operation != null) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation).then(result => resultHandler(undefined, result), error => resultHandler(error));\n        }\n    }\n    catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, isOrdered, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult, isOrdered)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        this.collection = collection;\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        (0, common_functions_1.maybeAddIdToDocuments)(this.collection, document, {\n            forceServerObjectId: this.shouldForceServerObjectId()\n        });\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = this.shouldForceServerObjectId();\n            const document = op.insertOne && op.insertOne.document == null\n                ? // TODO(NODE-6003): remove support for omitting the `documents` subdocument in bulk inserts\n                    op.insertOne\n                : op.insertOne.document;\n            (0, common_functions_1.maybeAddIdToDocuments)(this.collection, document, { forceServerObjectId });\n            return this.addToOperationsList(exports.BatchType.INSERT, document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n    shouldForceServerObjectId() {\n        return (this.s.options.forceServerObjectId === true ||\n            this.s.collection.s.db.options?.forceServerObjectId === true);\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.s.currentIndex;\n    }\n});\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/ordered.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/ordered.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay9vcmRlcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixhQUFhLG1CQUFPLENBQUMseURBQVM7QUFDOUIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0dBQW9HLHlCQUF5QjtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay9vcmRlcmVkLmpzP2ExMDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9yZGVyZWRCdWxrT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgQlNPTiA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIE9yZGVyZWRCdWxrT3BlcmF0aW9uIGV4dGVuZHMgY29tbW9uXzEuQnVsa09wZXJhdGlvbkJhc2Uge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMsIHRydWUpO1xuICAgIH1cbiAgICBhZGRUb09wZXJhdGlvbnNMaXN0KGJhdGNoVHlwZSwgZG9jdW1lbnQpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBic29uU2l6ZVxuICAgICAgICBjb25zdCBic29uU2l6ZSA9IEJTT04uY2FsY3VsYXRlT2JqZWN0U2l6ZShkb2N1bWVudCwge1xuICAgICAgICAgICAgY2hlY2tLZXlzOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgdXNlciBzZWxlY3RlZCBmb3IgQlNPTiBvcHRpb25zIGhlcmUsXG4gICAgICAgICAgICAvLyBlcnIgb24gdGhlIHNhZmUgc2lkZSwgYW5kIGNoZWNrIHRoZSBzaXplIHdpdGggaWdub3JlVW5kZWZpbmVkOiBmYWxzZS5cbiAgICAgICAgICAgIGlnbm9yZVVuZGVmaW5lZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRocm93IGVycm9yIGlmIHRoZSBkb2MgaXMgYmlnZ2VyIHRoYW4gdGhlIG1heCBCU09OIHNpemVcbiAgICAgICAgaWYgKGJzb25TaXplID49IHRoaXMucy5tYXhCc29uT2JqZWN0U2l6ZSlcbiAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKTogQ2hhbmdlIHRoaXMgdG8gTW9uZ29CU09ORXJyb3JcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYERvY3VtZW50IGlzIGxhcmdlciB0aGFuIHRoZSBtYXhpbXVtIHNpemUgJHt0aGlzLnMubWF4QnNvbk9iamVjdFNpemV9YCk7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBiYXRjaCBvYmplY3QgaWYgd2UgZG9uJ3QgaGF2ZSBhIGN1cnJlbnQgb25lXG4gICAgICAgIGlmICh0aGlzLnMuY3VycmVudEJhdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSBuZXcgY29tbW9uXzEuQmF0Y2goYmF0Y2hUeXBlLCB0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhLZXlTaXplID0gdGhpcy5zLm1heEtleVNpemU7XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHdlIGV4Y2VlZCB0aGUgbWF4IGJhdGNoIG9wIHNpemVcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemUgKyAxID49IHRoaXMucy5tYXhXcml0ZUJhdGNoU2l6ZSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHdlIGV4Y2VlZCB0aGUgbWF4QmF0Y2hTaXplQnl0ZXMuIE9ubHkgbWF0dGVycyBpZiBiYXRjaCBhbHJlYWR5IGhhcyBhIGRvYyxcbiAgICAgICAgICAgIC8vIHNpbmNlIHdlIGNhbid0IHNlbnQgYW4gZW1wdHkgYmF0Y2hcbiAgICAgICAgICAgICh0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSA+IDAgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZUJ5dGVzICsgbWF4S2V5U2l6ZSArIGJzb25TaXplID49IHRoaXMucy5tYXhCYXRjaFNpemVCeXRlcykgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB0aGUgbmV3IG9wIGRvZXMgbm90IGhhdmUgdGhlIHNhbWUgb3AgdHlwZSBhcyB0aGUgY3VycmVudCBiYXRjaFxuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5iYXRjaFR5cGUgIT09IGJhdGNoVHlwZSkge1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgYmF0Y2ggdG8gdGhlIGV4ZWN1dGlvbiBzdGFja1xuICAgICAgICAgICAgdGhpcy5zLmJhdGNoZXMucHVzaCh0aGlzLnMuY3VycmVudEJhdGNoKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBiYXRjaFxuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGN1cnJlbnQgc2l6ZSB0cmFja2Vyc1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemUgPSAwO1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLklOU0VSVCkge1xuICAgICAgICAgICAgdGhpcy5zLmJ1bGtSZXN1bHQuaW5zZXJ0ZWRJZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMucy5jdXJyZW50SW5kZXgsXG4gICAgICAgICAgICAgICAgX2lkOiBkb2N1bWVudC5faWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgYW4gYXJyYXkgb2YgZG9jdW1lbnRzXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRvY3VtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3BlcmF0aW9uIHBhc3NlZCBpbiBjYW5ub3QgYmUgYW4gQXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLm9yaWdpbmFsSW5kZXhlcy5wdXNoKHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLm9wZXJhdGlvbnMucHVzaChkb2N1bWVudCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplICs9IDE7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplQnl0ZXMgKz0gbWF4S2V5U2l6ZSArIGJzb25TaXplO1xuICAgICAgICB0aGlzLnMuY3VycmVudEluZGV4ICs9IDE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuT3JkZXJlZEJ1bGtPcGVyYXRpb24gPSBPcmRlcmVkQnVsa09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9yZGVyZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/unordered.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/unordered.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay91bm9yZGVyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyx5REFBUztBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvR0FBb0cseUJBQXlCO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvdW5vcmRlcmVkLmpzPzE4YzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVub3JkZXJlZEJ1bGtPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBCU09OID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgVW5vcmRlcmVkQnVsa09wZXJhdGlvbiBleHRlbmRzIGNvbW1vbl8xLkJ1bGtPcGVyYXRpb25CYXNlIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zLCBmYWxzZSk7XG4gICAgfVxuICAgIGhhbmRsZVdyaXRlRXJyb3IoY2FsbGJhY2ssIHdyaXRlUmVzdWx0KSB7XG4gICAgICAgIGlmICh0aGlzLnMuYmF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuaGFuZGxlV3JpdGVFcnJvcihjYWxsYmFjaywgd3JpdGVSZXN1bHQpO1xuICAgIH1cbiAgICBhZGRUb09wZXJhdGlvbnNMaXN0KGJhdGNoVHlwZSwgZG9jdW1lbnQpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBic29uU2l6ZVxuICAgICAgICBjb25zdCBic29uU2l6ZSA9IEJTT04uY2FsY3VsYXRlT2JqZWN0U2l6ZShkb2N1bWVudCwge1xuICAgICAgICAgICAgY2hlY2tLZXlzOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgdXNlciBzZWxlY3RlZCBmb3IgQlNPTiBvcHRpb25zIGhlcmUsXG4gICAgICAgICAgICAvLyBlcnIgb24gdGhlIHNhZmUgc2lkZSwgYW5kIGNoZWNrIHRoZSBzaXplIHdpdGggaWdub3JlVW5kZWZpbmVkOiBmYWxzZS5cbiAgICAgICAgICAgIGlnbm9yZVVuZGVmaW5lZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRocm93IGVycm9yIGlmIHRoZSBkb2MgaXMgYmlnZ2VyIHRoYW4gdGhlIG1heCBCU09OIHNpemVcbiAgICAgICAgaWYgKGJzb25TaXplID49IHRoaXMucy5tYXhCc29uT2JqZWN0U2l6ZSkge1xuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBDaGFuZ2UgdGhpcyB0byBNb25nb0JTT05FcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgRG9jdW1lbnQgaXMgbGFyZ2VyIHRoYW4gdGhlIG1heGltdW0gc2l6ZSAke3RoaXMucy5tYXhCc29uT2JqZWN0U2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIb2xkcyB0aGUgY3VycmVudCBiYXRjaFxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyBHZXQgdGhlIHJpZ2h0IHR5cGUgb2YgYmF0Y2hcbiAgICAgICAgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLklOU0VSVCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IHRoaXMucy5jdXJyZW50SW5zZXJ0QmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuVVBEQVRFKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdGhpcy5zLmN1cnJlbnRVcGRhdGVCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5ERUxFVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB0aGlzLnMuY3VycmVudFJlbW92ZUJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heEtleVNpemUgPSB0aGlzLnMubWF4S2V5U2l6ZTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIG9iamVjdCBpZiB3ZSBkb24ndCBoYXZlIGEgY3VycmVudCBvbmVcbiAgICAgICAgaWYgKHRoaXMucy5jdXJyZW50QmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHdlIGV4Y2VlZCB0aGUgbWF4IGJhdGNoIG9wIHNpemVcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplICsgMSA+PSB0aGlzLnMubWF4V3JpdGVCYXRjaFNpemUgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heEJhdGNoU2l6ZUJ5dGVzLiBPbmx5IG1hdHRlcnMgaWYgYmF0Y2ggYWxyZWFkeSBoYXMgYSBkb2MsXG4gICAgICAgICAgICAvLyBzaW5jZSB3ZSBjYW4ndCBzZW50IGFuIGVtcHR5IGJhdGNoXG4gICAgICAgICAgICAodGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplID4gMCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZUJ5dGVzICsgbWF4S2V5U2l6ZSArIGJzb25TaXplID49IHRoaXMucy5tYXhCYXRjaFNpemVCeXRlcykgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB0aGUgbmV3IG9wIGRvZXMgbm90IGhhdmUgdGhlIHNhbWUgb3AgdHlwZSBhcyB0aGUgY3VycmVudCBiYXRjaFxuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5iYXRjaFR5cGUgIT09IGJhdGNoVHlwZSkge1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgYmF0Y2ggdG8gdGhlIGV4ZWN1dGlvbiBzdGFja1xuICAgICAgICAgICAgdGhpcy5zLmJhdGNoZXMucHVzaCh0aGlzLnMuY3VycmVudEJhdGNoKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBiYXRjaFxuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgYW4gYXJyYXkgb2YgZG9jdW1lbnRzXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRvY3VtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3BlcmF0aW9uIHBhc3NlZCBpbiBjYW5ub3QgYmUgYW4gQXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLm9wZXJhdGlvbnMucHVzaChkb2N1bWVudCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3JpZ2luYWxJbmRleGVzLnB1c2godGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50SW5kZXggPSB0aGlzLnMuY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgLy8gU2F2ZSBiYWNrIHRoZSBjdXJyZW50IEJhdGNoIHRvIHRoZSByaWdodCB0eXBlXG4gICAgICAgIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5JTlNFUlQpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50SW5zZXJ0QmF0Y2ggPSB0aGlzLnMuY3VycmVudEJhdGNoO1xuICAgICAgICAgICAgdGhpcy5zLmJ1bGtSZXN1bHQuaW5zZXJ0ZWRJZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBfaWQ6IGRvY3VtZW50Ll9pZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuVVBEQVRFKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudFVwZGF0ZUJhdGNoID0gdGhpcy5zLmN1cnJlbnRCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5ERUxFVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50UmVtb3ZlQmF0Y2ggPSB0aGlzLnMuY3VycmVudEJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IGJhdGNoIHNpemVcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplICs9IDE7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZUJ5dGVzICs9IG1heEtleVNpemUgKyBic29uU2l6ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5Vbm9yZGVyZWRCdWxrT3BlcmF0aW9uID0gVW5vcmRlcmVkQnVsa09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVub3JkZXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/change_stream.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/change_stream.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch {\n                // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */\n    async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(() => null);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, { operationName: 'reconnect topology in change stream' }, serverSelectionError => {\n                if (serverSelectionError)\n                    return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            }\n            catch {\n                // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(() => null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {\n                operationName: 'reconnect topology in change stream'\n            });\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream;\n//# sourceMappingURL=change_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2hhbmdlX3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIscUJBQXFCLG1CQUFPLENBQUMsb0VBQWM7QUFDM0Msb0JBQW9CLG1CQUFPLENBQUMsa0VBQWE7QUFDekMsK0JBQStCLG1CQUFPLENBQUMsc0dBQStCO0FBQ3RFLGFBQWEsbUJBQU8sQ0FBQyxvREFBTTtBQUMzQixnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDL0Msc0JBQXNCLG1CQUFPLENBQUMsc0VBQWU7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsMERBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSwwQ0FBMEM7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsZ0hBQWdIO0FBQ3RKO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5Q0FBeUM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0lBQWdJLHFCQUFxQjtBQUNySjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLHNEQUFzRDtBQUN0SDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NoYW5nZV9zdHJlYW0uanM/MmQwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhbmdlU3RyZWFtID0gdm9pZCAwO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4vY29sbGVjdGlvblwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgY2hhbmdlX3N0cmVhbV9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2N1cnNvci9jaGFuZ2Vfc3RyZWFtX2N1cnNvclwiKTtcbmNvbnN0IGRiXzEgPSByZXF1aXJlKFwiLi9kYlwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IG1vbmdvX2NsaWVudF8xID0gcmVxdWlyZShcIi4vbW9uZ29fY2xpZW50XCIpO1xuY29uc3QgbW9uZ29fdHlwZXNfMSA9IHJlcXVpcmUoXCIuL21vbmdvX3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qga0N1cnNvclN0cmVhbSA9IFN5bWJvbCgnY3Vyc29yU3RyZWFtJyk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrQ2xvc2VkID0gU3ltYm9sKCdjbG9zZWQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtNb2RlID0gU3ltYm9sKCdtb2RlJyk7XG5jb25zdCBDSEFOR0VfU1RSRUFNX09QVElPTlMgPSBbXG4gICAgJ3Jlc3VtZUFmdGVyJyxcbiAgICAnc3RhcnRBZnRlcicsXG4gICAgJ3N0YXJ0QXRPcGVyYXRpb25UaW1lJyxcbiAgICAnZnVsbERvY3VtZW50JyxcbiAgICAnZnVsbERvY3VtZW50QmVmb3JlQ2hhbmdlJyxcbiAgICAnc2hvd0V4cGFuZGVkRXZlbnRzJ1xuXTtcbmNvbnN0IENIQU5HRV9ET01BSU5fVFlQRVMgPSB7XG4gICAgQ09MTEVDVElPTjogU3ltYm9sKCdDb2xsZWN0aW9uJyksXG4gICAgREFUQUJBU0U6IFN5bWJvbCgnRGF0YWJhc2UnKSxcbiAgICBDTFVTVEVSOiBTeW1ib2woJ0NsdXN0ZXInKVxufTtcbmNvbnN0IENIQU5HRV9TVFJFQU1fRVZFTlRTID0gW2NvbnN0YW50c18xLlJFU1VNRV9UT0tFTl9DSEFOR0VELCBjb25zdGFudHNfMS5FTkQsIGNvbnN0YW50c18xLkNMT1NFXTtcbmNvbnN0IE5PX1JFU1VNRV9UT0tFTl9FUlJPUiA9ICdBIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnQgaGFzIGJlZW4gcmVjZWl2ZWQgdGhhdCBsYWNrcyBhIHJlc3VtZSB0b2tlbiAoX2lkKS4nO1xuY29uc3QgQ0hBTkdFU1RSRUFNX0NMT1NFRF9FUlJPUiA9ICdDaGFuZ2VTdHJlYW0gaXMgY2xvc2VkJztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBDaGFuZ2UgU3RyZWFtIGluc3RhbmNlLiBOb3JtYWxseSBjcmVhdGVkIHVzaW5nIHtAbGluayBDb2xsZWN0aW9uI3dhdGNofENvbGxlY3Rpb24ud2F0Y2goKX0uXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIENoYW5nZVN0cmVhbSBleHRlbmRzIG1vbmdvX3R5cGVzXzEuVHlwZWRFdmVudEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgb2JqZWN0IHRoYXQgY3JlYXRlZCB0aGlzIGNoYW5nZSBzdHJlYW1cbiAgICAgKiBAcGFyYW0gcGlwZWxpbmUgLSBBbiBhcnJheSBvZiB7QGxpbmsgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL29wZXJhdG9yL2FnZ3JlZ2F0aW9uLXBpcGVsaW5lL3xhZ2dyZWdhdGlvbiBwaXBlbGluZSBzdGFnZXN9IHRocm91Z2ggd2hpY2ggdG8gcGFzcyBjaGFuZ2Ugc3RyZWFtIGRvY3VtZW50c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgcGlwZWxpbmUgPSBbXSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IENIQU5HRV9ET01BSU5fVFlQRVMuQ09MTEVDVElPTjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBkYl8xLkRiKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBDSEFOR0VfRE9NQUlOX1RZUEVTLkRBVEFCQVNFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmVudCBpbnN0YW5jZW9mIG1vbmdvX2NsaWVudF8xLk1vbmdvQ2xpZW50KSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBDSEFOR0VfRE9NQUlOX1RZUEVTLkNMVVNURVI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NoYW5nZVN0cmVhbUVycm9yKCdQYXJlbnQgcHJvdmlkZWQgdG8gQ2hhbmdlU3RyZWFtIGNvbnN0cnVjdG9yIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgQ29sbGVjdGlvbiwgRGIsIG9yIE1vbmdvQ2xpZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMubmFtZXNwYWNlID0gcGFyZW50LnMubmFtZXNwYWNlO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZWFkUHJlZmVyZW5jZSAmJiBwYXJlbnQucmVhZFByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IHBhcmVudC5yZWFkUHJlZmVyZW5jZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDcmVhdGUgY29udGFpbmVkIENoYW5nZSBTdHJlYW0gY3Vyc29yXG4gICAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5fY3JlYXRlQ2hhbmdlU3RyZWFtQ3Vyc29yKG9wdGlvbnMpO1xuICAgICAgICB0aGlzW2tDbG9zZWRdID0gZmFsc2U7XG4gICAgICAgIHRoaXNba01vZGVdID0gZmFsc2U7XG4gICAgICAgIC8vIExpc3RlbiBmb3IgYW55IGBjaGFuZ2VgIGxpc3RlbmVycyBiZWluZyBhZGRlZCB0byBDaGFuZ2VTdHJlYW1cbiAgICAgICAgdGhpcy5vbignbmV3TGlzdGVuZXInLCBldmVudE5hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2NoYW5nZScgJiYgdGhpcy5jdXJzb3IgJiYgdGhpcy5saXN0ZW5lckNvdW50KCdjaGFuZ2UnKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cmVhbUV2ZW50cyh0aGlzLmN1cnNvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdyZW1vdmVMaXN0ZW5lcicsIGV2ZW50TmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnY2hhbmdlJyAmJiB0aGlzLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID09PSAwICYmIHRoaXMuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trQ3Vyc29yU3RyZWFtXT8ucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0IGN1cnNvclN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba0N1cnNvclN0cmVhbV07XG4gICAgfVxuICAgIC8qKiBUaGUgY2FjaGVkIHJlc3VtZSB0b2tlbiB0aGF0IGlzIHVzZWQgdG8gcmVzdW1lIGFmdGVyIHRoZSBtb3N0IHJlY2VudGx5IHJldHVybmVkIGNoYW5nZS4gKi9cbiAgICBnZXQgcmVzdW1lVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnNvcj8ucmVzdW1lVG9rZW47XG4gICAgfVxuICAgIC8qKiBDaGVjayBpZiB0aGVyZSBpcyBhbnkgZG9jdW1lbnQgc3RpbGwgYXZhaWxhYmxlIGluIHRoZSBDaGFuZ2UgU3RyZWFtICovXG4gICAgYXN5bmMgaGFzTmV4dCgpIHtcbiAgICAgICAgdGhpcy5fc2V0SXNJdGVyYXRvcigpO1xuICAgICAgICAvLyBDaGFuZ2Ugc3RyZWFtcyBtdXN0IHJlc3VtZSBpbmRlZmluaXRlbHkgd2hpbGUgZWFjaCByZXN1bWUgZXZlbnQgc3VjY2VlZHMuXG4gICAgICAgIC8vIFRoaXMgbG9vcCBjb250aW51ZXMgdW50aWwgZWl0aGVyIGEgY2hhbmdlIGV2ZW50IGlzIHJlY2VpdmVkIG9yIHVudGlsIGEgcmVzdW1lIGF0dGVtcHRcbiAgICAgICAgLy8gZmFpbHMuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzTmV4dCA9IGF3YWl0IHRoaXMuY3Vyc29yLmhhc05leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3Byb2Nlc3NFcnJvckl0ZXJhdG9yTW9kZShlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBub3QgY29uY2VybmVkIHdpdGggZXJyb3JzIGZyb20gY2xvc2UoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogR2V0IHRoZSBuZXh0IGF2YWlsYWJsZSBkb2N1bWVudCBmcm9tIHRoZSBDaGFuZ2UgU3RyZWFtLiAqL1xuICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgIHRoaXMuX3NldElzSXRlcmF0b3IoKTtcbiAgICAgICAgLy8gQ2hhbmdlIHN0cmVhbXMgbXVzdCByZXN1bWUgaW5kZWZpbml0ZWx5IHdoaWxlIGVhY2ggcmVzdW1lIGV2ZW50IHN1Y2NlZWRzLlxuICAgICAgICAvLyBUaGlzIGxvb3AgY29udGludWVzIHVudGlsIGVpdGhlciBhIGNoYW5nZSBldmVudCBpcyByZWNlaXZlZCBvciB1bnRpbCBhIHJlc3VtZSBhdHRlbXB0XG4gICAgICAgIC8vIGZhaWxzLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGF3YWl0IHRoaXMuY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRDaGFuZ2UgPSB0aGlzLl9wcm9jZXNzQ2hhbmdlKGNoYW5nZSA/PyBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VkQ2hhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcHJvY2Vzc0Vycm9ySXRlcmF0b3JNb2RlKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlIG5vdCBjb25jZXJuZWQgd2l0aCBlcnJvcnMgZnJvbSBjbG9zZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyeSB0byBnZXQgdGhlIG5leHQgYXZhaWxhYmxlIGRvY3VtZW50IGZyb20gdGhlIENoYW5nZSBTdHJlYW0ncyBjdXJzb3Igb3IgYG51bGxgIGlmIGFuIGVtcHR5IGJhdGNoIGlzIHJldHVybmVkXG4gICAgICovXG4gICAgYXN5bmMgdHJ5TmV4dCgpIHtcbiAgICAgICAgdGhpcy5fc2V0SXNJdGVyYXRvcigpO1xuICAgICAgICAvLyBDaGFuZ2Ugc3RyZWFtcyBtdXN0IHJlc3VtZSBpbmRlZmluaXRlbHkgd2hpbGUgZWFjaCByZXN1bWUgZXZlbnQgc3VjY2VlZHMuXG4gICAgICAgIC8vIFRoaXMgbG9vcCBjb250aW51ZXMgdW50aWwgZWl0aGVyIGEgY2hhbmdlIGV2ZW50IGlzIHJlY2VpdmVkIG9yIHVudGlsIGEgcmVzdW1lIGF0dGVtcHRcbiAgICAgICAgLy8gZmFpbHMuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gYXdhaXQgdGhpcy5jdXJzb3IudHJ5TmV4dCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UgPz8gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3Byb2Nlc3NFcnJvckl0ZXJhdG9yTW9kZShlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBub3QgY29uY2VybmVkIHdpdGggZXJyb3JzIGZyb20gY2xvc2UoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENoYW5nZSBzdHJlYW1zIHJ1biBpbmRlZmluaXRlbHkgYXMgbG9uZyBhcyBlcnJvcnMgYXJlIHJlc3VtYWJsZVxuICAgICAgICAgICAgLy8gU28gdGhlIG9ubHkgbG9vcCBicmVha2luZyBjb25kaXRpb24gaXMgaWYgYG5leHQoKWAgdGhyb3dzXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGF3YWl0IHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gd2UncmUgbm90IGNvbmNlcm5lZCB3aXRoIGVycm9ycyBmcm9tIGNsb3NlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogSXMgdGhlIGN1cnNvciBjbG9zZWQgKi9cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trQ2xvc2VkXSB8fCB0aGlzLmN1cnNvci5jbG9zZWQ7XG4gICAgfVxuICAgIC8qKiBDbG9zZSB0aGUgQ2hhbmdlIFN0cmVhbSAqL1xuICAgIGFzeW5jIGNsb3NlKCkge1xuICAgICAgICB0aGlzW2tDbG9zZWRdID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gdGhpcy5jdXJzb3I7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjdXJzb3IuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX2VuZFN0cmVhbSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIG1vZGlmaWVkIFJlYWRhYmxlIHN0cmVhbSBpbmNsdWRpbmcgYSBwb3NzaWJsZSB0cmFuc2Zvcm0gbWV0aG9kLlxuICAgICAqXG4gICAgICogTk9URTogV2hlbiB1c2luZyBhIFN0cmVhbSB0byBwcm9jZXNzIGNoYW5nZSBzdHJlYW0gZXZlbnRzLCB0aGUgc3RyZWFtIHdpbGxcbiAgICAgKiBOT1QgYXV0b21hdGljYWxseSByZXN1bWUgaW4gdGhlIGNhc2UgYSByZXN1bWFibGUgZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIE1vbmdvQ2hhbmdlU3RyZWFtRXJyb3IgaWYgdGhlIHVuZGVybHlpbmcgY3Vyc29yIG9yIHRoZSBjaGFuZ2Ugc3RyZWFtIGlzIGNsb3NlZFxuICAgICAqL1xuICAgIHN0cmVhbShvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29DaGFuZ2VTdHJlYW1FcnJvcihDSEFOR0VTVFJFQU1fQ0xPU0VEX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0cmVhbU9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJzb3Iuc3RyZWFtKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3NldElzRW1pdHRlcigpIHtcbiAgICAgICAgaWYgKHRoaXNba01vZGVdID09PSAnaXRlcmF0b3InKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4NSk6IFJlcGxhY2Ugd2l0aCBNb25nb0NoYW5nZVN0cmVhbU1vZGVFcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignQ2hhbmdlU3RyZWFtIGNhbm5vdCBiZSB1c2VkIGFzIGFuIEV2ZW50RW1pdHRlciBhZnRlciBiZWluZyB1c2VkIGFzIGFuIGl0ZXJhdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1trTW9kZV0gPSAnZW1pdHRlcic7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfc2V0SXNJdGVyYXRvcigpIHtcbiAgICAgICAgaWYgKHRoaXNba01vZGVdID09PSAnZW1pdHRlcicpIHtcbiAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNDg1KTogUmVwbGFjZSB3aXRoIE1vbmdvQ2hhbmdlU3RyZWFtTW9kZUVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdDaGFuZ2VTdHJlYW0gY2Fubm90IGJlIHVzZWQgYXMgYW4gaXRlcmF0b3IgYWZ0ZXIgYmVpbmcgdXNlZCBhcyBhbiBFdmVudEVtaXR0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW2tNb2RlXSA9ICdpdGVyYXRvcic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjaGFuZ2Ugc3RyZWFtIGN1cnNvciBiYXNlZCBvbiBzZWxmJ3MgY29uZmlndXJhdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9jcmVhdGVDaGFuZ2VTdHJlYW1DdXJzb3Iob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjaGFuZ2VTdHJlYW1TdGFnZU9wdGlvbnMgPSAoMCwgdXRpbHNfMS5maWx0ZXJPcHRpb25zKShvcHRpb25zLCBDSEFOR0VfU1RSRUFNX09QVElPTlMpO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSBDSEFOR0VfRE9NQUlOX1RZUEVTLkNMVVNURVIpIHtcbiAgICAgICAgICAgIGNoYW5nZVN0cmVhbVN0YWdlT3B0aW9ucy5hbGxDaGFuZ2VzRm9yQ2x1c3RlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBbeyAkY2hhbmdlU3RyZWFtOiBjaGFuZ2VTdHJlYW1TdGFnZU9wdGlvbnMgfSwgLi4udGhpcy5waXBlbGluZV07XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IHRoaXMudHlwZSA9PT0gQ0hBTkdFX0RPTUFJTl9UWVBFUy5DTFVTVEVSXG4gICAgICAgICAgICA/IHRoaXMucGFyZW50XG4gICAgICAgICAgICA6IHRoaXMudHlwZSA9PT0gQ0hBTkdFX0RPTUFJTl9UWVBFUy5EQVRBQkFTRVxuICAgICAgICAgICAgICAgID8gdGhpcy5wYXJlbnQuY2xpZW50XG4gICAgICAgICAgICAgICAgOiB0aGlzLnR5cGUgPT09IENIQU5HRV9ET01BSU5fVFlQRVMuQ09MTEVDVElPTlxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGFyZW50LmNsaWVudFxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGlmIChjbGllbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGJlY2F1c2Ugb2YgdGhlIGFzc2VydGlvbiBpbiB0aGUgY29uc3RydWN0b3JcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKGBDaGFuZ2VzdHJlYW0gdHlwZSBzaG91bGQgb25seSBiZSBvbmUgb2YgY2x1c3RlciwgZGF0YWJhc2UsIGNvbGxlY3Rpb24uIEZvdW5kICR7dGhpcy50eXBlLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlU3RyZWFtQ3Vyc29yID0gbmV3IGNoYW5nZV9zdHJlYW1fY3Vyc29yXzEuQ2hhbmdlU3RyZWFtQ3Vyc29yKGNsaWVudCwgdGhpcy5uYW1lc3BhY2UsIHBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBDSEFOR0VfU1RSRUFNX0VWRU5UUykge1xuICAgICAgICAgICAgY2hhbmdlU3RyZWFtQ3Vyc29yLm9uKGV2ZW50LCBlID0+IHRoaXMuZW1pdChldmVudCwgZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoQ2hhbmdlU3RyZWFtLkNIQU5HRSkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW1FdmVudHMoY2hhbmdlU3RyZWFtQ3Vyc29yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlU3RyZWFtQ3Vyc29yO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2Nsb3NlRW1pdHRlck1vZGVXaXRoRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lbWl0KENoYW5nZVN0cmVhbS5FUlJPUiwgZXJyb3IpO1xuICAgICAgICB0aGlzLmNsb3NlKCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfc3RyZWFtRXZlbnRzKGN1cnNvcikge1xuICAgICAgICB0aGlzLl9zZXRJc0VtaXR0ZXIoKTtcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpc1trQ3Vyc29yU3RyZWFtXSA/PyBjdXJzb3Iuc3RyZWFtKCk7XG4gICAgICAgIHRoaXNba0N1cnNvclN0cmVhbV0gPSBzdHJlYW07XG4gICAgICAgIHN0cmVhbS5vbignZGF0YScsIGNoYW5nZSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZENoYW5nZSA9IHRoaXMuX3Byb2Nlc3NDaGFuZ2UoY2hhbmdlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQ2hhbmdlU3RyZWFtLkNIQU5HRSwgcHJvY2Vzc2VkQ2hhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChDaGFuZ2VTdHJlYW0uRVJST1IsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBlcnJvciA9PiB0aGlzLl9wcm9jZXNzRXJyb3JTdHJlYW1Nb2RlKGVycm9yKSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfZW5kU3RyZWFtKCkge1xuICAgICAgICBjb25zdCBjdXJzb3JTdHJlYW0gPSB0aGlzW2tDdXJzb3JTdHJlYW1dO1xuICAgICAgICBpZiAoY3Vyc29yU3RyZWFtKSB7XG4gICAgICAgICAgICBbJ2RhdGEnLCAnY2xvc2UnLCAnZW5kJywgJ2Vycm9yJ10uZm9yRWFjaChldmVudCA9PiBjdXJzb3JTdHJlYW0ucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSk7XG4gICAgICAgICAgICBjdXJzb3JTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba0N1cnNvclN0cmVhbV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfcHJvY2Vzc0NoYW5nZShjaGFuZ2UpIHtcbiAgICAgICAgaWYgKHRoaXNba0Nsb3NlZF0pIHtcbiAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNDg1KTogUmVwbGFjZSB3aXRoIE1vbmdvQ2hhbmdlU3RyZWFtQ2xvc2VkRXJyb3JcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoQ0hBTkdFU1RSRUFNX0NMT1NFRF9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYSBudWxsIGNoYW5nZSBtZWFucyB0aGUgY3Vyc29yIGhhcyBiZWVuIG5vdGlmaWVkLCBpbXBsaWNpdGx5IGNsb3NpbmcgdGhlIGNoYW5nZSBzdHJlYW1cbiAgICAgICAgaWYgKGNoYW5nZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4NSk6IFJlcGxhY2Ugd2l0aCBNb25nb0NoYW5nZVN0cmVhbUNsb3NlZEVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihDSEFOR0VTVFJFQU1fQ0xPU0VEX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlICYmICFjaGFuZ2UuX2lkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NoYW5nZVN0cmVhbUVycm9yKE5PX1JFU1VNRV9UT0tFTl9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FjaGUgdGhlIHJlc3VtZSB0b2tlblxuICAgICAgICB0aGlzLmN1cnNvci5jYWNoZVJlc3VtZVRva2VuKGNoYW5nZS5faWQpO1xuICAgICAgICAvLyB3aXBlIHRoZSBzdGFydEF0T3BlcmF0aW9uVGltZSBpZiB0aGVyZSB3YXMgb25lIHNvIHRoYXQgdGhlcmUgd29uJ3QgYmUgYSBjb25mbGljdFxuICAgICAgICAvLyBiZXR3ZWVuIHJlc3VtZVRva2VuIGFuZCBzdGFydEF0T3BlcmF0aW9uVGltZSBpZiB3ZSBuZWVkIHRvIHJlY29ubmVjdCB0aGUgY3Vyc29yXG4gICAgICAgIHRoaXMub3B0aW9ucy5zdGFydEF0T3BlcmF0aW9uVGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9wcm9jZXNzRXJyb3JTdHJlYW1Nb2RlKGNoYW5nZVN0cmVhbUVycm9yKSB7XG4gICAgICAgIC8vIElmIHRoZSBjaGFuZ2Ugc3RyZWFtIGhhcyBiZWVuIGNsb3NlZCBleHBsaWNpdGx5LCBkbyBub3QgcHJvY2VzcyBlcnJvci5cbiAgICAgICAgaWYgKHRoaXNba0Nsb3NlZF0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICgoMCwgZXJyb3JfMS5pc1Jlc3VtYWJsZUVycm9yKShjaGFuZ2VTdHJlYW1FcnJvciwgdGhpcy5jdXJzb3IubWF4V2lyZVZlcnNpb24pKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRTdHJlYW0oKTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yLmNsb3NlKCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICBjb25zdCB0b3BvbG9neSA9ICgwLCB1dGlsc18xLmdldFRvcG9sb2d5KSh0aGlzLnBhcmVudCk7XG4gICAgICAgICAgICB0b3BvbG9neS5zZWxlY3RTZXJ2ZXIodGhpcy5jdXJzb3IucmVhZFByZWZlcmVuY2UsIHsgb3BlcmF0aW9uTmFtZTogJ3JlY29ubmVjdCB0b3BvbG9neSBpbiBjaGFuZ2Ugc3RyZWFtJyB9LCBzZXJ2ZXJTZWxlY3Rpb25FcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZlclNlbGVjdGlvbkVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VFbWl0dGVyTW9kZVdpdGhFcnJvcihjaGFuZ2VTdHJlYW1FcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3IgPSB0aGlzLl9jcmVhdGVDaGFuZ2VTdHJlYW1DdXJzb3IodGhpcy5jdXJzb3IucmVzdW1lT3B0aW9ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRW1pdHRlck1vZGVXaXRoRXJyb3IoY2hhbmdlU3RyZWFtRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfcHJvY2Vzc0Vycm9ySXRlcmF0b3JNb2RlKGNoYW5nZVN0cmVhbUVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzW2tDbG9zZWRdKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4NSk6IFJlcGxhY2Ugd2l0aCBNb25nb0NoYW5nZVN0cmVhbUNsb3NlZEVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKENIQU5HRVNUUkVBTV9DTE9TRURfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKDAsIGVycm9yXzEuaXNSZXN1bWFibGVFcnJvcikoY2hhbmdlU3RyZWFtRXJyb3IsIHRoaXMuY3Vyc29yLm1heFdpcmVWZXJzaW9uKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIGNsb3NlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBjaGFuZ2VTdHJlYW1FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLmN1cnNvci5jbG9zZSgpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICBjb25zdCB0b3BvbG9neSA9ICgwLCB1dGlsc18xLmdldFRvcG9sb2d5KSh0aGlzLnBhcmVudCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0b3BvbG9neS5zZWxlY3RTZXJ2ZXJBc3luYyh0aGlzLmN1cnNvci5yZWFkUHJlZmVyZW5jZSwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbk5hbWU6ICdyZWNvbm5lY3QgdG9wb2xvZ3kgaW4gY2hhbmdlIHN0cmVhbSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3IgPSB0aGlzLl9jcmVhdGVDaGFuZ2VTdHJlYW1DdXJzb3IodGhpcy5jdXJzb3IucmVzdW1lT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHRvcG9sb2d5IGNhbid0IHJlY29ubmVjdCwgY2xvc2UgdGhlIHN0cmVhbVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhyb3cgY2hhbmdlU3RyZWFtRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKiogQGV2ZW50ICovXG5DaGFuZ2VTdHJlYW0uUkVTUE9OU0UgPSBjb25zdGFudHNfMS5SRVNQT05TRTtcbi8qKiBAZXZlbnQgKi9cbkNoYW5nZVN0cmVhbS5NT1JFID0gY29uc3RhbnRzXzEuTU9SRTtcbi8qKiBAZXZlbnQgKi9cbkNoYW5nZVN0cmVhbS5JTklUID0gY29uc3RhbnRzXzEuSU5JVDtcbi8qKiBAZXZlbnQgKi9cbkNoYW5nZVN0cmVhbS5DTE9TRSA9IGNvbnN0YW50c18xLkNMT1NFO1xuLyoqXG4gKiBGaXJlZCBmb3IgZWFjaCBuZXcgbWF0Y2hpbmcgY2hhbmdlIGluIHRoZSBzcGVjaWZpZWQgbmFtZXNwYWNlLiBBdHRhY2hpbmcgYSBgY2hhbmdlYFxuICogZXZlbnQgbGlzdGVuZXIgdG8gYSBDaGFuZ2UgU3RyZWFtIHdpbGwgc3dpdGNoIHRoZSBzdHJlYW0gaW50byBmbG93aW5nIG1vZGUuIERhdGEgd2lsbFxuICogdGhlbiBiZSBwYXNzZWQgYXMgc29vbiBhcyBpdCBpcyBhdmFpbGFibGUuXG4gKiBAZXZlbnRcbiAqL1xuQ2hhbmdlU3RyZWFtLkNIQU5HRSA9IGNvbnN0YW50c18xLkNIQU5HRTtcbi8qKiBAZXZlbnQgKi9cbkNoYW5nZVN0cmVhbS5FTkQgPSBjb25zdGFudHNfMS5FTkQ7XG4vKiogQGV2ZW50ICovXG5DaGFuZ2VTdHJlYW0uRVJST1IgPSBjb25zdGFudHNfMS5FUlJPUjtcbi8qKlxuICogRW1pdHRlZCBlYWNoIHRpbWUgdGhlIGNoYW5nZSBzdHJlYW0gc3RvcmVzIGEgbmV3IHJlc3VtZSB0b2tlbi5cbiAqIEBldmVudFxuICovXG5DaGFuZ2VTdHJlYW0uUkVTVU1FX1RPS0VOX0NIQU5HRUQgPSBjb25zdGFudHNfMS5SRVNVTUVfVE9LRU5fQ0hBTkdFRDtcbmV4cG9ydHMuQ2hhbmdlU3RyZWFtID0gQ2hhbmdlU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbmdlX3N0cmVhbS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nconst kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nconst kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nclass AutoEncrypter {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */\n    constructor(client, options) {\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */\n        this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap)\n                ? options.schemaMap\n                : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap)\n                ? options.encryptedFieldsMap\n                : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders)\n            ? (0, bson_1.serialize)(this._kmsProviders)\n            : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        }\n        else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions &&\n            options.extraOptions.cryptSharedLibRequired &&\n            !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') {\n                clientOptions.family = 4;\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */\n    async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', { cause: error });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */\n    async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */\n    async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        return stateMachine.execute(this, context);\n    }\n    /**\n     * Decrypt a command response\n     */\n    async decrypt(response, options = {}) {\n        const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n        const context = this._mongocrypt.makeDecryptionContext(buffer);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const decorateResult = this[kDecorateResult];\n        const result = await stateMachine.execute(this, context);\n        if (decorateResult) {\n            decorateDecryptionResult(result, response);\n        }\n        return result;\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */\n    get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[kDecoratedKeys]) {\n                Object.defineProperty(decrypted, kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n//# sourceMappingURL=auto_encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9hdXRvX2VuY3J5cHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLGlDQUFpQztBQUN6RCxlQUFlLG1CQUFPLENBQUMseURBQVM7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLHlEQUFTO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHVCQUF1QixtQkFBTyxDQUFDLHlFQUFpQjtBQUNoRCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDcEQsaUJBQWlCLG1CQUFPLENBQUMsbUZBQVU7QUFDbkMsOEJBQThCLG1CQUFPLENBQUMsNkdBQXVCO0FBQzdELG9CQUFvQixtQkFBTyxDQUFDLCtGQUFhO0FBQ3pDLHdCQUF3QixtQkFBTyxDQUFDLGlHQUFpQjtBQUNqRDtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQSwySkFBMkosY0FBYztBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFDQUFxQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9hdXRvX2VuY3J5cHRlci5qcz9hZDc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdXRvRW5jcnlwdGVyID0gZXhwb3J0cy5BdXRvRW5jcnlwdGlvbkxvZ2dlckxldmVsID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi4vZGVwc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBtb25nb19jbGllbnRfMSA9IHJlcXVpcmUoXCIuLi9tb25nb19jbGllbnRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY3J5cHRvQ2FsbGJhY2tzID0gcmVxdWlyZShcIi4vY3J5cHRvX2NhbGxiYWNrc1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgbW9uZ29jcnlwdGRfbWFuYWdlcl8xID0gcmVxdWlyZShcIi4vbW9uZ29jcnlwdGRfbWFuYWdlclwiKTtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzXCIpO1xuY29uc3Qgc3RhdGVfbWFjaGluZV8xID0gcmVxdWlyZShcIi4vc3RhdGVfbWFjaGluZVwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkF1dG9FbmNyeXB0aW9uTG9nZ2VyTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBGYXRhbEVycm9yOiAwLFxuICAgIEVycm9yOiAxLFxuICAgIFdhcm5pbmc6IDIsXG4gICAgSW5mbzogMyxcbiAgICBUcmFjZTogNFxufSk7XG4vLyBUeXBlc2NyaXB0IGVycm9ycyBpZiB3ZSBpbmRleCBvYmplY3RzIHdpdGggYFN5bWJvbC5mb3IoLi4uKWAsIHNvXG4vLyB0byBhdm9pZCBUUyBlcnJvcnMgd2UgcHVsbCB0aGVtIG91dCBpbnRvIHZhcmlhYmxlcy4gIFRoZW4gd2UgY2FuIHR5cGVcbi8vIHRoZSBvYmplY3RzIChhbmQgY2xhc3MpIHRoYXQgd2UgZXhwZWN0IHRvIHNlZSB0aGVtIG9uIGFuZCBwcmV2ZW50IFRTXG4vLyBlcnJvcnMuXG4vKiogQGludGVybmFsICovXG5jb25zdCBrRGVjb3JhdGVSZXN1bHQgPSBTeW1ib2wuZm9yKCdAQG1kYi5kZWNvcmF0ZURlY3J5cHRpb25SZXN1bHQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtEZWNvcmF0ZWRLZXlzID0gU3ltYm9sLmZvcignQEBtZGIuZGVjcnlwdGVkS2V5cycpO1xuLyoqXG4gKiBAaW50ZXJuYWwgQW4gaW50ZXJuYWwgY2xhc3MgdG8gYmUgdXNlZCBieSB0aGUgZHJpdmVyIGZvciBhdXRvIGVuY3J5cHRpb25cbiAqICoqTk9URSoqOiBOb3QgbWVhbnQgdG8gYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LCB0aGlzIGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAqL1xuY2xhc3MgQXV0b0VuY3J5cHRlciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHN0YXRpYyBnZXRNb25nb0NyeXB0KCkge1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uID0gKDAsIGRlcHNfMS5nZXRNb25nb0RCQ2xpZW50RW5jcnlwdGlvbikoKTtcbiAgICAgICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGVuY3J5cHRpb24pIHtcbiAgICAgICAgICAgIHRocm93IGVuY3J5cHRpb24ua01vZHVsZUVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmNyeXB0aW9uLk1vbmdvQ3J5cHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBBdXRvRW5jcnlwdGVyXG4gICAgICpcbiAgICAgKiAqKk5vdGUqKjogRG8gbm90IGluc3RhbnRpYXRlIHRoaXMgY2xhc3MgZGlyZWN0bHkuIFJhdGhlciwgc3VwcGx5IHRoZSByZWxldmFudCBvcHRpb25zIHRvIGEgTW9uZ29DbGllbnRcbiAgICAgKlxuICAgICAqICoqTm90ZSoqOiBTdXBwbHlpbmcgYG9wdGlvbnMuc2NoZW1hTWFwYCBwcm92aWRlcyBtb3JlIHNlY3VyaXR5IHRoYW4gcmVseWluZyBvbiBKU09OIFNjaGVtYXMgb2J0YWluZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqIEl0IHByb3RlY3RzIGFnYWluc3QgYSBtYWxpY2lvdXMgc2VydmVyIGFkdmVydGlzaW5nIGEgZmFsc2UgSlNPTiBTY2hlbWEsIHdoaWNoIGNvdWxkIHRyaWNrIHRoZSBjbGllbnQgaW50byBzZW5kaW5nIHVuZW5jcnlwdGVkIGRhdGEgdGhhdCBzaG91bGQgYmUgZW5jcnlwdGVkLlxuICAgICAqIFNjaGVtYXMgc3VwcGxpZWQgaW4gdGhlIHNjaGVtYU1hcCBvbmx5IGFwcGx5IHRvIGNvbmZpZ3VyaW5nIGF1dG9tYXRpYyBlbmNyeXB0aW9uIGZvciBDbGllbnQtU2lkZSBGaWVsZCBMZXZlbCBFbmNyeXB0aW9uLlxuICAgICAqIE90aGVyIHZhbGlkYXRpb24gcnVsZXMgaW4gdGhlIEpTT04gc2NoZW1hIHdpbGwgbm90IGJlIGVuZm9yY2VkIGJ5IHRoZSBkcml2ZXIgYW5kIHdpbGwgcmVzdWx0IGluIGFuIGVycm9yLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Q3JlYXRlIGFuIEF1dG9FbmNyeXB0ZXIgdGhhdCBtYWtlcyB1c2Ugb2YgbW9uZ29jcnlwdGQ8L2NhcHRpb24+XG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBFbmFibGluZyBhdXRvRW5jcnlwdGlvbiB2aWEgYSBNb25nb0NsaWVudCB1c2luZyBtb25nb2NyeXB0ZFxuICAgICAqIGNvbnN0IHsgTW9uZ29DbGllbnQgfSA9IHJlcXVpcmUoJ21vbmdvZGInKTtcbiAgICAgKiBjb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQoVVJMLCB7XG4gICAgICogICBhdXRvRW5jcnlwdGlvbjoge1xuICAgICAqICAgICBrbXNQcm92aWRlcnM6IHtcbiAgICAgKiAgICAgICBhd3M6IHtcbiAgICAgKiAgICAgICAgIGFjY2Vzc0tleUlkOiBBV1NfQUNDRVNTX0tFWSxcbiAgICAgKiAgICAgICAgIHNlY3JldEFjY2Vzc0tleTogQVdTX1NFQ1JFVF9LRVlcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGF3YWl0IGNsaWVudC5jb25uZWN0KCk7XG4gICAgICogLy8gRnJvbSBoZXJlIG9uLCB0aGUgY2xpZW50IHdpbGwgYmUgZW5jcnlwdGluZyAvIGRlY3J5cHRpbmcgYXV0b21hdGljYWxseVxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkNyZWF0ZSBhbiBBdXRvRW5jcnlwdGVyIHRoYXQgbWFrZXMgdXNlIG9mIGxpYm1vbmdvY3J5cHQncyBDU0ZMRSBzaGFyZWQgbGlicmFyeTwvY2FwdGlvbj5cbiAgICAgKiBgYGB0c1xuICAgICAqIC8vIEVuYWJsaW5nIGF1dG9FbmNyeXB0aW9uIHZpYSBhIE1vbmdvQ2xpZW50IHVzaW5nIENTRkxFIHNoYXJlZCBsaWJyYXJ5XG4gICAgICogY29uc3QgeyBNb25nb0NsaWVudCB9ID0gcmVxdWlyZSgnbW9uZ29kYicpO1xuICAgICAqIGNvbnN0IGNsaWVudCA9IG5ldyBNb25nb0NsaWVudChVUkwsIHtcbiAgICAgKiAgIGF1dG9FbmNyeXB0aW9uOiB7XG4gICAgICogICAgIGttc1Byb3ZpZGVyczoge1xuICAgICAqICAgICAgIGF3czoge31cbiAgICAgKiAgICAgfSxcbiAgICAgKiAgICAgZXh0cmFPcHRpb25zOiB7XG4gICAgICogICAgICAgY3J5cHRTaGFyZWRMaWJQYXRoOiAnL3BhdGgvdG8vbG9jYWwvY3J5cHQvc2hhcmVkL2xpYicsXG4gICAgICogICAgICAgY3J5cHRTaGFyZWRMaWJSZXF1aXJlZDogdHJ1ZVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xuICAgICAqIC8vIEZyb20gaGVyZSBvbiwgdGhlIGNsaWVudCB3aWxsIGJlIGVuY3J5cHRpbmcgLyBkZWNyeXB0aW5nIGF1dG9tYXRpY2FsbHlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgYnkgZGV2dG9vbHMgdG8gZW5hYmxlIGRlY29yYXRpbmcgZGVjcnlwdGlvbiByZXN1bHRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaGVuIHNldCBhbmQgZW5hYmxlZCwgYGRlY3J5cHRgIHdpbGwgYXV0b21hdGljYWxseSByZWN1cnNpdmVseVxuICAgICAgICAgKiB0cmF2ZXJzZSBhIGRlY3J5cHRlZCBkb2N1bWVudCBhbmQgaWYgYSBmaWVsZCBoYXMgYmVlbiBkZWNyeXB0ZWQsXG4gICAgICAgICAqIGl0IHdpbGwgbWFyayBpdCBhcyBkZWNyeXB0ZWQuICBDb21wYXNzIHVzZXMgdGhpcyB0byBkZXRlcm1pbmUgd2hpY2hcbiAgICAgICAgICogZmllbGRzIHdlcmUgZGVjcnlwdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpc1tfYV0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLl9ieXBhc3NFbmNyeXB0aW9uID0gb3B0aW9ucy5ieXBhc3NBdXRvRW5jcnlwdGlvbiA9PT0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fa2V5VmF1bHROYW1lc3BhY2UgPSBvcHRpb25zLmtleVZhdWx0TmFtZXNwYWNlIHx8ICdhZG1pbi5kYXRha2V5cyc7XG4gICAgICAgIHRoaXMuX2tleVZhdWx0Q2xpZW50ID0gb3B0aW9ucy5rZXlWYXVsdENsaWVudCB8fCBjbGllbnQ7XG4gICAgICAgIHRoaXMuX21ldGFEYXRhQ2xpZW50ID0gb3B0aW9ucy5tZXRhZGF0YUNsaWVudCB8fCBjbGllbnQ7XG4gICAgICAgIHRoaXMuX3Byb3h5T3B0aW9ucyA9IG9wdGlvbnMucHJveHlPcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLl90bHNPcHRpb25zID0gb3B0aW9ucy50bHNPcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLl9rbXNQcm92aWRlcnMgPSBvcHRpb25zLmttc1Byb3ZpZGVycyB8fCB7fTtcbiAgICAgICAgY29uc3QgbW9uZ29DcnlwdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjcnlwdG9DYWxsYmFja3NcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NoZW1hTWFwKSB7XG4gICAgICAgICAgICBtb25nb0NyeXB0T3B0aW9ucy5zY2hlbWFNYXAgPSBCdWZmZXIuaXNCdWZmZXIob3B0aW9ucy5zY2hlbWFNYXApXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnNjaGVtYU1hcFxuICAgICAgICAgICAgICAgIDogKDAsIGJzb25fMS5zZXJpYWxpemUpKG9wdGlvbnMuc2NoZW1hTWFwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHNNYXApIHtcbiAgICAgICAgICAgIG1vbmdvQ3J5cHRPcHRpb25zLmVuY3J5cHRlZEZpZWxkc01hcCA9IEJ1ZmZlci5pc0J1ZmZlcihvcHRpb25zLmVuY3J5cHRlZEZpZWxkc01hcClcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzTWFwXG4gICAgICAgICAgICAgICAgOiAoMCwgYnNvbl8xLnNlcmlhbGl6ZSkob3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHNNYXApO1xuICAgICAgICB9XG4gICAgICAgIG1vbmdvQ3J5cHRPcHRpb25zLmttc1Byb3ZpZGVycyA9ICFCdWZmZXIuaXNCdWZmZXIodGhpcy5fa21zUHJvdmlkZXJzKVxuICAgICAgICAgICAgPyAoMCwgYnNvbl8xLnNlcmlhbGl6ZSkodGhpcy5fa21zUHJvdmlkZXJzKVxuICAgICAgICAgICAgOiB0aGlzLl9rbXNQcm92aWRlcnM7XG4gICAgICAgIGlmIChvcHRpb25zLm9wdGlvbnM/LmxvZ2dlcikge1xuICAgICAgICAgICAgbW9uZ29DcnlwdE9wdGlvbnMubG9nZ2VyID0gb3B0aW9ucy5vcHRpb25zLmxvZ2dlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5leHRyYU9wdGlvbnMgJiYgb3B0aW9ucy5leHRyYU9wdGlvbnMuY3J5cHRTaGFyZWRMaWJQYXRoKSB7XG4gICAgICAgICAgICBtb25nb0NyeXB0T3B0aW9ucy5jcnlwdFNoYXJlZExpYlBhdGggPSBvcHRpb25zLmV4dHJhT3B0aW9ucy5jcnlwdFNoYXJlZExpYlBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYnlwYXNzUXVlcnlBbmFseXNpcykge1xuICAgICAgICAgICAgbW9uZ29DcnlwdE9wdGlvbnMuYnlwYXNzUXVlcnlBbmFseXNpcyA9IG9wdGlvbnMuYnlwYXNzUXVlcnlBbmFseXNpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ieXBhc3NNb25nb2NyeXB0ZEFuZENyeXB0U2hhcmVkID0gdGhpcy5fYnlwYXNzRW5jcnlwdGlvbiB8fCAhIW9wdGlvbnMuYnlwYXNzUXVlcnlBbmFseXNpcztcbiAgICAgICAgaWYgKG9wdGlvbnMuZXh0cmFPcHRpb25zICYmIG9wdGlvbnMuZXh0cmFPcHRpb25zLmNyeXB0U2hhcmVkTGliU2VhcmNoUGF0aHMpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgZm9yIGRyaXZlciB0ZXN0aW5nXG4gICAgICAgICAgICBtb25nb0NyeXB0T3B0aW9ucy5jcnlwdFNoYXJlZExpYlNlYXJjaFBhdGhzID0gb3B0aW9ucy5leHRyYU9wdGlvbnMuY3J5cHRTaGFyZWRMaWJTZWFyY2hQYXRocztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5fYnlwYXNzTW9uZ29jcnlwdGRBbmRDcnlwdFNoYXJlZCkge1xuICAgICAgICAgICAgbW9uZ29DcnlwdE9wdGlvbnMuY3J5cHRTaGFyZWRMaWJTZWFyY2hQYXRocyA9IFsnJFNZU1RFTSddO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IE1vbmdvQ3J5cHQgPSBBdXRvRW5jcnlwdGVyLmdldE1vbmdvQ3J5cHQoKTtcbiAgICAgICAgdGhpcy5fbW9uZ29jcnlwdCA9IG5ldyBNb25nb0NyeXB0KG1vbmdvQ3J5cHRPcHRpb25zKTtcbiAgICAgICAgdGhpcy5fY29udGV4dENvdW50ZXIgPSAwO1xuICAgICAgICBpZiAob3B0aW9ucy5leHRyYU9wdGlvbnMgJiZcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0cmFPcHRpb25zLmNyeXB0U2hhcmVkTGliUmVxdWlyZWQgJiZcbiAgICAgICAgICAgICF0aGlzLmNyeXB0U2hhcmVkTGliVmVyc2lvbkluZm8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3IoJ2BjcnlwdFNoYXJlZExpYlJlcXVpcmVkYCBzZXQgYnV0IG5vIGNyeXB0X3NoYXJlZCBsaWJyYXJ5IGxvYWRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE9ubHkgaW5zdGFudGlhdGUgbW9uZ29jcnlwdGQgbWFuYWdlci9jbGllbnQgb25jZSB3ZSBrbm93IGZvciBzdXJlXG4gICAgICAgIC8vIHRoYXQgd2UgYXJlIG5vdCB1c2luZyB0aGUgQ1NGTEUgc2hhcmVkIGxpYnJhcnkuXG4gICAgICAgIGlmICghdGhpcy5fYnlwYXNzTW9uZ29jcnlwdGRBbmRDcnlwdFNoYXJlZCAmJiAhdGhpcy5jcnlwdFNoYXJlZExpYlZlcnNpb25JbmZvKSB7XG4gICAgICAgICAgICB0aGlzLl9tb25nb2NyeXB0ZE1hbmFnZXIgPSBuZXcgbW9uZ29jcnlwdGRfbWFuYWdlcl8xLk1vbmdvY3J5cHRkTWFuYWdlcihvcHRpb25zLmV4dHJhT3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogMTAwMDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5leHRyYU9wdGlvbnMgPT0gbnVsbCB8fCB0eXBlb2Ygb3B0aW9ucy5leHRyYU9wdGlvbnMubW9uZ29jcnlwdGRVUkkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50T3B0aW9ucy5mYW1pbHkgPSA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbW9uZ29jcnlwdGRDbGllbnQgPSBuZXcgbW9uZ29fY2xpZW50XzEuTW9uZ29DbGllbnQodGhpcy5fbW9uZ29jcnlwdGRNYW5hZ2VyLnVyaSwgY2xpZW50T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGF1dG8gZW5jcnlwdGVyIGJ5IHNwYXduaW5nIGEgbW9uZ29jcnlwdGQgYW5kIGNvbm5lY3RpbmcgdG8gaXQuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGEgbm8tb3Agd2hlbiBieXBhc3NTcGF3biBpcyBzZXQgb3IgdGhlIGNyeXB0IHNoYXJlZCBsaWJyYXJ5IGlzIHVzZWQuXG4gICAgICovXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2J5cGFzc01vbmdvY3J5cHRkQW5kQ3J5cHRTaGFyZWQgfHwgdGhpcy5jcnlwdFNoYXJlZExpYlZlcnNpb25JbmZvKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9tb25nb2NyeXB0ZE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdSZWFjaGVkIGltcG9zc2libGUgc3RhdGU6IG1vbmdvY3J5cHRkTWFuYWdlciBpcyB1bmRlZmluZWQgd2hlbiBuZWl0aGVyIGJ5cGFzc1NwYXduIG5vciB0aGUgc2hhcmVkIGxpYiBhcmUgc3BlY2lmaWVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fbW9uZ29jcnlwdGRDbGllbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdSZWFjaGVkIGltcG9zc2libGUgc3RhdGU6IG1vbmdvY3J5cHRkQ2xpZW50IGlzIHVuZGVmaW5lZCB3aGVuIG5laXRoZXIgYnlwYXNzU3Bhd24gbm9yIHRoZSBzaGFyZWQgbGliIGFyZSBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9tb25nb2NyeXB0ZE1hbmFnZXIuYnlwYXNzU3Bhd24pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX21vbmdvY3J5cHRkTWFuYWdlci5zcGF3bigpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLl9tb25nb2NyeXB0ZENsaWVudC5jb25uZWN0KCk7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSBlcnJvcjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIChtZXNzYWdlLm1hdGNoKC90aW1lZCBvdXQgYWZ0ZXIvKSB8fCBtZXNzYWdlLm1hdGNoKC9FTk9URk9VTkQvKSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignVW5hYmxlIHRvIGNvbm5lY3QgdG8gYG1vbmdvY3J5cHRkYCwgcGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBydW5uaW5nIG9yIGluIHlvdXIgUEFUSCBmb3IgYXV0by1zcGF3bicsIHsgY2F1c2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIHRoZSBgX21vbmdvY3J5cHRkQ2xpZW50YCwgaWYgcHJlc2VudC5cbiAgICAgKi9cbiAgICBhc3luYyB0ZWFyZG93bihmb3JjZSkge1xuICAgICAgICBhd2FpdCB0aGlzLl9tb25nb2NyeXB0ZENsaWVudD8uY2xvc2UoZm9yY2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNyeXB0IGEgY29tbWFuZCBmb3IgYSBnaXZlbiBuYW1lc3BhY2UuXG4gICAgICovXG4gICAgYXN5bmMgZW5jcnlwdChucywgY21kLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuX2J5cGFzc0VuY3J5cHRpb24pIHtcbiAgICAgICAgICAgIC8vIElmIGBieXBhc3NBdXRvRW5jcnlwdGlvbmAgaGFzIGJlZW4gc3BlY2lmaWVkLCBkb24ndCBlbmNyeXB0XG4gICAgICAgICAgICByZXR1cm4gY21kO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbW1hbmRCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIoY21kKSA/IGNtZCA6ICgwLCBic29uXzEuc2VyaWFsaXplKShjbWQsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5fbW9uZ29jcnlwdC5tYWtlRW5jcnlwdGlvbkNvbnRleHQodXRpbHNfMS5Nb25nb0RCQ29sbGVjdGlvbk5hbWVzcGFjZS5mcm9tU3RyaW5nKG5zKS5kYiwgY29tbWFuZEJ1ZmZlcik7XG4gICAgICAgIGNvbnRleHQuaWQgPSB0aGlzLl9jb250ZXh0Q291bnRlcisrO1xuICAgICAgICBjb250ZXh0Lm5zID0gbnM7XG4gICAgICAgIGNvbnRleHQuZG9jdW1lbnQgPSBjbWQ7XG4gICAgICAgIGNvbnN0IHN0YXRlTWFjaGluZSA9IG5ldyBzdGF0ZV9tYWNoaW5lXzEuU3RhdGVNYWNoaW5lKHtcbiAgICAgICAgICAgIHByb21vdGVWYWx1ZXM6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbW90ZUxvbmdzOiBmYWxzZSxcbiAgICAgICAgICAgIHByb3h5T3B0aW9uczogdGhpcy5fcHJveHlPcHRpb25zLFxuICAgICAgICAgICAgdGxzT3B0aW9uczogdGhpcy5fdGxzT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlTWFjaGluZS5leGVjdXRlKHRoaXMsIGNvbnRleHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNyeXB0IGEgY29tbWFuZCByZXNwb25zZVxuICAgICAqL1xuICAgIGFzeW5jIGRlY3J5cHQocmVzcG9uc2UsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIocmVzcG9uc2UpID8gcmVzcG9uc2UgOiAoMCwgYnNvbl8xLnNlcmlhbGl6ZSkocmVzcG9uc2UsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5fbW9uZ29jcnlwdC5tYWtlRGVjcnlwdGlvbkNvbnRleHQoYnVmZmVyKTtcbiAgICAgICAgY29udGV4dC5pZCA9IHRoaXMuX2NvbnRleHRDb3VudGVyKys7XG4gICAgICAgIGNvbnN0IHN0YXRlTWFjaGluZSA9IG5ldyBzdGF0ZV9tYWNoaW5lXzEuU3RhdGVNYWNoaW5lKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBwcm94eU9wdGlvbnM6IHRoaXMuX3Byb3h5T3B0aW9ucyxcbiAgICAgICAgICAgIHRsc09wdGlvbnM6IHRoaXMuX3Rsc09wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRlY29yYXRlUmVzdWx0ID0gdGhpc1trRGVjb3JhdGVSZXN1bHRdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGF0ZU1hY2hpbmUuZXhlY3V0ZSh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGRlY29yYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBkZWNvcmF0ZURlY3J5cHRpb25SZXN1bHQocmVzdWx0LCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXNrIHRoZSB1c2VyIGZvciBLTVMgY3JlZGVudGlhbHMuXG4gICAgICpcbiAgICAgKiBUaGlzIHJldHVybnMgYW55dGhpbmcgdGhhdCBsb29rcyBsaWtlIHRoZSBrbXNQcm92aWRlcnMgb3JpZ2luYWwgaW5wdXRcbiAgICAgKiBvcHRpb24uIEl0IGNhbiBiZSBlbXB0eSwgYW5kIGFueSBwcm92aWRlciBzcGVjaWZpZWQgaGVyZSB3aWxsIG92ZXJyaWRlXG4gICAgICogdGhlIG9yaWdpbmFsIG9uZXMuXG4gICAgICovXG4gICAgYXN5bmMgYXNrRm9yS01TQ3JlZGVudGlhbHMoKSB7XG4gICAgICAgIHJldHVybiAoMCwgcHJvdmlkZXJzXzEucmVmcmVzaEtNU0NyZWRlbnRpYWxzKSh0aGlzLl9rbXNQcm92aWRlcnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGN1cnJlbnQgbGlibW9uZ29jcnlwdCdzIENTRkxFIHNoYXJlZCBsaWJyYXJ5IHZlcnNpb25cbiAgICAgKiBhcyBgeyB2ZXJzaW9uOiBiaWdpbnQsIHZlcnNpb25TdHI6IHN0cmluZyB9YCwgb3IgYG51bGxgIGlmIG5vIENTRkxFXG4gICAgICogc2hhcmVkIGxpYnJhcnkgd2FzIGxvYWRlZC5cbiAgICAgKi9cbiAgICBnZXQgY3J5cHRTaGFyZWRMaWJWZXJzaW9uSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbmdvY3J5cHQuY3J5cHRTaGFyZWRMaWJWZXJzaW9uSW5mbztcbiAgICB9XG4gICAgc3RhdGljIGdldCBsaWJtb25nb2NyeXB0VmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIEF1dG9FbmNyeXB0ZXIuZ2V0TW9uZ29DcnlwdCgpLmxpYm1vbmdvY3J5cHRWZXJzaW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuQXV0b0VuY3J5cHRlciA9IEF1dG9FbmNyeXB0ZXI7XG5fYSA9IGtEZWNvcmF0ZVJlc3VsdDtcbi8qKlxuICogUmVjdXJzZSB0aHJvdWdoIHRoZSAoaWRlbnRpY2FsbHktc2hhcGVkKSBgZGVjcnlwdGVkYCBhbmQgYG9yaWdpbmFsYFxuICogb2JqZWN0cyBhbmQgYXR0YWNoIGEgYGRlY3J5cHRlZEtleXNgIHByb3BlcnR5IG9uIGVhY2ggc3ViLW9iamVjdCB0aGF0XG4gKiBjb250YWluZWQgZW5jcnlwdGVkIGZpZWxkcy4gQmVjYXVzZSB3ZSBvbmx5IGNhbGwgdGhpcyBvbiBCU09OIHJlc3BvbnNlcyxcbiAqIHdlIGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IGNpcmN1bGFyIHJlZmVyZW5jZXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRlRGVjcnlwdGlvblJlc3VsdChkZWNyeXB0ZWQsIG9yaWdpbmFsLCBpc1RvcExldmVsRGVjb3JhdGVDYWxsID0gdHJ1ZSkge1xuICAgIGlmIChpc1RvcExldmVsRGVjb3JhdGVDYWxsKSB7XG4gICAgICAgIC8vIFRoZSBvcmlnaW5hbCB2YWx1ZSBjb3VsZCBoYXZlIGJlZW4gZWl0aGVyIGEgSlMgb2JqZWN0IG9yIGEgQlNPTiBidWZmZXJcbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvcmlnaW5hbCkpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsID0gKDAsIGJzb25fMS5kZXNlcmlhbGl6ZSkob3JpZ2luYWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGVjcnlwdGVkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0V4cGVjdGVkIHJlc3VsdCBvZiBkZWNyeXB0aW9uIHRvIGJlIGRlc2VyaWFsaXplZCBCU09OIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZGVjcnlwdGVkIHx8IHR5cGVvZiBkZWNyeXB0ZWQgIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm47XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGRlY3J5cHRlZCkpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxWYWx1ZSA9IG9yaWdpbmFsW2tdO1xuICAgICAgICAvLyBBbiBvYmplY3Qgd2FzIGRlY3J5cHRlZCBieSBsaWJtb25nb2NyeXB0IGlmIGFuZCBvbmx5IGlmIGl0IHdhc1xuICAgICAgICAvLyBhIEJTT04gQmluYXJ5IG9iamVjdCB3aXRoIHN1YnR5cGUgNi5cbiAgICAgICAgaWYgKG9yaWdpbmFsVmFsdWUgJiYgb3JpZ2luYWxWYWx1ZS5fYnNvbnR5cGUgPT09ICdCaW5hcnknICYmIG9yaWdpbmFsVmFsdWUuc3ViX3R5cGUgPT09IDYpIHtcbiAgICAgICAgICAgIGlmICghZGVjcnlwdGVkW2tEZWNvcmF0ZWRLZXlzXSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWNyeXB0ZWQsIGtEZWNvcmF0ZWRLZXlzLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzIGlzIGRlZmluZWQgaW4gdGhlIHByZWNlZGluZyBpZi1zdGF0ZW1lbnRcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBkZWNyeXB0ZWRba0RlY29yYXRlZEtleXNdLnB1c2goayk7XG4gICAgICAgICAgICAvLyBEbyBub3QgcmVjdXJzZSBpbnRvIHRoaXMgZGVjcnlwdGVkIHZhbHVlLiBJdCBjb3VsZCBiZSBhIHN1Yi1kb2N1bWVudC9hcnJheSxcbiAgICAgICAgICAgIC8vIGluIHdoaWNoIGNhc2UgdGhlcmUgaXMgbm8gb3JpZ2luYWwgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0cyBzdWJmaWVsZHMuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBkZWNvcmF0ZURlY3J5cHRpb25SZXN1bHQoZGVjcnlwdGVkW2tdLCBvcmlnaW5hbFZhbHVlLCBmYWxzZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0b19lbmNyeXB0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientEncryption = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const dataKey = await stateMachine.execute(this, context);\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, { writeConcern: { w: 'majority' } });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v: dataKeys } = await stateMachine.execute(this, context);\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' }\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' } });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before' });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before'\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, { masterKey })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v } = await stateMachine.execute(this, context);\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const result = await stateMachine.execute(this, context);\n        return result.v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n//# sourceMappingURL=client_encryption.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = exports.signRsaSha256Hook = exports.makeHmacHook = exports.sha256Hook = exports.randomHook = exports.makeAES256Hook = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeAES256Hook = makeAES256Hook;\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nexports.randomHook = randomHook;\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.sha256Hook = sha256Hook;\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeHmacHook = makeHmacHook;\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.signRsaSha256Hook = signRsaSha256Hook;\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9jcnlwdG9fY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHNCQUFzQixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLHlCQUF5QixHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLHNCQUFzQjtBQUNqUyxlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsdUJBQXVCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9jcnlwdG9fY2FsbGJhY2tzLmpzPzc3ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhtYWNTaGEyNTZIb29rID0gZXhwb3J0cy5obWFjU2hhNTEySG9vayA9IGV4cG9ydHMuYWVzMjU2Q3RyRGVjcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkN0ckVuY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDYmNEZWNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q2JjRW5jcnlwdEhvb2sgPSBleHBvcnRzLnNpZ25Sc2FTaGEyNTZIb29rID0gZXhwb3J0cy5tYWtlSG1hY0hvb2sgPSBleHBvcnRzLnNoYTI1Nkhvb2sgPSBleHBvcnRzLnJhbmRvbUhvb2sgPSBleHBvcnRzLm1ha2VBRVMyNTZIb29rID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmZ1bmN0aW9uIG1ha2VBRVMyNTZIb29rKG1ldGhvZCwgbW9kZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCBpdiwgaW5wdXQsIG91dHB1dCkge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gY3J5cHRvW21ldGhvZF0obW9kZSwga2V5LCBpdik7XG4gICAgICAgICAgICBjaXBoZXIuc2V0QXV0b1BhZGRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgcmVzdWx0ID0gY2lwaGVyLnVwZGF0ZShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBmaW5hbCA9IGNpcGhlci5maW5hbCgpO1xuICAgICAgICAgICAgaWYgKGZpbmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBCdWZmZXIuY29uY2F0KFtyZXN1bHQsIGZpbmFsXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5jb3B5KG91dHB1dCk7XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VBRVMyNTZIb29rID0gbWFrZUFFUzI1Nkhvb2s7XG5mdW5jdGlvbiByYW5kb21Ib29rKGJ1ZmZlciwgY291bnQpIHtcbiAgICB0cnkge1xuICAgICAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMoYnVmZmVyLCAwLCBjb3VudCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG59XG5leHBvcnRzLnJhbmRvbUhvb2sgPSByYW5kb21Ib29rO1xuZnVuY3Rpb24gc2hhMjU2SG9vayhpbnB1dCwgb3V0cHV0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGlucHV0KS5kaWdlc3QoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJlc3VsdC5jb3B5KG91dHB1dCk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG59XG5leHBvcnRzLnNoYTI1Nkhvb2sgPSBzaGEyNTZIb29rO1xuZnVuY3Rpb24gbWFrZUhtYWNIb29rKGFsZ29yaXRobSkge1xuICAgIHJldHVybiAoa2V5LCBpbnB1dCwgb3V0cHV0KSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjcnlwdG8uY3JlYXRlSG1hYyhhbGdvcml0aG0sIGtleSkudXBkYXRlKGlucHV0KS5kaWdlc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUhtYWNIb29rID0gbWFrZUhtYWNIb29rO1xuZnVuY3Rpb24gc2lnblJzYVNoYTI1Nkhvb2soa2V5LCBpbnB1dCwgb3V0cHV0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzaWduZXIgPSBjcnlwdG8uY3JlYXRlU2lnbignc2hhMjU2V2l0aFJTQUVuY3J5cHRpb24nKTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IEJ1ZmZlci5mcm9tKGAtLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cXG4ke2tleS50b1N0cmluZygnYmFzZTY0Jyl9XFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLVxcbmApO1xuICAgICAgICByZXN1bHQgPSBzaWduZXIudXBkYXRlKGlucHV0KS5lbmQoKS5zaWduKHByaXZhdGVLZXkpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbn1cbmV4cG9ydHMuc2lnblJzYVNoYTI1Nkhvb2sgPSBzaWduUnNhU2hhMjU2SG9vaztcbmV4cG9ydHMuYWVzMjU2Q2JjRW5jcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlQ2lwaGVyaXYnLCAnYWVzLTI1Ni1jYmMnKTtcbmV4cG9ydHMuYWVzMjU2Q2JjRGVjcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlRGVjaXBoZXJpdicsICdhZXMtMjU2LWNiYycpO1xuZXhwb3J0cy5hZXMyNTZDdHJFbmNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVDaXBoZXJpdicsICdhZXMtMjU2LWN0cicpO1xuZXhwb3J0cy5hZXMyNTZDdHJEZWNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVEZWNpcGhlcml2JywgJ2Flcy0yNTYtY3RyJyk7XG5leHBvcnRzLmhtYWNTaGE1MTJIb29rID0gbWFrZUhtYWNIb29rKCdzaGE1MTInKTtcbmV4cG9ydHMuaG1hY1NoYTI1Nkhvb2sgPSBtYWtlSG1hY0hvb2soJ3NoYTI1NicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvX2NhbGxiYWNrcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0NBQStDLEdBQUcsc0NBQXNDLEdBQUcsZ0RBQWdELEdBQUcsb0NBQW9DLEdBQUcsc0NBQXNDLEdBQUcsdUJBQXVCO0FBQ3JQLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQyx3REFBd0QsY0FBYyxLQUFLLE9BQU87QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUMsOENBQThDLGNBQWMsS0FBSyxPQUFPO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vZXJyb3JzLmpzPzc2ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0Q3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbkVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBzb21ldGhpbmcgd2VudCB3cm9uZyBzcGVjaWZpY2FsbHkgd2l0aCBNb25nb0RCIENsaWVudCBFbmNyeXB0aW9uXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29FcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRFcnJvciA9IE1vbmdvQ3J5cHRFcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgYW4gaW52YWxpZCBhcmd1bWVudCB3YXMgcHJvdmlkZWQgdG8gYW4gZW5jcnlwdGlvbiBBUEkuXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3IgPSBNb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBgQ2xpZW50RW5jcnlwdGlvbi5jcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uKClgIGZhaWxlZCB0byBjcmVhdGUgZGF0YSBrZXlzXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihlbmNyeXB0ZWRGaWVsZHMsIHsgY2F1c2UgfSkge1xuICAgICAgICBzdXBlcihgVW5hYmxlIHRvIGNvbXBsZXRlIGNyZWF0aW5nIGRhdGEga2V5czogJHtjYXVzZS5tZXNzYWdlfWAsIHsgY2F1c2UgfSk7XG4gICAgICAgIHRoaXMuZW5jcnlwdGVkRmllbGRzID0gZW5jcnlwdGVkRmllbGRzO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3IgPSBNb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgYENsaWVudEVuY3J5cHRpb24uY3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbigpYCBmYWlsZWQgdG8gY3JlYXRlIGEgY29sbGVjdGlvblxuICovXG5jbGFzcyBNb25nb0NyeXB0Q3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbkVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IoZW5jcnlwdGVkRmllbGRzLCB7IGNhdXNlIH0pIHtcbiAgICAgICAgc3VwZXIoYFVuYWJsZSB0byBjcmVhdGUgY29sbGVjdGlvbjogJHtjYXVzZS5tZXNzYWdlfWAsIHsgY2F1c2UgfSk7XG4gICAgICAgIHRoaXMuZW5jcnlwdGVkRmllbGRzID0gZW5jcnlwdGVkRmllbGRzO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0Q3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbkVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3IgPSBNb25nb0NyeXB0Q3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbkVycm9yO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgbW9uZ29kYi1jbGllbnQtZW5jcnlwdGlvbiBmYWlsZWQgdG8gYXV0by1yZWZyZXNoIEF6dXJlIEtNUyBjcmVkZW50aWFscy5cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYm9keSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvciA9IE1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcjtcbi8qKiBAcHVibGljICovXG5jbGFzcyBNb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IgPSBNb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n        this.spawnArgs = [];\n        if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\nexports.MongocryptdManager = MongocryptdManager;\n//# sourceMappingURL=mongocryptd_manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9tb25nb2NyeXB0ZF9tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUSxFQUFFLG1CQUFPLENBQUMsb0NBQWU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL21vbmdvY3J5cHRkX21hbmFnZXIuanM/MGE3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29jcnlwdGRNYW5hZ2VyID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBBbiBpbnRlcm5hbCBjbGFzcyB0aGF0IGhhbmRsZXMgc3Bhd25pbmcgYSBtb25nb2NyeXB0ZC5cbiAqL1xuY2xhc3MgTW9uZ29jcnlwdGRNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihleHRyYU9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLnVyaSA9XG4gICAgICAgICAgICB0eXBlb2YgZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkVVJJID09PSAnc3RyaW5nJyAmJiBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRVUkkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkVVJJXG4gICAgICAgICAgICAgICAgOiBNb25nb2NyeXB0ZE1hbmFnZXIuREVGQVVMVF9NT05HT0NSWVBURF9VUkk7XG4gICAgICAgIHRoaXMuYnlwYXNzU3Bhd24gPSAhIWV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZEJ5cGFzc1NwYXduO1xuICAgICAgICB0aGlzLnNwYXduUGF0aCA9IGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFNwYXduUGF0aCB8fCAnJztcbiAgICAgICAgdGhpcy5zcGF3bkFyZ3MgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25BcmdzKSkge1xuICAgICAgICAgICAgdGhpcy5zcGF3bkFyZ3MgPSB0aGlzLnNwYXduQXJncy5jb25jYXQoZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25BcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zcGF3bkFyZ3NcbiAgICAgICAgICAgIC5maWx0ZXIoYXJnID0+IHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgLmV2ZXJ5KGFyZyA9PiBhcmcuaW5kZXhPZignLS1pZGxlU2h1dGRvd25UaW1lb3V0U2VjcycpIDwgMCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Bhd25BcmdzLnB1c2goJy0taWRsZVNodXRkb3duVGltZW91dFNlY3MnLCAnNjAnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIGNoZWNrIHRvIHNlZSBpZiBhIG1vbmdvY3J5cHRkIGlzIHVwLiBJZiBpdCBpcyBub3QgdXAsIGl0IHdpbGwgYXR0ZW1wdFxuICAgICAqIHRvIHNwYXduIGEgbW9uZ29jcnlwdGQgaW4gYSBkZXRhY2hlZCBwcm9jZXNzLCBhbmQgdGhlbiB3YWl0IGZvciBpdCB0byBiZSB1cC5cbiAgICAgKi9cbiAgICBhc3luYyBzcGF3bigpIHtcbiAgICAgICAgY29uc3QgY21kTmFtZSA9IHRoaXMuc3Bhd25QYXRoIHx8ICdtb25nb2NyeXB0ZCc7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gICAgICAgIGNvbnN0IHsgc3Bhd24gfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbiAgICAgICAgLy8gU3Bhd25lZCB3aXRoIHN0ZGlvOiBpZ25vcmUgYW5kIGRldGFjaGVkOiB0cnVlXG4gICAgICAgIC8vIHRvIGVuc3VyZSBjaGlsZCBjYW4gb3V0bGl2ZSBwYXJlbnQuXG4gICAgICAgIHRoaXMuX2NoaWxkID0gc3Bhd24oY21kTmFtZSwgdGhpcy5zcGF3bkFyZ3MsIHtcbiAgICAgICAgICAgIHN0ZGlvOiAnaWdub3JlJyxcbiAgICAgICAgICAgIGRldGFjaGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9jaGlsZC5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBGcm9tIHRoZSBGTEUgc3BlYzpcbiAgICAgICAgICAgIC8vIFwiVGhlIHN0ZG91dCBhbmQgc3RkZXJyIG9mIHRoZSBzcGF3bmVkIHByb2Nlc3MgTVVTVCBub3QgYmUgZXhwb3NlZCBpbiB0aGUgZHJpdmVyXG4gICAgICAgICAgICAvLyAoZS5nLiByZWRpcmVjdCB0byAvZGV2L251bGwpLiBVc2VycyBjYW4gcGFzcyB0aGUgYXJndW1lbnQgLS1sb2dwYXRoIHRvXG4gICAgICAgICAgICAvLyBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3bkFyZ3MgaWYgdGhleSBuZWVkIHRvIGluc3BlY3QgbW9uZ29jcnlwdGQgbG9ncy5cbiAgICAgICAgICAgIC8vIElmIHNwYXduaW5nIGlzIG5lY2Vzc2FyeSwgdGhlIGRyaXZlciBNVVNUIHNwYXduIG1vbmdvY3J5cHRkIHdoZW5ldmVyIHNlcnZlclxuICAgICAgICAgICAgLy8gc2VsZWN0aW9uIG9uIHRoZSBNb25nb0NsaWVudCB0byBtb25nb2NyeXB0ZCBmYWlscy4gSWYgdGhlIE1vbmdvQ2xpZW50IGZhaWxzIHRvXG4gICAgICAgICAgICAvLyBjb25uZWN0IGFmdGVyIHNwYXduaW5nLCB0aGUgc2VydmVyIHNlbGVjdGlvbiBlcnJvciBpcyBwcm9wYWdhdGVkIHRvIHRoZSB1c2VyLlwiXG4gICAgICAgICAgICAvLyBUaGUgQXV0b0VuY3J5cHRlciBhbmQgTW9uZ29DcnlwdGRNYW5hZ2VyIHNob3VsZCB3b3JrIHRvZ2V0aGVyIHRvIHNwYXduXG4gICAgICAgICAgICAvLyBtb25nb2NyeXB0ZCB3aGVuZXZlciBuZWNlc3NhcnkuICBBZGRpdGlvbmFsbHksIHRoZSBgbW9uZ29jcnlwdGRgIGludGVudGlvbmFsbHlcbiAgICAgICAgICAgIC8vIHNodXRzIGRvd24gYWZ0ZXIgNjBzIGFuZCBnZXRzIHJlc3Bhd25lZCB3aGVuIG5lY2Vzc2FyeS4gIFdlIHJlbHkgb24gc2VydmVyXG4gICAgICAgICAgICAvLyBzZWxlY3Rpb24gdGltZW91dHMgd2hlbiBjb25uZWN0aW5nIHRvIHRoZSBgbW9uZ29jcnlwdGRgIHRvIGluZm9ybSB1c2VycyB0aGF0IHNvbWV0aGluZ1xuICAgICAgICAgICAgLy8gaGFzIGJlZW4gY29uZmlndXJlZCBpbmNvcnJlY3RseS4gIEZvciB0aG9zZSByZWFzb25zLCB3ZSBzdXBwcmVzcyBzdGRlcnIgZnJvbVxuICAgICAgICAgICAgLy8gdGhlIGBtb25nb2NyeXB0ZGAgcHJvY2VzcyBhbmQgaW1tZWRpYXRlbHkgdW5yZWYgdGhlIHByb2Nlc3MuXG4gICAgICAgIH0pO1xuICAgICAgICAvLyB1bnJlZiBjaGlsZCB0byByZW1vdmUgaGFuZGxlIGZyb20gZXZlbnQgbG9vcFxuICAgICAgICB0aGlzLl9jaGlsZC51bnJlZigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmbmAgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGFzeW5jIHdpdGhSZXNwYXduKGZuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGJ5cGFzc2luZyBzcGF3bmluZywgdGhlbiB3ZSBzaG91bGQgcmV0cnkgb25jZSBvbiBhIE1vbmdvVGltZW91dEVycm9yIChzZXJ2ZXIgc2VsZWN0aW9uIGVycm9yKVxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU3Bhd24gPSBlcnIgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya1RpbWVvdXRFcnJvciAmJiAhdGhpcy5ieXBhc3NTcGF3bjtcbiAgICAgICAgICAgIGlmICghc2hvdWxkU3Bhd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5zcGF3bigpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbk1vbmdvY3J5cHRkTWFuYWdlci5ERUZBVUxUX01PTkdPQ1JZUFREX1VSSSA9ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDIwJztcbmV4cG9ydHMuTW9uZ29jcnlwdGRNYW5hZ2VyID0gTW9uZ29jcnlwdGRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29jcnlwdGRfbWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAWSCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    if ('kModuleError' in credentialProvider) {\n        return kmsProviders;\n    }\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    // The state machine is the only place calling this so it will\n    // catch if there is a rejection here.\n    const aws = await provider();\n    return { ...kmsProviders, aws };\n}\nexports.loadAWSCredentials = loadAWSCredentials;\n//# sourceMappingURL=aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2F3cy5qcz8yZjk1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkQVdTQ3JlZGVudGlhbHMgPSB2b2lkIDA7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGVwc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRBV1NDcmVkZW50aWFscyhrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBjcmVkZW50aWFsUHJvdmlkZXIgPSAoMCwgZGVwc18xLmdldEF3c0NyZWRlbnRpYWxQcm92aWRlcikoKTtcbiAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gY3JlZGVudGlhbFByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBrbXNQcm92aWRlcnM7XG4gICAgfVxuICAgIGNvbnN0IHsgZnJvbU5vZGVQcm92aWRlckNoYWluIH0gPSBjcmVkZW50aWFsUHJvdmlkZXI7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBmcm9tTm9kZVByb3ZpZGVyQ2hhaW4oKTtcbiAgICAvLyBUaGUgc3RhdGUgbWFjaGluZSBpcyB0aGUgb25seSBwbGFjZSBjYWxsaW5nIHRoaXMgc28gaXQgd2lsbFxuICAgIC8vIGNhdGNoIGlmIHRoZXJlIGlzIGEgcmVqZWN0aW9uIGhlcmUuXG4gICAgY29uc3QgYXdzID0gYXdhaXQgcHJvdmlkZXIoKTtcbiAgICByZXR1cm4geyAuLi5rbXNQcm92aWRlcnMsIGF3cyB9O1xufVxuZXhwb3J0cy5sb2FkQVdTQ3JlZGVudGlhbHMgPSBsb2FkQVdTQ3JlZGVudGlhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hd3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.tokenCache = exports.AzureCredentialCache = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? 'http://169.254.169.254/metadata/identity/oauth2/token');\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\nexports.prepareRequest = prepareRequest;\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    const response = await (0, utils_1.get)(url, { headers }).catch(error => {\n        if (error instanceof errors_1.MongoCryptKMSRequestNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    });\n    return parseResponse(response);\n}\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\nexports.loadAzureCredentials = loadAzureCredentials;\n//# sourceMappingURL=azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXp1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsMEJBQTBCLEdBQUcsc0JBQXNCLEdBQUcsa0JBQWtCLEdBQUcsNEJBQTRCO0FBQ3RJLGlCQUFpQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3BDLGdCQUFnQixtQkFBTyxDQUFDLDJGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGFBQWE7QUFDYjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QyxZQUFZLGVBQWU7QUFDM0IsbURBQW1ELFNBQVM7QUFDNUQ7QUFDQSw2RUFBNkUsY0FBYztBQUMzRjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXp1cmUuanM/ZGQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEF6dXJlQ3JlZGVudGlhbHMgPSBleHBvcnRzLmZldGNoQXp1cmVLTVNUb2tlbiA9IGV4cG9ydHMucHJlcGFyZVJlcXVlc3QgPSBleHBvcnRzLnRva2VuQ2FjaGUgPSBleHBvcnRzLkF6dXJlQ3JlZGVudGlhbENhY2hlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgTUlOSU1VTV9UT0tFTl9SRUZSRVNIX0lOX01JTExJU0VDT05EUyA9IDYwMDA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBenVyZUNyZWRlbnRpYWxDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkVG9rZW4gPSBudWxsO1xuICAgIH1cbiAgICBhc3luYyBnZXRUb2tlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVkVG9rZW4gPT0gbnVsbCB8fCB0aGlzLm5lZWRzUmVmcmVzaCh0aGlzLmNhY2hlZFRva2VuKSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZWRUb2tlbiA9IGF3YWl0IHRoaXMuX2dldFRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgYWNjZXNzVG9rZW46IHRoaXMuY2FjaGVkVG9rZW4uYWNjZXNzVG9rZW4gfTtcbiAgICB9XG4gICAgbmVlZHNSZWZyZXNoKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHRpbWVVbnRpbEV4cGlyYXRpb25NUyA9IHRva2VuLmV4cGlyZXNPblRpbWVzdGFtcCAtIERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiB0aW1lVW50aWxFeHBpcmF0aW9uTVMgPD0gTUlOSU1VTV9UT0tFTl9SRUZSRVNIX0lOX01JTExJU0VDT05EUztcbiAgICB9XG4gICAgLyoqXG4gICAgICogZXhwb3NlZCBmb3IgdGVzdGluZ1xuICAgICAqL1xuICAgIHJlc2V0Q2FjaGUoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkVG9rZW4gPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBleHBvc2VkIGZvciB0ZXN0aW5nXG4gICAgICovXG4gICAgX2dldFRva2VuKCkge1xuICAgICAgICByZXR1cm4gZmV0Y2hBenVyZUtNU1Rva2VuKCk7XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZUNyZWRlbnRpYWxDYWNoZSA9IEF6dXJlQ3JlZGVudGlhbENhY2hlO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy50b2tlbkNhY2hlID0gbmV3IEF6dXJlQ3JlZGVudGlhbENhY2hlKCk7XG4vKiogQGludGVybmFsICovXG5hc3luYyBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgeyBzdGF0dXMsIGJvZHk6IHJhd0JvZHkgfSA9IHJlc3BvbnNlO1xuICAgIGNvbnN0IGJvZHkgPSAoKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmF3Qm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcignTWFsZm9ybWVkIEpTT04gYm9keSBpbiBHRVQgcmVxdWVzdC4nKTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG4gICAgaWYgKHN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IoJ1VuYWJsZSB0byBjb21wbGV0ZSByZXF1ZXN0LicsIGJvZHkpO1xuICAgIH1cbiAgICBpZiAoIWJvZHkuYWNjZXNzX3Rva2VuKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IoJ01hbGZvcm1lZCByZXNwb25zZSBib2R5IC0gbWlzc2luZyBmaWVsZCBgYWNjZXNzX3Rva2VuYC4nKTtcbiAgICB9XG4gICAgaWYgKCFib2R5LmV4cGlyZXNfaW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcignTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgLSBtaXNzaW5nIGZpZWxkIGBleHBpcmVzX2luYC4nKTtcbiAgICB9XG4gICAgY29uc3QgZXhwaXJlc0luTVMgPSBOdW1iZXIoYm9keS5leHBpcmVzX2luKSAqIDEwMDA7XG4gICAgaWYgKE51bWJlci5pc05hTihleHBpcmVzSW5NUykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcignTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgLSB1bmFibGUgdG8gcGFyc2UgaW50IGZyb20gYGV4cGlyZXNfaW5gIGZpZWxkLicpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhY2Nlc3NUb2tlbjogYm9keS5hY2Nlc3NfdG9rZW4sXG4gICAgICAgIGV4cGlyZXNPblRpbWVzdGFtcDogRGF0ZS5ub3coKSArIGV4cGlyZXNJbk1TXG4gICAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogcGFyc2VzIGFueSBvcHRpb25zIHByb3ZpZGVkIGJ5IHByb3NlIHRlc3RzIHRvIGBmZXRjaEF6dXJlS01TVG9rZW5gIGFuZCBtZXJnZXMgdGhlbSB3aXRoXG4gKiB0aGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGhlYWRlcnMgYW5kIHRoZSByZXF1ZXN0IHVybC5cbiAqL1xuZnVuY3Rpb24gcHJlcGFyZVJlcXVlc3Qob3B0aW9ucykge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwob3B0aW9ucy51cmw/LnRvU3RyaW5nKCkgPz8gJ2h0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbWV0YWRhdGEvaWRlbnRpdHkvb2F1dGgyL3Rva2VuJyk7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2FwaS12ZXJzaW9uJywgJzIwMTgtMDItMDEnKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgncmVzb3VyY2UnLCAnaHR0cHM6Ly92YXVsdC5henVyZS5uZXQnKTtcbiAgICBjb25zdCBoZWFkZXJzID0geyAuLi5vcHRpb25zLmhlYWRlcnMsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIE1ldGFkYXRhOiB0cnVlIH07XG4gICAgcmV0dXJuIHsgaGVhZGVycywgdXJsIH07XG59XG5leHBvcnRzLnByZXBhcmVSZXF1ZXN0ID0gcHJlcGFyZVJlcXVlc3Q7XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIGBBenVyZUtNU1JlcXVlc3RPcHRpb25zYCBhbGxvd3MgcHJvc2UgdGVzdHMgdG8gbW9kaWZ5IHRoZSBodHRwIHJlcXVlc3Qgc2VudCB0byB0aGUgaWRtc1xuICogc2VydmVycy4gIFRoaXMgaXMgcmVxdWlyZWQgdG8gc2ltdWxhdGUgZGlmZmVyZW50IHNlcnZlciBjb25kaXRpb25zLiAgTm8gb3B0aW9ucyBhcmUgZXhwZWN0ZWQgdG9cbiAqIGJlIHNldCBvdXRzaWRlIG9mIHRlc3RzLlxuICpcbiAqIGV4cG9zZWQgZm9yIENTRkxFXG4gKiBbcHJvc2UgdGVzdCAxOF0oaHR0cHM6Ly9naXRodWIuY29tL21vbmdvZGIvc3BlY2lmaWNhdGlvbnMvdHJlZS9tYXN0ZXIvc291cmNlL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vdGVzdHMjYXp1cmUtaW1kcy1jcmVkZW50aWFscylcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hBenVyZUtNU1Rva2VuKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgaGVhZGVycywgdXJsIH0gPSBwcmVwYXJlUmVxdWVzdChvcHRpb25zKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCB1dGlsc18xLmdldCkodXJsLCB7IGhlYWRlcnMgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcnNfMS5Nb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IoYFtBenVyZSBLTVNdICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyc2VSZXNwb25zZShyZXNwb25zZSk7XG59XG5leHBvcnRzLmZldGNoQXp1cmVLTVNUb2tlbiA9IGZldGNoQXp1cmVLTVNUb2tlbjtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQHRocm93cyBXaWxsIHJlamVjdCB3aXRoIGEgYE1vbmdvQ3J5cHRFcnJvcmAgaWYgdGhlIGh0dHAgcmVxdWVzdCBmYWlscyBvciB0aGUgaHR0cCByZXNwb25zZSBpcyBtYWxmb3JtZWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRBenVyZUNyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IGF6dXJlID0gYXdhaXQgZXhwb3J0cy50b2tlbkNhY2hlLmdldFRva2VuKCk7XG4gICAgcmV0dXJuIHsgLi4ua21zUHJvdmlkZXJzLCBhenVyZSB9O1xufVxuZXhwb3J0cy5sb2FkQXp1cmVDcmVkZW50aWFscyA9IGxvYWRBenVyZUNyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadGCPCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\nexports.loadGCPCredentials = loadGCPCredentials;\n//# sourceMappingURL=gcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQSxLQUFLO0FBQ0wsYUFBYSx3QkFBd0I7QUFDckM7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzPzM0MzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRHQ1BDcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEdDUENyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IGdjcE1ldGFkYXRhID0gKDAsIGRlcHNfMS5nZXRHY3BNZXRhZGF0YSkoKTtcbiAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gZ2NwTWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGttc1Byb3ZpZGVycztcbiAgICB9XG4gICAgY29uc3QgeyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH0gPSBhd2FpdCBnY3BNZXRhZGF0YS5pbnN0YW5jZSh7XG4gICAgICAgIHByb3BlcnR5OiAnc2VydmljZS1hY2NvdW50cy9kZWZhdWx0L3Rva2VuJ1xuICAgIH0pO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgZ2NwOiB7IGFjY2Vzc1Rva2VuIH0gfTtcbn1cbmV4cG9ydHMubG9hZEdDUENyZWRlbnRpYWxzID0gbG9hZEdDUENyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2NwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsMEJBQTBCO0FBQzFELGNBQWMsbUJBQU8sQ0FBQyx1RkFBTztBQUM3QixnQkFBZ0IsbUJBQU8sQ0FBQywyRkFBUztBQUNqQyxjQUFjLG1CQUFPLENBQUMsdUZBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanM/MWEwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVmcmVzaEtNU0NyZWRlbnRpYWxzID0gZXhwb3J0cy5pc0VtcHR5Q3JlZGVudGlhbHMgPSB2b2lkIDA7XG5jb25zdCBhd3NfMSA9IHJlcXVpcmUoXCIuL2F3c1wiKTtcbmNvbnN0IGF6dXJlXzEgPSByZXF1aXJlKFwiLi9henVyZVwiKTtcbmNvbnN0IGdjcF8xID0gcmVxdWlyZShcIi4vZ2NwXCIpO1xuLyoqXG4gKiBBdXRvIGNyZWRlbnRpYWwgZmV0Y2hpbmcgc2hvdWxkIG9ubHkgb2NjdXIgd2hlbiB0aGUgcHJvdmlkZXIgaXMgZGVmaW5lZCBvbiB0aGUga21zUHJvdmlkZXJzIG1hcFxuICogYW5kIHRoZSBzZXR0aW5ncyBhcmUgYW4gZW1wdHkgb2JqZWN0LlxuICpcbiAqIFRoaXMgaXMgZGlzdGluY3QgZnJvbSBhIG51bGxpc2ggcHJvdmlkZXIga2V5LlxuICpcbiAqIEBpbnRlcm5hbCAtIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seVxuICovXG5mdW5jdGlvbiBpc0VtcHR5Q3JlZGVudGlhbHMocHJvdmlkZXJOYW1lLCBrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGttc1Byb3ZpZGVyc1twcm92aWRlck5hbWVdO1xuICAgIGlmIChwcm92aWRlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMocHJvdmlkZXIpLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydHMuaXNFbXB0eUNyZWRlbnRpYWxzID0gaXNFbXB0eUNyZWRlbnRpYWxzO1xuLyoqXG4gKiBMb2FkIGNsb3VkIHByb3ZpZGVyIGNyZWRlbnRpYWxzIGZvciB0aGUgdXNlciBwcm92aWRlZCBLTVMgcHJvdmlkZXJzLlxuICogQ3JlZGVudGlhbHMgd2lsbCBvbmx5IGF0dGVtcHQgdG8gZ2V0IGxvYWRlZCBpZiB0aGV5IGRvIG5vdCBleGlzdFxuICogYW5kIG5vIGV4aXN0aW5nIGNyZWRlbnRpYWxzIHdpbGwgZ2V0IG92ZXJ3cml0dGVuLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoS01TQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgbGV0IGZpbmFsS01TUHJvdmlkZXJzID0ga21zUHJvdmlkZXJzO1xuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F3cycsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgYXdzXzEubG9hZEFXU0NyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2djcCcsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgZ2NwXzEubG9hZEdDUENyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F6dXJlJywga21zUHJvdmlkZXJzKSkge1xuICAgICAgICBmaW5hbEtNU1Byb3ZpZGVycyA9IGF3YWl0ICgwLCBhenVyZV8xLmxvYWRBenVyZUNyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIHJldHVybiBmaW5hbEtNU1Byb3ZpZGVycztcbn1cbmV4cG9ydHMucmVmcmVzaEtNU0NyZWRlbnRpYWxzID0gcmVmcmVzaEtNU0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.get = void 0;\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\n/**\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nexports.get = get;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUNBQW1DO0FBQzdELGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxXQUFXO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvdXRpbHMuanM/NGNkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0ID0gdm9pZCAwO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xuY29uc3QgdGltZXJzXzEgPSByZXF1aXJlKFwidGltZXJzXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0KHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWNvbnN0ICovXG4gICAgICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBodHRwXG4gICAgICAgICAgICAuZ2V0KHVybCwgb3B0aW9ucywgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2Uuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICAgICAgICAgIGxldCBib2R5ID0gJyc7XG4gICAgICAgICAgICByZXNwb25zZS5vbignZGF0YScsIGNodW5rID0+IChib2R5ICs9IGNodW5rKSk7XG4gICAgICAgICAgICByZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICgwLCB0aW1lcnNfMS5jbGVhclRpbWVvdXQpKHRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzQ29kZSwgYm9keSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgICAgICAgICgwLCB0aW1lcnNfMS5jbGVhclRpbWVvdXQpKHRpbWVvdXRJZCk7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmVuZCgpO1xuICAgICAgICB0aW1lb3V0SWQgPSAoMCwgdGltZXJzXzEuc2V0VGltZW91dCkoKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5kZXN0cm95KG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IoYHJlcXVlc3QgdGltZWQgb3V0IGFmdGVyIDEwIHNlY29uZHNgKSk7XG4gICAgICAgIH0sIDEwMDAwKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0ID0gZ2V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames',\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    'tlsDisableOCSPEndpointCheck',\n    'tlsDisableCertificateRevocationCheck'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while (context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR) {\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch (context.state) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                    if (collInfo) {\n                        context.addMongoOperationResponse(collInfo);\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command))\n                        : await this.markCommand(mongocryptdClient, context.ns, command);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                    if (keys.length === 0) {\n                        // This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n                        // guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n                        // nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n                        // we return an error when there are no matching keys.  This error is generated in\n                        // subsequent iterations of the state machine.\n                        // Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n                        // do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n                        // will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n                        // otherwise we'll return `{ v: [] }`.\n                        result = { v: [] };\n                    }\n                    for await (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    const requests = Array.from(this.requests(context));\n                    await Promise.all(requests);\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    // @ts-expect-error finalize can change the state, check for error\n                    if (context.state === MONGOCRYPT_CTX_ERROR) {\n                        const message = context.status.message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = (0, bson_1.deserialize)(finalizedContext, this.options);\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    async kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port\n        };\n        const message = request.message;\n        const buffer = new utils_1.BufferPool();\n        const netSocket = new net.Socket();\n        let socket;\n        function destroySockets() {\n            for (const sock of [socket, netSocket]) {\n                if (sock) {\n                    sock.removeAllListeners();\n                    sock.destroy();\n                }\n            }\n        }\n        function ontimeout() {\n            return new errors_1.MongoCryptError('KMS request timed out');\n        }\n        function onerror(cause) {\n            return new errors_1.MongoCryptError('KMS request failed', { cause });\n        }\n        function onclose() {\n            return new errors_1.MongoCryptError('KMS request closed');\n        }\n        const tlsOptions = this.options.tlsOptions;\n        if (tlsOptions) {\n            const kmsProvider = request.kmsProvider;\n            const providerTlsOptions = tlsOptions[kmsProvider];\n            if (providerTlsOptions) {\n                const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                if (error) {\n                    throw error;\n                }\n                try {\n                    await this.setTlsOptions(providerTlsOptions, options);\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n        }\n        const { promise: willConnect, reject: rejectOnNetSocketError, resolve: resolveOnNetSocketConnect } = (0, utils_1.promiseWithResolvers)();\n        netSocket\n            .once('timeout', () => rejectOnNetSocketError(ontimeout()))\n            .once('error', err => rejectOnNetSocketError(onerror(err)))\n            .once('close', () => rejectOnNetSocketError(onclose()))\n            .once('connect', () => resolveOnNetSocketConnect());\n        try {\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                netSocket.connect({\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                });\n                await willConnect;\n                try {\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: netSocket,\n                        command: 'connect',\n                        destination: { host: options.host, port: options.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n            socket = tls.connect(options, () => {\n                socket.write(message);\n            });\n            const { promise: willResolveKmsRequest, reject: rejectOnTlsSocketError, resolve } = (0, utils_1.promiseWithResolvers)();\n            socket\n                .once('timeout', () => rejectOnTlsSocketError(ontimeout()))\n                .once('error', err => rejectOnTlsSocketError(onerror(err)))\n                .once('close', () => rejectOnTlsSocketError(onclose()))\n                .on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    resolve();\n                }\n            });\n            await willResolveKmsRequest;\n        }\n        finally {\n            // There's no need for any more activity on this socket at this point.\n            destroySockets();\n        }\n    }\n    *requests(context) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client\n            .db(db)\n            .listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        })\n            .toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command) {\n        const options = { promoteLongs: false, promoteValues: false };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter))\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\n/**\n * Provider used during authentication.\n * @internal\n */\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsbUJBQW1CO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9hdXRoX3Byb3ZpZGVyLmpzPzNiODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF1dGhQcm92aWRlciA9IGV4cG9ydHMuQXV0aENvbnRleHQgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuLyoqXG4gKiBDb250ZXh0IHVzZWQgZHVyaW5nIGF1dGhlbnRpY2F0aW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXV0aENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBJZiB0aGUgY29udGV4dCBpcyBmb3IgcmVhdXRoZW50aWNhdGlvbi4gKi9cbiAgICAgICAgdGhpcy5yZWF1dGhlbnRpY2F0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLkF1dGhDb250ZXh0ID0gQXV0aENvbnRleHQ7XG4vKipcbiAqIFByb3ZpZGVyIHVzZWQgZHVyaW5nIGF1dGhlbnRpY2F0aW9uLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF1dGhQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB0aGUgaGFuZHNoYWtlIGRvY3VtZW50IGJlZm9yZSB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZHNoYWtlRG9jIC0gVGhlIGRvY3VtZW50IHVzZWQgZm9yIHRoZSBpbml0aWFsIGhhbmRzaGFrZSBvbiBhIGNvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gYXV0aENvbnRleHQgLSBDb250ZXh0IGZvciBhdXRoZW50aWNhdGlvbiBmbG93XG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIF9hdXRoQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gaGFuZHNoYWtlRG9jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWF1dGhlbnRpY2F0ZS5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBzaGFyZWQgYXV0aCBjb250ZXh0LlxuICAgICAqL1xuICAgIGFzeW5jIHJlYXV0aChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LnJlYXV0aGVudGljYXRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdSZWF1dGhlbnRpY2F0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVhdXRoZW50aWNhdGluZyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmF1dGgoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gQXV0aFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF9wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch (error) {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return resolveCname(host);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = ['aws', 'azure'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n                throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME === 'azure' &&\n                !this.mechanismProperties.TOKEN_AUDIENCE) {\n                throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME &&\n                !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n            }\n            if (!this.mechanismProperties.PROVIDER_NAME &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvX2NyZWRlbnRpYWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLDZCQUE2QjtBQUN4RCxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyxzRUFBVTtBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGLGVBQWU7QUFDOUc7QUFDQTtBQUNBO0FBQ0Esa0lBQWtJLGVBQWU7QUFDako7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpR0FBaUcsa0NBQWtDLDhCQUE4QixlQUFlO0FBQ2hMO0FBQ0E7QUFDQTtBQUNBLDRKQUE0SixlQUFlO0FBQzNLO0FBQ0E7QUFDQTtBQUNBLG1KQUFtSixlQUFlO0FBQ2xLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLFlBQVksbUJBQW1CLGVBQWU7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsaUJBQWlCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHO0FBQ2hHO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvX2NyZWRlbnRpYWxzLmpzPzQ3MTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ3JlZGVudGlhbHMgPSBleHBvcnRzLkRFRkFVTFRfQUxMT1dFRF9IT1NUUyA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBnc3NhcGlfMSA9IHJlcXVpcmUoXCIuL2dzc2FwaVwiKTtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzXCIpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbmdvZGIvc3BlY2lmaWNhdGlvbnMvYmxvYi9tYXN0ZXIvc291cmNlL2F1dGgvYXV0aC5yc3RcbmZ1bmN0aW9uIGdldERlZmF1bHRBdXRoTWVjaGFuaXNtKGhlbGxvKSB7XG4gICAgaWYgKGhlbGxvKSB7XG4gICAgICAgIC8vIElmIGhlbGxvIGNvbnRhaW5zIHNhc2xTdXBwb3J0ZWRNZWNocywgdXNlIHNjcmFtLXNoYS0yNTZcbiAgICAgICAgLy8gaWYgaXQgaXMgYXZhaWxhYmxlLCBlbHNlIHNjcmFtLXNoYS0xXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlbGxvLnNhc2xTdXBwb3J0ZWRNZWNocykpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWxsby5zYXNsU3VwcG9ydGVkTWVjaHMuaW5jbHVkZXMocHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTI1NilcbiAgICAgICAgICAgICAgICA/IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEEyNTZcbiAgICAgICAgICAgICAgICA6IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEExO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIGxlZ2FjeSBzZWxlY3Rpb24gbWV0aG9kLiBJZiB3aXJlIHZlcnNpb24gPj0gMywgdXNlIHNjcmFtLXNoYS0xXG4gICAgICAgIGlmIChoZWxsby5tYXhXaXJlVmVyc2lvbiA+PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRGVmYXVsdCBmb3Igd2lyZXByb3RvY29sIDwgM1xuICAgIHJldHVybiBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfQ1I7XG59XG5jb25zdCBBTExPV0VEX1BST1ZJREVSX05BTUVTID0gWydhd3MnLCAnYXp1cmUnXTtcbmNvbnN0IEFMTE9XRURfSE9TVFNfRVJST1IgPSAnQXV0aCBtZWNoYW5pc20gcHJvcGVydHkgQUxMT1dFRF9IT1NUUyBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MuJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuREVGQVVMVF9BTExPV0VEX0hPU1RTID0gW1xuICAgICcqLm1vbmdvZGIubmV0JyxcbiAgICAnKi5tb25nb2RiLWRldi5uZXQnLFxuICAgICcqLm1vbmdvZGJnb3YubmV0JyxcbiAgICAnbG9jYWxob3N0JyxcbiAgICAnMTI3LjAuMC4xJyxcbiAgICAnOjoxJ1xuXTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gYXVkaWVuY2UgaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9BVURJRU5DRV9NSVNTSU5HX0VSUk9SID0gJ1RPS0VOX0FVRElFTkNFIG11c3QgYmUgc2V0IGluIHRoZSBhdXRoIG1lY2hhbmlzbSBwcm9wZXJ0aWVzIHdoZW4gUFJPVklERVJfTkFNRSBpcyBhenVyZS4nO1xuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjcmVkZW50aWFscyB1c2VkIGJ5IE1vbmdvREJcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgTW9uZ29DcmVkZW50aWFscyB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gb3B0aW9ucy51c2VybmFtZSA/PyAnJztcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuc291cmNlID0gb3B0aW9ucy5zb3VyY2U7XG4gICAgICAgIGlmICghdGhpcy5zb3VyY2UgJiYgb3B0aW9ucy5kYikge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBvcHRpb25zLmRiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVjaGFuaXNtID0gb3B0aW9ucy5tZWNoYW5pc20gfHwgcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0RFRkFVTFQ7XG4gICAgICAgIHRoaXMubWVjaGFuaXNtUHJvcGVydGllcyA9IG9wdGlvbnMubWVjaGFuaXNtUHJvcGVydGllcyB8fCB7fTtcbiAgICAgICAgaWYgKHRoaXMubWVjaGFuaXNtLm1hdGNoKC9NT05HT0RCLUFXUy9pKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnVzZXJuYW1lICYmIHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VybmFtZSA9IHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBhc3N3b3JkICYmIHByb2Nlc3MuZW52LkFXU19TRUNSRVRfQUNDRVNTX0tFWSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSBwcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLkFXU19TRVNTSU9OX1RPS0VOID09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLm1lY2hhbmlzbVByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgICAgIEFXU19TRVNTSU9OX1RPS0VOOiBwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWVjaGFuaXNtID09PSBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQyAmJiAhdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLkFMTE9XRURfSE9TVFMpIHtcbiAgICAgICAgICAgIHRoaXMubWVjaGFuaXNtUHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLm1lY2hhbmlzbVByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgQUxMT1dFRF9IT1NUUzogZXhwb3J0cy5ERUZBVUxUX0FMTE9XRURfSE9TVFNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLm1lY2hhbmlzbVByb3BlcnRpZXMpO1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgIH1cbiAgICAvKiogRGV0ZXJtaW5lcyBpZiB0d28gTW9uZ29DcmVkZW50aWFscyBvYmplY3RzIGFyZSBlcXVpdmFsZW50ICovXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5tZWNoYW5pc20gPT09IG90aGVyLm1lY2hhbmlzbSAmJlxuICAgICAgICAgICAgdGhpcy51c2VybmFtZSA9PT0gb3RoZXIudXNlcm5hbWUgJiZcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPT09IG90aGVyLnBhc3N3b3JkICYmXG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9PT0gb3RoZXIuc291cmNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGF1dGhlbnRpY2F0aW9uIG1lY2hhbmlzbSBpcyBzZXQgdG8gXCJkZWZhdWx0XCIsIHJlc29sdmVzIHRoZSBhdXRoTWVjaGFuaXNtXG4gICAgICogYmFzZWQgb24gdGhlIHNlcnZlciB2ZXJzaW9uIGFuZCBzZXJ2ZXIgc3VwcG9ydGVkIHNhc2wgbWVjaGFuaXNtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoZWxsbyAtIEEgaGVsbG8gcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyXG4gICAgICovXG4gICAgcmVzb2x2ZUF1dGhNZWNoYW5pc20oaGVsbG8pIHtcbiAgICAgICAgLy8gSWYgdGhlIG1lY2hhbmlzbSBpcyBub3QgXCJkZWZhdWx0XCIsIHRoZW4gaXQgZG9lcyBub3QgbmVlZCB0byBiZSByZXNvbHZlZFxuICAgICAgICBpZiAodGhpcy5tZWNoYW5pc20ubWF0Y2goL0RFRkFVTFQvaSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9uZ29DcmVkZW50aWFscyh7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgICAgICBtZWNoYW5pc206IGdldERlZmF1bHRBdXRoTWVjaGFuaXNtKGhlbGxvKSxcbiAgICAgICAgICAgICAgICBtZWNoYW5pc21Qcm9wZXJ0aWVzOiB0aGlzLm1lY2hhbmlzbVByb3BlcnRpZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKCh0aGlzLm1lY2hhbmlzbSA9PT0gcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0dTU0FQSSB8fFxuICAgICAgICAgICAgdGhpcy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9DUiB8fFxuICAgICAgICAgICAgdGhpcy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9QTEFJTiB8fFxuICAgICAgICAgICAgdGhpcy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEExIHx8XG4gICAgICAgICAgICB0aGlzLm1lY2hhbmlzbSA9PT0gcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTI1NikgJiZcbiAgICAgICAgICAgICF0aGlzLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKGBVc2VybmFtZSByZXF1aXJlZCBmb3IgbWVjaGFuaXNtICcke3RoaXMubWVjaGFuaXNtfSdgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDKSB7XG4gICAgICAgICAgICBpZiAodGhpcy51c2VybmFtZSAmJiB0aGlzLm1lY2hhbmlzbVByb3BlcnRpZXMuUFJPVklERVJfTkFNRSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYHVzZXJuYW1lIGFuZCBQUk9WSURFUl9OQU1FIG1heSBub3QgYmUgdXNlZCB0b2dldGhlciBmb3IgbWVjaGFuaXNtICcke3RoaXMubWVjaGFuaXNtfScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUUgPT09ICdhenVyZScgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlRPS0VOX0FVRElFTkNFKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubWVjaGFuaXNtUHJvcGVydGllcy5QUk9WSURFUl9OQU1FICYmXG4gICAgICAgICAgICAgICAgIUFMTE9XRURfUFJPVklERVJfTkFNRVMuaW5jbHVkZXModGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgQ3VycmVudGx5IG9ubHkgYSBQUk9WSURFUl9OQU1FIGluICR7QUxMT1dFRF9QUk9WSURFUl9OQU1FUy5qb2luKCcsJyl9IGlzIHN1cHBvcnRlZCBmb3IgbWVjaGFuaXNtICcke3RoaXMubWVjaGFuaXNtfScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlJFRlJFU0hfVE9LRU5fQ0FMTEJBQ0sgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlJFUVVFU1RfVE9LRU5fQ0FMTEJBQ0spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBBIFJFUVVFU1RfVE9LRU5fQ0FMTEJBQ0sgbXVzdCBiZSBwcm92aWRlZCB3aGVuIHVzaW5nIGEgUkVGUkVTSF9UT0tFTl9DQUxMQkFDSyBmb3IgbWVjaGFuaXNtICcke3RoaXMubWVjaGFuaXNtfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUUgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlJFUVVFU1RfVE9LRU5fQ0FMTEJBQ0spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBFaXRoZXIgYSBQUk9WSURFUl9OQU1FIG9yIGEgUkVRVUVTVF9UT0tFTl9DQUxMQkFDSyBtdXN0IGJlIHNwZWNpZmllZCBmb3IgbWVjaGFuaXNtICcke3RoaXMubWVjaGFuaXNtfScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tZWNoYW5pc21Qcm9wZXJ0aWVzLkFMTE9XRURfSE9TVFMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0cyA9IHRoaXMubWVjaGFuaXNtUHJvcGVydGllcy5BTExPV0VEX0hPU1RTO1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShob3N0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihBTExPV0VEX0hPU1RTX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBob3N0IG9mIGhvc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaG9zdCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoQUxMT1dFRF9IT1NUU19FUlJPUik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3ZpZGVyc18xLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwuaGFzKHRoaXMubWVjaGFuaXNtKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlICE9IG51bGwgJiYgdGhpcy5zb3VyY2UgIT09ICckZXh0ZXJuYWwnKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODUpOiBSZXBsYWNlIHRoaXMgd2l0aCBhIE1vbmdvQXV0aFZhbGlkYXRpb25FcnJvclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYEludmFsaWQgc291cmNlICcke3RoaXMuc291cmNlfScgZm9yIG1lY2hhbmlzbSAnJHt0aGlzLm1lY2hhbmlzbX0nIHNwZWNpZmllZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9QTEFJTiAmJiB0aGlzLnNvdXJjZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4NSk6IFJlcGxhY2UgdGhpcyB3aXRoIGEgTW9uZ29BdXRoVmFsaWRhdGlvbkVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdQTEFJTiBBdXRoZW50aWNhdGlvbiBNZWNoYW5pc20gbmVlZHMgYW4gYXV0aCBzb3VyY2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9YNTA5ICYmIHRoaXMucGFzc3dvcmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgUmVmbGVjdC5zZXQodGhpcywgJ3Bhc3N3b3JkJywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4NSk6IFJlcGxhY2UgdGhpcyB3aXRoIGEgTW9uZ29BdXRoVmFsaWRhdGlvbkVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKGBQYXNzd29yZCBub3QgYWxsb3dlZCBmb3IgbWVjaGFuaXNtIE1PTkdPREItWDUwOWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbm9uaWNhbGl6YXRpb24gPSB0aGlzLm1lY2hhbmlzbVByb3BlcnRpZXMuQ0FOT05JQ0FMSVpFX0hPU1RfTkFNRSA/PyBmYWxzZTtcbiAgICAgICAgaWYgKCFPYmplY3QudmFsdWVzKGdzc2FwaV8xLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZSkuaW5jbHVkZXMoY2Fub25pY2FsaXphdGlvbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYEludmFsaWQgQ0FOT05JQ0FMSVpFX0hPU1RfTkFNRSB2YWx1ZTogJHtjYW5vbmljYWxpemF0aW9ufWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZShjcmVkcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE1vbmdvQ3JlZGVudGlhbHMoe1xuICAgICAgICAgICAgdXNlcm5hbWU6IG9wdGlvbnMudXNlcm5hbWUgPz8gY3JlZHM/LnVzZXJuYW1lID8/ICcnLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IG9wdGlvbnMucGFzc3dvcmQgPz8gY3JlZHM/LnBhc3N3b3JkID8/ICcnLFxuICAgICAgICAgICAgbWVjaGFuaXNtOiBvcHRpb25zLm1lY2hhbmlzbSA/PyBjcmVkcz8ubWVjaGFuaXNtID8/IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9ERUZBVUxULFxuICAgICAgICAgICAgbWVjaGFuaXNtUHJvcGVydGllczogb3B0aW9ucy5tZWNoYW5pc21Qcm9wZXJ0aWVzID8/IGNyZWRzPy5tZWNoYW5pc21Qcm9wZXJ0aWVzID8/IHt9LFxuICAgICAgICAgICAgc291cmNlOiBvcHRpb25zLnNvdXJjZSA/PyBvcHRpb25zLmRiID8/IGNyZWRzPy5zb3VyY2UgPz8gJ2FkbWluJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3JlZGVudGlhbHMgPSBNb25nb0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29fY3JlZGVudGlhbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongocr.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCR = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.command((0, utils_1.ns)(`${source}.$cmd`), { getnonce: 1 }, undefined);\n        const hashPassword = crypto\n            .createHash('md5')\n            .update(`${username}:mongo:${password}`, 'utf8')\n            .digest('hex');\n        // Final key\n        const key = crypto\n            .createHash('md5')\n            .update(`${nonce}${username}${hashPassword}`, 'utf8')\n            .digest('hex');\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.command((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR;\n//# sourceMappingURL=mongocr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvY3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDZCQUE2QjtBQUM3QyxnQkFBZ0IsUUFBUSw4Q0FBOEMsT0FBTyxXQUFXLGFBQWE7QUFDckc7QUFDQTtBQUNBLHVCQUF1QixTQUFTLFNBQVMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsT0FBTztBQUMzRDtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2NyLmpzPzQzODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ1IgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgTW9uZ29DUiBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgc291cmNlIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgeyBub25jZSB9ID0gYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKShgJHtzb3VyY2V9LiRjbWRgKSwgeyBnZXRub25jZTogMSB9LCB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCBoYXNoUGFzc3dvcmQgPSBjcnlwdG9cbiAgICAgICAgICAgIC5jcmVhdGVIYXNoKCdtZDUnKVxuICAgICAgICAgICAgLnVwZGF0ZShgJHt1c2VybmFtZX06bW9uZ286JHtwYXNzd29yZH1gLCAndXRmOCcpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgLy8gRmluYWwga2V5XG4gICAgICAgIGNvbnN0IGtleSA9IGNyeXB0b1xuICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAgICAgICAudXBkYXRlKGAke25vbmNlfSR7dXNlcm5hbWV9JHtoYXNoUGFzc3dvcmR9YCwgJ3V0ZjgnKVxuICAgICAgICAgICAgLmRpZ2VzdCgnaGV4Jyk7XG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0ZUNvbW1hbmQgPSB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGU6IDEsXG4gICAgICAgICAgICB1c2VyOiB1c2VybmFtZSxcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAga2V5XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoYCR7c291cmNlfS4kY21kYCksIGF1dGhlbnRpY2F0ZUNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NSID0gTW9uZ29DUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvY3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBAWS = void 0;\nconst process = __webpack_require__(/*! process */ \"process\");\nconst BSON = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n */\nconst LEGACY_REGIONS = new Set([\n    'ap-northeast-1',\n    'ap-south-1',\n    'ap-southeast-1',\n    'ap-southeast-2',\n    'aws-global',\n    'ca-central-1',\n    'eu-central-1',\n    'eu-north-1',\n    'eu-west-1',\n    'eu-west-2',\n    'eu-west-3',\n    'sa-east-1',\n    'us-east-1',\n    'us-east-2',\n    'us-west-1',\n    'us-west-2'\n]);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor() {\n        super();\n        MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        if ('fromNodeProviderChain' in MongoDBAWS.credentialProvider) {\n            this.provider =\n                awsRegionSettingsExist && useRegionalSts\n                    ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n                        clientConfig: { region: AWS_REGION }\n                    })\n                    : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n        }\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials, this.provider);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        // Allow the user to specify an AWS session token for authentication with temporary credentials.\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await (0, utils_1.randomBytes)(32);\n        // All messages between MongoDB clients and servers are sent as BSON objects\n        // in the payload field of saslStart and saslContinue.\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, provider) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        // The AWS session token (creds.Token) may or may not be set.\n        if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if (provider && !('kModuleError' in MongoDBAWS.credentialProvider)) {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    }\n    else {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfYXdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxhQUFhLG1CQUFPLENBQUMsNERBQVk7QUFDakMsZUFBZSxtQkFBTyxDQUFDLDREQUFZO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLG9GQUFpQjtBQUNqRCw0QkFBNEIsbUJBQU8sQ0FBQyw0RkFBcUI7QUFDekQsb0JBQW9CLG1CQUFPLENBQUMsNEVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1EQUFtRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHNCQUFzQjtBQUM1RDtBQUNBLDhFQUE4RSxHQUFHO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsbUJBQW1CO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRixLQUFLO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxHQUFHO0FBQ3ZEO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLGlCQUFpQixFQUFFLG1EQUFtRDtBQUN2SjtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsWUFBWTtBQUNoRTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLFNBQVM7QUFDVDtBQUNBLHVEQUF1RCxZQUFZLEdBQUcsYUFBYTtBQUNuRjtBQUNBLHVCQUF1QjtBQUN2QixTQUFTO0FBQ1Q7QUFDQSxvREFBb0QsWUFBWSxHQUFHLGFBQWEsR0FBRyxTQUFTO0FBQzVGLHVCQUF1QjtBQUN2QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9hd3MuanM/MjJiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29EQkFXUyA9IHZvaWQgMDtcbmNvbnN0IHByb2Nlc3MgPSByZXF1aXJlKFwicHJvY2Vzc1wiKTtcbmNvbnN0IEJTT04gPSByZXF1aXJlKFwiLi4vLi4vYnNvblwiKTtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY29uc3QgbW9uZ29fY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuL21vbmdvX2NyZWRlbnRpYWxzXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlcnNcIik7XG4vKipcbiAqIFRoZSBmb2xsb3dpbmcgcmVnaW9ucyB1c2UgdGhlIGdsb2JhbCBBV1MgU1RTIGVuZHBvaW50LCBzdHMuYW1hem9uYXdzLmNvbSwgYnkgZGVmYXVsdFxuICogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3Nka3JlZi9sYXRlc3QvZ3VpZGUvZmVhdHVyZS1zdHMtcmVnaW9uYWxpemVkLWVuZHBvaW50cy5odG1sXG4gKi9cbmNvbnN0IExFR0FDWV9SRUdJT05TID0gbmV3IFNldChbXG4gICAgJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAnYXAtc291dGgtMScsXG4gICAgJ2FwLXNvdXRoZWFzdC0xJyxcbiAgICAnYXAtc291dGhlYXN0LTInLFxuICAgICdhd3MtZ2xvYmFsJyxcbiAgICAnY2EtY2VudHJhbC0xJyxcbiAgICAnZXUtY2VudHJhbC0xJyxcbiAgICAnZXUtbm9ydGgtMScsXG4gICAgJ2V1LXdlc3QtMScsXG4gICAgJ2V1LXdlc3QtMicsXG4gICAgJ2V1LXdlc3QtMycsXG4gICAgJ3NhLWVhc3QtMScsXG4gICAgJ3VzLWVhc3QtMScsXG4gICAgJ3VzLWVhc3QtMicsXG4gICAgJ3VzLXdlc3QtMScsXG4gICAgJ3VzLXdlc3QtMidcbl0pO1xuY29uc3QgQVNDSUlfTiA9IDExMDtcbmNvbnN0IEFXU19SRUxBVElWRV9VUkkgPSAnaHR0cDovLzE2OS4yNTQuMTcwLjInO1xuY29uc3QgQVdTX0VDMl9VUkkgPSAnaHR0cDovLzE2OS4yNTQuMTY5LjI1NCc7XG5jb25zdCBBV1NfRUMyX1BBVEggPSAnL2xhdGVzdC9tZXRhLWRhdGEvaWFtL3NlY3VyaXR5LWNyZWRlbnRpYWxzJztcbmNvbnN0IGJzb25PcHRpb25zID0ge1xuICAgIHVzZUJpZ0ludDY0OiBmYWxzZSxcbiAgICBwcm9tb3RlTG9uZ3M6IHRydWUsXG4gICAgcHJvbW90ZVZhbHVlczogdHJ1ZSxcbiAgICBwcm9tb3RlQnVmZmVyczogZmFsc2UsXG4gICAgYnNvblJlZ0V4cDogZmFsc2Vcbn07XG5jbGFzcyBNb25nb0RCQVdTIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE1vbmdvREJBV1MuY3JlZGVudGlhbFByb3ZpZGVyID8/PSAoMCwgZGVwc18xLmdldEF3c0NyZWRlbnRpYWxQcm92aWRlcikoKTtcbiAgICAgICAgbGV0IHsgQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMgPSAnJywgQVdTX1JFR0lPTiA9ICcnIH0gPSBwcm9jZXNzLmVudjtcbiAgICAgICAgQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMgPSBBV1NfU1RTX1JFR0lPTkFMX0VORFBPSU5UUy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBBV1NfUkVHSU9OID0gQVdTX1JFR0lPTi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvKiogVGhlIG9wdGlvbiBzZXR0aW5nIHNob3VsZCB3b3JrIG9ubHkgZm9yIHVzZXJzIHdobyBoYXZlIGV4cGxpY2l0IHNldHRpbmdzIGluIHRoZWlyIGVudmlyb25tZW50LCB0aGUgZHJpdmVyIHNob3VsZCBub3QgZW5jb2RlIFwiZGVmYXVsdHNcIiAqL1xuICAgICAgICBjb25zdCBhd3NSZWdpb25TZXR0aW5nc0V4aXN0ID0gQVdTX1JFR0lPTi5sZW5ndGggIT09IDAgJiYgQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMubGVuZ3RoICE9PSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMgaXMgc2V0IHRvIHJlZ2lvbmFsLCB1c2VycyBhcmUgb3B0aW5nIGludG8gdGhlIG5ldyBiZWhhdmlvciBvZiByZXNwZWN0aW5nIHRoZSByZWdpb24gc2V0dGluZ3NcbiAgICAgICAgICpcbiAgICAgICAgICogSWYgQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMgaXMgc2V0IHRvIGxlZ2FjeSwgdGhlbiBcIm9sZFwiIHJlZ2lvbnMgbmVlZCB0byBrZWVwIHVzaW5nIHRoZSBnbG9iYWwgc2V0dGluZy5cbiAgICAgICAgICogVGVjaG5pY2FsbHkgdGhlIFNESyBnZXRzIHRoaXMgd3JvbmcsIGl0IHJlYWNoZXMgb3V0IHRvICdzdHMudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20nIHdoZW4gaXQgc2hvdWxkIGJlICdzdHMuYW1hem9uYXdzLmNvbScuXG4gICAgICAgICAqIFRoYXQgaXMgbm90IG91ciBidWcgdG8gZml4IGhlcmUuIFdlIGxlYXZlIHRoYXQgdXAgdG8gdGhlIFNESy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHVzZVJlZ2lvbmFsU3RzID0gQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMgPT09ICdyZWdpb25hbCcgfHxcbiAgICAgICAgICAgIChBV1NfU1RTX1JFR0lPTkFMX0VORFBPSU5UUyA9PT0gJ2xlZ2FjeScgJiYgIUxFR0FDWV9SRUdJT05TLmhhcyhBV1NfUkVHSU9OKSk7XG4gICAgICAgIGlmICgnZnJvbU5vZGVQcm92aWRlckNoYWluJyBpbiBNb25nb0RCQVdTLmNyZWRlbnRpYWxQcm92aWRlcikge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlciA9XG4gICAgICAgICAgICAgICAgYXdzUmVnaW9uU2V0dGluZ3NFeGlzdCAmJiB1c2VSZWdpb25hbFN0c1xuICAgICAgICAgICAgICAgICAgICA/IE1vbmdvREJBV1MuY3JlZGVudGlhbFByb3ZpZGVyLmZyb21Ob2RlUHJvdmlkZXJDaGFpbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRDb25maWc6IHsgcmVnaW9uOiBBV1NfUkVHSU9OIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgOiBNb25nb0RCQVdTLmNyZWRlbnRpYWxQcm92aWRlci5mcm9tTm9kZVByb3ZpZGVyQ2hhaW4oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghYXV0aENvbnRleHQuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gZGVwc18xLmF3czQpIHtcbiAgICAgICAgICAgIHRocm93IGRlcHNfMS5hd3M0WydrTW9kdWxlRXJyb3InXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHNpZ24gfSA9IGRlcHNfMS5hd3M0O1xuICAgICAgICBpZiAoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKGNvbm5lY3Rpb24pIDwgOSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoJ01PTkdPREItQVdTIGF1dGhlbnRpY2F0aW9uIHJlcXVpcmVzIE1vbmdvREIgdmVyc2lvbiA0LjQgb3IgbGF0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWF1dGhDb250ZXh0LmNyZWRlbnRpYWxzLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICBhdXRoQ29udGV4dC5jcmVkZW50aWFscyA9IGF3YWl0IG1ha2VUZW1wQ3JlZGVudGlhbHMoYXV0aENvbnRleHQuY3JlZGVudGlhbHMsIHRoaXMucHJvdmlkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBjb25zdCBhY2Nlc3NLZXlJZCA9IGNyZWRlbnRpYWxzLnVzZXJuYW1lO1xuICAgICAgICBjb25zdCBzZWNyZXRBY2Nlc3NLZXkgPSBjcmVkZW50aWFscy5wYXNzd29yZDtcbiAgICAgICAgLy8gQWxsb3cgdGhlIHVzZXIgdG8gc3BlY2lmeSBhbiBBV1Mgc2Vzc2lvbiB0b2tlbiBmb3IgYXV0aGVudGljYXRpb24gd2l0aCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMuXG4gICAgICAgIGNvbnN0IHNlc3Npb25Ub2tlbiA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXMuQVdTX1NFU1NJT05fVE9LRU47XG4gICAgICAgIC8vIElmIGFsbCB0aHJlZSBkZWZpbmVkLCBpbmNsdWRlIHNlc3Npb25Ub2tlbiwgZWxzZSBpbmNsdWRlIHVzZXJuYW1lIGFuZCBwYXNzLCBlbHNlIG5vIGNyZWRlbnRpYWxzXG4gICAgICAgIGNvbnN0IGF3c0NyZWRlbnRpYWxzID0gYWNjZXNzS2V5SWQgJiYgc2VjcmV0QWNjZXNzS2V5ICYmIHNlc3Npb25Ub2tlblxuICAgICAgICAgICAgPyB7IGFjY2Vzc0tleUlkLCBzZWNyZXRBY2Nlc3NLZXksIHNlc3Npb25Ub2tlbiB9XG4gICAgICAgICAgICA6IGFjY2Vzc0tleUlkICYmIHNlY3JldEFjY2Vzc0tleVxuICAgICAgICAgICAgICAgID8geyBhY2Nlc3NLZXlJZCwgc2VjcmV0QWNjZXNzS2V5IH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZGIgPSBjcmVkZW50aWFscy5zb3VyY2U7XG4gICAgICAgIGNvbnN0IG5vbmNlID0gYXdhaXQgKDAsIHV0aWxzXzEucmFuZG9tQnl0ZXMpKDMyKTtcbiAgICAgICAgLy8gQWxsIG1lc3NhZ2VzIGJldHdlZW4gTW9uZ29EQiBjbGllbnRzIGFuZCBzZXJ2ZXJzIGFyZSBzZW50IGFzIEJTT04gb2JqZWN0c1xuICAgICAgICAvLyBpbiB0aGUgcGF5bG9hZCBmaWVsZCBvZiBzYXNsU3RhcnQgYW5kIHNhc2xDb250aW51ZS5cbiAgICAgICAgY29uc3Qgc2FzbFN0YXJ0ID0ge1xuICAgICAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICAgICAgbWVjaGFuaXNtOiAnTU9OR09EQi1BV1MnLFxuICAgICAgICAgICAgcGF5bG9hZDogQlNPTi5zZXJpYWxpemUoeyByOiBub25jZSwgcDogQVNDSUlfTiB9LCBic29uT3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2FzbFN0YXJ0UmVzcG9uc2UgPSBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKGAke2RifS4kY21kYCksIHNhc2xTdGFydCwgdW5kZWZpbmVkKTtcbiAgICAgICAgY29uc3Qgc2VydmVyUmVzcG9uc2UgPSBCU09OLmRlc2VyaWFsaXplKHNhc2xTdGFydFJlc3BvbnNlLnBheWxvYWQuYnVmZmVyLCBic29uT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGhvc3QgPSBzZXJ2ZXJSZXNwb25zZS5oO1xuICAgICAgICBjb25zdCBzZXJ2ZXJOb25jZSA9IHNlcnZlclJlc3BvbnNlLnMuYnVmZmVyO1xuICAgICAgICBpZiAoc2VydmVyTm9uY2UubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihgSW52YWxpZCBzZXJ2ZXIgbm9uY2UgbGVuZ3RoICR7c2VydmVyTm9uY2UubGVuZ3RofSwgZXhwZWN0ZWQgNjRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXV0aWxzXzEuQnl0ZVV0aWxzLmVxdWFscyhzZXJ2ZXJOb25jZS5zdWJhcnJheSgwLCBub25jZS5ieXRlTGVuZ3RoKSwgbm9uY2UpKSB7XG4gICAgICAgICAgICAvLyB0aHJvdyBiZWNhdXNlIHRoZSBzZXJ2ZXJOb25jZSdzIGxlYWRpbmcgMzIgYnl0ZXMgbXVzdCBlcXVhbCB0aGUgY2xpZW50IG5vbmNlJ3MgMzIgYnl0ZXNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvODc1NDQ2ZGI0NGFhZGU0MTQwMTE3MzE4NDA4MzFmMzhhNmM2NjhkZi9zb3VyY2UvYXV0aC9hdXRoLnJzdCNpZDExXG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4MylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdTZXJ2ZXIgbm9uY2UgZG9lcyBub3QgYmVnaW4gd2l0aCBjbGllbnQgbm9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG9zdC5sZW5ndGggPCAxIHx8IGhvc3QubGVuZ3RoID4gMjU1IHx8IGhvc3QuaW5kZXhPZignLi4nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoYFNlcnZlciByZXR1cm5lZCBhbiBpbnZhbGlkIGhvc3Q6IFwiJHtob3N0fVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm9keSA9ICdBY3Rpb249R2V0Q2FsbGVySWRlbnRpdHkmVmVyc2lvbj0yMDExLTA2LTE1JztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHNpZ24oe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgcmVnaW9uOiBkZXJpdmVSZWdpb24oc2VydmVyUmVzcG9uc2UuaCksXG4gICAgICAgICAgICBzZXJ2aWNlOiAnc3RzJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgJ1gtTW9uZ29EQi1TZXJ2ZXItTm9uY2UnOiB1dGlsc18xLkJ5dGVVdGlscy50b0Jhc2U2NChzZXJ2ZXJOb25jZSksXG4gICAgICAgICAgICAgICAgJ1gtTW9uZ29EQi1HUzItQ0ItRmxhZyc6ICduJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdGg6ICcvJyxcbiAgICAgICAgICAgIGJvZHlcbiAgICAgICAgfSwgYXdzQ3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgYTogb3B0aW9ucy5oZWFkZXJzLkF1dGhvcml6YXRpb24sXG4gICAgICAgICAgICBkOiBvcHRpb25zLmhlYWRlcnNbJ1gtQW16LURhdGUnXVxuICAgICAgICB9O1xuICAgICAgICBpZiAoc2Vzc2lvblRva2VuKSB7XG4gICAgICAgICAgICBwYXlsb2FkLnQgPSBzZXNzaW9uVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FzbENvbnRpbnVlID0ge1xuICAgICAgICAgICAgc2FzbENvbnRpbnVlOiAxLFxuICAgICAgICAgICAgY29udmVyc2F0aW9uSWQ6IDEsXG4gICAgICAgICAgICBwYXlsb2FkOiBCU09OLnNlcmlhbGl6ZShwYXlsb2FkLCBic29uT3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKShgJHtkYn0uJGNtZGApLCBzYXNsQ29udGludWUsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0RCQVdTID0gTW9uZ29EQkFXUztcbmFzeW5jIGZ1bmN0aW9uIG1ha2VUZW1wQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMsIHByb3ZpZGVyKSB7XG4gICAgZnVuY3Rpb24gbWFrZU1vbmdvQ3JlZGVudGlhbHNGcm9tQVdTVGVtcChjcmVkcykge1xuICAgICAgICAvLyBUaGUgQVdTIHNlc3Npb24gdG9rZW4gKGNyZWRzLlRva2VuKSBtYXkgb3IgbWF5IG5vdCBiZSBzZXQuXG4gICAgICAgIGlmICghY3JlZHMuQWNjZXNzS2V5SWQgfHwgIWNyZWRzLlNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQ291bGQgbm90IG9idGFpbiB0ZW1wb3JhcnkgTU9OR09EQi1BV1MgY3JlZGVudGlhbHMnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IG1vbmdvX2NyZWRlbnRpYWxzXzEuTW9uZ29DcmVkZW50aWFscyh7XG4gICAgICAgICAgICB1c2VybmFtZTogY3JlZHMuQWNjZXNzS2V5SWQsXG4gICAgICAgICAgICBwYXNzd29yZDogY3JlZHMuU2VjcmV0QWNjZXNzS2V5LFxuICAgICAgICAgICAgc291cmNlOiBjcmVkZW50aWFscy5zb3VyY2UsXG4gICAgICAgICAgICBtZWNoYW5pc206IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9BV1MsXG4gICAgICAgICAgICBtZWNoYW5pc21Qcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgQVdTX1NFU1NJT05fVE9LRU46IGNyZWRzLlRva2VuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDaGVjayBpZiB0aGUgQVdTIGNyZWRlbnRpYWwgcHJvdmlkZXIgZnJvbSB0aGUgU0RLIGlzIHByZXNlbnQuIElmIG5vdCxcbiAgICAvLyB1c2UgdGhlIG9sZCBtZXRob2QuXG4gICAgaWYgKHByb3ZpZGVyICYmICEoJ2tNb2R1bGVFcnJvcicgaW4gTW9uZ29EQkFXUy5jcmVkZW50aWFsUHJvdmlkZXIpKSB7XG4gICAgICAgIC8qXG4gICAgICAgICAqIENyZWF0ZXMgYSBjcmVkZW50aWFsIHByb3ZpZGVyIHRoYXQgd2lsbCBhdHRlbXB0IHRvIGZpbmQgY3JlZGVudGlhbHMgZnJvbSB0aGVcbiAgICAgICAgICogZm9sbG93aW5nIHNvdXJjZXMgKGxpc3RlZCBpbiBvcmRlciBvZiBwcmVjZWRlbmNlKTpcbiAgICAgICAgICpcbiAgICAgICAgICogLSBFbnZpcm9ubWVudCB2YXJpYWJsZXMgZXhwb3NlZCB2aWEgcHJvY2Vzcy5lbnZcbiAgICAgICAgICogLSBTU08gY3JlZGVudGlhbHMgZnJvbSB0b2tlbiBjYWNoZVxuICAgICAgICAgKiAtIFdlYiBpZGVudGl0eSB0b2tlbiBjcmVkZW50aWFsc1xuICAgICAgICAgKiAtIFNoYXJlZCBjcmVkZW50aWFscyBhbmQgY29uZmlnIGluaSBmaWxlc1xuICAgICAgICAgKiAtIFRoZSBFQzIvRUNTIEluc3RhbmNlIE1ldGFkYXRhIFNlcnZpY2VcbiAgICAgICAgICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjcmVkcyA9IGF3YWl0IHByb3ZpZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gbWFrZU1vbmdvQ3JlZGVudGlhbHNGcm9tQVdTVGVtcCh7XG4gICAgICAgICAgICAgICAgQWNjZXNzS2V5SWQ6IGNyZWRzLmFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgICAgIFNlY3JldEFjY2Vzc0tleTogY3JlZHMuc2VjcmV0QWNjZXNzS2V5LFxuICAgICAgICAgICAgICAgIFRva2VuOiBjcmVkcy5zZXNzaW9uVG9rZW4sXG4gICAgICAgICAgICAgICAgRXhwaXJhdGlvbjogY3JlZHMuZXhwaXJhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FXU0Vycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgQVdTX0NPTlRBSU5FUl9DUkVERU5USUFMU19SRUxBVElWRV9VUklcbiAgICAgICAgLy8gaXMgc2V0IHRoZW4gZHJpdmVycyBNVVNUIGFzc3VtZSB0aGF0IGl0IHdhcyBzZXQgYnkgYW4gQVdTIEVDUyBhZ2VudFxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuQVdTX0NPTlRBSU5FUl9DUkVERU5USUFMU19SRUxBVElWRV9VUkkpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlTW9uZ29DcmVkZW50aWFsc0Zyb21BV1NUZW1wKGF3YWl0ICgwLCB1dGlsc18xLnJlcXVlc3QpKGAke0FXU19SRUxBVElWRV9VUkl9JHtwcm9jZXNzLmVudi5BV1NfQ09OVEFJTkVSX0NSRURFTlRJQUxTX1JFTEFUSVZFX1VSSX1gKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGFzc3VtZSB3ZSBhcmUgb24gYW4gRUMyIGluc3RhbmNlXG4gICAgICAgIC8vIGdldCBhIHRva2VuXG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgKDAsIHV0aWxzXzEucmVxdWVzdCkoYCR7QVdTX0VDMl9VUkl9L2xhdGVzdC9hcGkvdG9rZW5gLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAganNvbjogZmFsc2UsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdYLWF3cy1lYzItbWV0YWRhdGEtdG9rZW4tdHRsLXNlY29uZHMnOiAzMCB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBnZXQgcm9sZSBuYW1lXG4gICAgICAgIGNvbnN0IHJvbGVOYW1lID0gYXdhaXQgKDAsIHV0aWxzXzEucmVxdWVzdCkoYCR7QVdTX0VDMl9VUkl9LyR7QVdTX0VDMl9QQVRIfWAsIHtcbiAgICAgICAgICAgIGpzb246IGZhbHNlLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnWC1hd3MtZWMyLW1ldGFkYXRhLXRva2VuJzogdG9rZW4gfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZ2V0IHRlbXAgY3JlZGVudGlhbHNcbiAgICAgICAgY29uc3QgY3JlZHMgPSBhd2FpdCAoMCwgdXRpbHNfMS5yZXF1ZXN0KShgJHtBV1NfRUMyX1VSSX0vJHtBV1NfRUMyX1BBVEh9LyR7cm9sZU5hbWV9YCwge1xuICAgICAgICAgICAgaGVhZGVyczogeyAnWC1hd3MtZWMyLW1ldGFkYXRhLXRva2VuJzogdG9rZW4gfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1ha2VNb25nb0NyZWRlbnRpYWxzRnJvbUFXU1RlbXAoY3JlZHMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZVJlZ2lvbihob3N0KSB7XG4gICAgY29uc3QgcGFydHMgPSBob3N0LnNwbGl0KCcuJyk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSB8fCBwYXJ0c1sxXSA9PT0gJ2FtYXpvbmF3cycpIHtcbiAgICAgICAgcmV0dXJuICd1cy1lYXN0LTEnO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHNbMV07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb2RiX2F3cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/aws_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\");\nconst azure_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/callback_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set('azure', new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor() {\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating, response);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth(credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n}\n//# sourceMappingURL=mongodb_oidc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxzQkFBc0I7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ2pELCtCQUErQixtQkFBTyxDQUFDLDRIQUFxQztBQUM1RSxpQ0FBaUMsbUJBQU8sQ0FBQyxnSUFBdUM7QUFDaEYsNEJBQTRCLG1CQUFPLENBQUMsc0hBQWtDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEYsOENBQThDO0FBQzFJO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMuanM/MTgxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29EQk9JREMgPSBleHBvcnRzLk9JRENfV09SS0ZMT1dTID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jb25zdCBhd3Nfc2VydmljZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL2F3c19zZXJ2aWNlX3dvcmtmbG93XCIpO1xuY29uc3QgYXp1cmVfc2VydmljZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL2F6dXJlX3NlcnZpY2Vfd29ya2Zsb3dcIik7XG5jb25zdCBjYWxsYmFja193b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL2NhbGxiYWNrX3dvcmtmbG93XCIpO1xuLyoqIEVycm9yIHdoZW4gY3JlZGVudGlhbHMgYXJlIG1pc3NpbmcuICovXG5jb25zdCBNSVNTSU5HX0NSRURFTlRJQUxTX0VSUk9SID0gJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IG5ldyBNYXAoKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdjYWxsYmFjaycsIG5ldyBjYWxsYmFja193b3JrZmxvd18xLkNhbGxiYWNrV29ya2Zsb3coKSk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnYXdzJywgbmV3IGF3c19zZXJ2aWNlX3dvcmtmbG93XzEuQXdzU2VydmljZVdvcmtmbG93KCkpO1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUy5zZXQoJ2F6dXJlJywgbmV3IGF6dXJlX3NlcnZpY2Vfd29ya2Zsb3dfMS5BenVyZVNlcnZpY2VXb3JrZmxvdygpKTtcbi8qKlxuICogT0lEQyBhdXRoIHByb3ZpZGVyLlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5jbGFzcyBNb25nb0RCT0lEQyBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBhdXRoIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGUgdXNpbmcgT0lEQ1xuICAgICAqL1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCByZWF1dGhlbnRpY2F0aW5nLCByZXNwb25zZSB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpO1xuICAgICAgICBjb25zdCB3b3JrZmxvdyA9IGdldFdvcmtmbG93KGNyZWRlbnRpYWxzKTtcbiAgICAgICAgYXdhaXQgd29ya2Zsb3cuZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscywgcmVhdXRoZW50aWNhdGluZywgcmVzcG9uc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIHNwZWN1bGF0aXZlIGF1dGggZm9yIHRoZSBpbml0aWFsIGhhbmRzaGFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBwcmVwYXJlKGhhbmRzaGFrZURvYywgYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCk7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gZ2V0V29ya2Zsb3coY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3b3JrZmxvdy5zcGVjdWxhdGl2ZUF1dGgoY3JlZGVudGlhbHMpO1xuICAgICAgICByZXR1cm4geyAuLi5oYW5kc2hha2VEb2MsIC4uLnJlc3VsdCB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29EQk9JREMgPSBNb25nb0RCT0lEQztcbi8qKlxuICogR2V0IGNyZWRlbnRpYWxzIGZyb20gdGhlIGF1dGggY29udGV4dCwgdGhyb3dpbmcgaWYgdGhleSBkbyBub3QgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIGdldENyZWRlbnRpYWxzKGF1dGhDb250ZXh0KSB7XG4gICAgY29uc3QgeyBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKE1JU1NJTkdfQ1JFREVOVElBTFNfRVJST1IpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlZGVudGlhbHM7XG59XG4vKipcbiAqIEdldHMgZWl0aGVyIGEgZGV2aWNlIHdvcmtmbG93IG9yIGNhbGxiYWNrIHdvcmtmbG93LlxuICovXG5mdW5jdGlvbiBnZXRXb3JrZmxvdyhjcmVkZW50aWFscykge1xuICAgIGNvbnN0IHByb3ZpZGVyTmFtZSA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXMuUFJPVklERVJfTkFNRTtcbiAgICBjb25zdCB3b3JrZmxvdyA9IGV4cG9ydHMuT0lEQ19XT1JLRkxPV1MuZ2V0KHByb3ZpZGVyTmFtZSB8fCAnY2FsbGJhY2snKTtcbiAgICBpZiAoIXdvcmtmbG93KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYENvdWxkIG5vdCBsb2FkIHdvcmtmbG93IGZvciBwcm92aWRlciAke2NyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXMuUFJPVklERVJfTkFNRX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHdvcmtmbG93O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29kYl9vaWRjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsServiceWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nclass AwsServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        return fs.promises.readFile(tokenFile, 'utf8');\n    }\n}\nexports.AwsServiceWorkflow = AwsServiceWorkflow;\n//# sourceMappingURL=aws_service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWdCO0FBQ3hDLDJCQUEyQixtQkFBTyxDQUFDLHVHQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F3c19zZXJ2aWNlX3dvcmtmbG93LmpzP2ZmZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF3c1NlcnZpY2VXb3JrZmxvdyA9IHZvaWQgMDtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHNlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL3NlcnZpY2Vfd29ya2Zsb3dcIik7XG4vKiogRXJyb3IgZm9yIHdoZW4gdGhlIHRva2VuIGlzIG1pc3NpbmcgaW4gdGhlIGVudmlyb25tZW50LiAqL1xuY29uc3QgVE9LRU5fTUlTU0lOR19FUlJPUiA9ICdBV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEUgbXVzdCBiZSBzZXQgaW4gdGhlIGVudmlyb25tZW50Lic7XG4vKipcbiAqIERldmljZSB3b3JrZmxvdyBpbXBsZW1lbnRhdGlvbiBmb3IgQVdTLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBd3NTZXJ2aWNlV29ya2Zsb3cgZXh0ZW5kcyBzZXJ2aWNlX3dvcmtmbG93XzEuU2VydmljZVdvcmtmbG93IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbigpIHtcbiAgICAgICAgY29uc3QgdG9rZW5GaWxlID0gcHJvY2Vzcy5lbnYuQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFO1xuICAgICAgICBpZiAoIXRva2VuRmlsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BV1NFcnJvcihUT0tFTl9NSVNTSU5HX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnMucHJvbWlzZXMucmVhZEZpbGUodG9rZW5GaWxlLCAndXRmOCcpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXdzU2VydmljZVdvcmtmbG93ID0gQXdzU2VydmljZVdvcmtmbG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXdzX3NlcnZpY2Vfd29ya2Zsb3cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst azure_token_cache_1 = __webpack_require__(/*! ./azure_token_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Base URL for getting Azure tokens. */\nconst AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01';\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */\nclass AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super(...arguments);\n        this.cache = new azure_token_cache_1.AzureTokenCache();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        let token;\n        const entry = this.cache.getEntry(tokenAudience);\n        if (entry?.isValid()) {\n            token = entry.token;\n        }\n        else {\n            this.cache.deleteEntry(tokenAudience);\n            const response = await getAzureTokenData(tokenAudience);\n            if (!isEndpointResultValid(response)) {\n                throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n            }\n            this.cache.addEntry(tokenAudience, response);\n            token = response.access_token;\n        }\n        return token;\n    }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience) {\n    const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n    const data = await (0, utils_1.request)(url, {\n        json: true,\n        headers: AZURE_HEADERS\n    });\n    return data;\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return 'access_token' in token && 'expires_in' in token;\n}\n//# sourceMappingURL=azure_service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWdCO0FBQ3hDLDRCQUE0QixtQkFBTyxDQUFDLHlHQUFxQjtBQUN6RCwyQkFBMkIsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDhDQUE4QztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZSxZQUFZLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXp1cmVfc2VydmljZV93b3JrZmxvdy5qcz83ZjVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BenVyZVNlcnZpY2VXb3JrZmxvdyA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXp1cmVfdG9rZW5fY2FjaGVfMSA9IHJlcXVpcmUoXCIuL2F6dXJlX3Rva2VuX2NhY2hlXCIpO1xuY29uc3Qgc2VydmljZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vc2VydmljZV93b3JrZmxvd1wiKTtcbi8qKiBCYXNlIFVSTCBmb3IgZ2V0dGluZyBBenVyZSB0b2tlbnMuICovXG5jb25zdCBBWlVSRV9CQVNFX1VSTCA9ICdodHRwOi8vMTY5LjI1NC4xNjkuMjU0L21ldGFkYXRhL2lkZW50aXR5L29hdXRoMi90b2tlbj9hcGktdmVyc2lvbj0yMDE4LTAyLTAxJztcbi8qKiBBenVyZSByZXF1ZXN0IGhlYWRlcnMuICovXG5jb25zdCBBWlVSRV9IRUFERVJTID0gT2JqZWN0LmZyZWV6ZSh7IE1ldGFkYXRhOiAndHJ1ZScsIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xuLyoqIEludmFsaWQgZW5kcG9pbnQgcmVzdWx0IGVycm9yLiAqL1xuY29uc3QgRU5EUE9JTlRfUkVTVUxUX0VSUk9SID0gJ0F6dXJlIGVuZHBvaW50IGRpZCBub3QgcmV0dXJuIGEgdmFsdWUgd2l0aCBvbmx5IGFjY2Vzc190b2tlbiBhbmQgZXhwaXJlc19pbiBwcm9wZXJ0aWVzJztcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gYXVkaWVuY2UgaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9BVURJRU5DRV9NSVNTSU5HX0VSUk9SID0gJ1RPS0VOX0FVRElFTkNFIG11c3QgYmUgc2V0IGluIHRoZSBhdXRoIG1lY2hhbmlzbSBwcm9wZXJ0aWVzIHdoZW4gUFJPVklERVJfTkFNRSBpcyBhenVyZS4nO1xuLyoqXG4gKiBEZXZpY2Ugd29ya2Zsb3cgaW1wbGVtZW50YXRpb24gZm9yIEF6dXJlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBenVyZVNlcnZpY2VXb3JrZmxvdyBleHRlbmRzIHNlcnZpY2Vfd29ya2Zsb3dfMS5TZXJ2aWNlV29ya2Zsb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IGF6dXJlX3Rva2VuX2NhY2hlXzEuQXp1cmVUb2tlbkNhY2hlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdG9rZW4gZnJvbSB0aGUgZW52aXJvbm1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW5BdWRpZW5jZSA9IGNyZWRlbnRpYWxzPy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlRPS0VOX0FVRElFTkNFO1xuICAgICAgICBpZiAoIXRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQXp1cmVFcnJvcihUT0tFTl9BVURJRU5DRV9NSVNTSU5HX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdG9rZW47XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5jYWNoZS5nZXRFbnRyeSh0b2tlbkF1ZGllbmNlKTtcbiAgICAgICAgaWYgKGVudHJ5Py5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRva2VuID0gZW50cnkudG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmRlbGV0ZUVudHJ5KHRva2VuQXVkaWVuY2UpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRBenVyZVRva2VuRGF0YSh0b2tlbkF1ZGllbmNlKTtcbiAgICAgICAgICAgIGlmICghaXNFbmRwb2ludFJlc3VsdFZhbGlkKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQXp1cmVFcnJvcihFTkRQT0lOVF9SRVNVTFRfRVJST1IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jYWNoZS5hZGRFbnRyeSh0b2tlbkF1ZGllbmNlLCByZXNwb25zZSk7XG4gICAgICAgICAgICB0b2tlbiA9IHJlc3BvbnNlLmFjY2Vzc190b2tlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZVNlcnZpY2VXb3JrZmxvdyA9IEF6dXJlU2VydmljZVdvcmtmbG93O1xuLyoqXG4gKiBIaXQgdGhlIEF6dXJlIGVuZHBvaW50IHRvIGdldCB0aGUgdG9rZW4gZGF0YS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0QXp1cmVUb2tlbkRhdGEodG9rZW5BdWRpZW5jZSkge1xuICAgIGNvbnN0IHVybCA9IGAke0FaVVJFX0JBU0VfVVJMfSZyZXNvdXJjZT0ke3Rva2VuQXVkaWVuY2V9YDtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIHV0aWxzXzEucmVxdWVzdCkodXJsLCB7XG4gICAgICAgIGpzb246IHRydWUsXG4gICAgICAgIGhlYWRlcnM6IEFaVVJFX0hFQURFUlNcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHJlc3VsdCByZXR1cm5lZCBmcm9tIHRoZSBlbmRwb2ludCBpcyB2YWxpZC5cbiAqIFRoaXMgbWVhbnMgdGhlIHJlc3VsdCBpcyBub3QgbnVsbGlzaCwgY29udGFpbnMgdGhlIGFjY2Vzc190b2tlbiByZXF1aXJlZCBmaWVsZFxuICogYW5kIHRoZSBleHBpcmVzX2luIHJlcXVpcmVkIGZpZWxkLlxuICovXG5mdW5jdGlvbiBpc0VuZHBvaW50UmVzdWx0VmFsaWQodG9rZW4pIHtcbiAgICBpZiAodG9rZW4gPT0gbnVsbCB8fCB0eXBlb2YgdG9rZW4gIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICdhY2Nlc3NfdG9rZW4nIGluIHRva2VuICYmICdleHBpcmVzX2luJyBpbiB0b2tlbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF6dXJlX3NlcnZpY2Vfd29ya2Zsb3cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** @internal */\nclass AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(token, expiration) {\n        super(expiration);\n        this.token = token;\n    }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nclass AzureTokenCache extends cache_1.Cache {\n    /**\n     * Add an entry to the cache.\n     */\n    addEntry(tokenAudience, token) {\n        const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n        this.entries.set(tokenAudience, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key.\n     */\n    cacheKey(tokenAudience) {\n        return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(tokenAudience) {\n        this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */\n    getEntry(tokenAudience) {\n        return this.entries.get(tokenAudience);\n    }\n}\nexports.AzureTokenCache = AzureTokenCache;\n//# sourceMappingURL=azure_token_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx1QkFBdUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F6dXJlX3Rva2VuX2NhY2hlLmpzP2RlMTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF6dXJlVG9rZW5DYWNoZSA9IGV4cG9ydHMuQXp1cmVUb2tlbkVudHJ5ID0gdm9pZCAwO1xuY29uc3QgY2FjaGVfMSA9IHJlcXVpcmUoXCIuL2NhY2hlXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQXp1cmVUb2tlbkVudHJ5IGV4dGVuZHMgY2FjaGVfMS5FeHBpcmluZ0NhY2hlRW50cnkge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBlbnRyeS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b2tlbiwgZXhwaXJhdGlvbikge1xuICAgICAgICBzdXBlcihleHBpcmF0aW9uKTtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVUb2tlbkVudHJ5ID0gQXp1cmVUb2tlbkVudHJ5O1xuLyoqXG4gKiBBIGNhY2hlIG9mIGFjY2VzcyB0b2tlbnMgZnJvbSBBenVyZS5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBenVyZVRva2VuQ2FjaGUgZXh0ZW5kcyBjYWNoZV8xLkNhY2hlIHtcbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZW50cnkgdG8gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGFkZEVudHJ5KHRva2VuQXVkaWVuY2UsIHRva2VuKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gbmV3IEF6dXJlVG9rZW5FbnRyeSh0b2tlbi5hY2Nlc3NfdG9rZW4sIHRva2VuLmV4cGlyZXNfaW4pO1xuICAgICAgICB0aGlzLmVudHJpZXMuc2V0KHRva2VuQXVkaWVuY2UsIGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYWNoZSBrZXkuXG4gICAgICovXG4gICAgY2FjaGVLZXkodG9rZW5BdWRpZW5jZSkge1xuICAgICAgICByZXR1cm4gdG9rZW5BdWRpZW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGVudHJ5IGZyb20gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGRlbGV0ZUVudHJ5KHRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzLmRlbGV0ZSh0b2tlbkF1ZGllbmNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFuIEF6dXJlIHRva2VuIGVudHJ5IGZyb20gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGdldEVudHJ5KHRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcy5nZXQodG9rZW5BdWRpZW5jZSk7XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZVRva2VuQ2FjaGUgPSBBenVyZVRva2VuQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZV90b2tlbl9jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */\nclass ExpiringCacheEntry {\n    /**\n     * Create a new expiring token entry.\n     */\n    constructor(expiration) {\n        this.expiration = this.expirationTime(expiration);\n    }\n    /**\n     * The entry is still valid if the expiration is more than\n     * 5 minutes from the expiration time.\n     */\n    isValid() {\n        return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */\n    expirationTime(expiresInSeconds) {\n        return Date.now() + expiresInSeconds * 1000;\n    }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */\nclass Cache {\n    /**\n     * Create a new cache.\n     */\n    constructor() {\n        this.entries = new Map();\n    }\n    /**\n     * Clear the cache.\n     */\n    clear() {\n        this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    hashedCacheKey(address, username, callbackHash) {\n        return JSON.stringify([address, username, callbackHash]);\n    }\n}\nexports.Cache = Cache;\n//# sourceMappingURL=cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLEdBQUcsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2NhY2hlLmpzP2IxZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhY2hlID0gZXhwb3J0cy5FeHBpcmluZ0NhY2hlRW50cnkgPSB2b2lkIDA7XG4vKiA1IG1pbnV0ZXMgaW4gbWlsbGlzZWNvbmRzICovXG5jb25zdCBFWFBJUkFUSU9OX0JVRkZFUl9NUyA9IDMwMDAwMDtcbi8qKlxuICogQW4gZW50cnkgaW4gYSBjYWNoZSB0aGF0IGNhbiBleHBpcmUgaW4gYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lLlxuICovXG5jbGFzcyBFeHBpcmluZ0NhY2hlRW50cnkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBleHBpcmluZyB0b2tlbiBlbnRyeS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihleHBpcmF0aW9uKSB7XG4gICAgICAgIHRoaXMuZXhwaXJhdGlvbiA9IHRoaXMuZXhwaXJhdGlvblRpbWUoZXhwaXJhdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBlbnRyeSBpcyBzdGlsbCB2YWxpZCBpZiB0aGUgZXhwaXJhdGlvbiBpcyBtb3JlIHRoYW5cbiAgICAgKiA1IG1pbnV0ZXMgZnJvbSB0aGUgZXhwaXJhdGlvbiB0aW1lLlxuICAgICAqL1xuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGlyYXRpb24gLSBEYXRlLm5vdygpID4gRVhQSVJBVElPTl9CVUZGRVJfTVM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBleHBpcmF0aW9uIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHBhc3QgZXBvY2guXG4gICAgICovXG4gICAgZXhwaXJhdGlvblRpbWUoZXhwaXJlc0luU2Vjb25kcykge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSArIGV4cGlyZXNJblNlY29uZHMgKiAxMDAwO1xuICAgIH1cbn1cbmV4cG9ydHMuRXhwaXJpbmdDYWNoZUVudHJ5ID0gRXhwaXJpbmdDYWNoZUVudHJ5O1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBPSURDIGNhY2hlcy5cbiAqL1xuY2xhc3MgQ2FjaGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjYWNoZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYWNoZSBrZXkgZnJvbSB0aGUgYWRkcmVzcyBhbmQgdXNlcm5hbWUuXG4gICAgICovXG4gICAgaGFzaGVkQ2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW2FkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2hdKTtcbiAgICB9XG59XG5leHBvcnRzLkNhY2hlID0gQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackLockCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** Error message for when request callback is missing. */\nconst REQUEST_CALLBACK_REQUIRED_ERROR = 'Auth mechanism property REQUEST_TOKEN_CALLBACK is required.';\n/* Counter for function \"hashes\".*/\nlet FN_HASH_COUNTER = 0;\n/* No function present function */\nconst NO_FUNCTION = async () => ({ accessToken: 'test' });\n/* The map of function hashes */\nconst FN_HASHES = new WeakMap();\n/* Put the no function hash in the map. */\nFN_HASHES.set(NO_FUNCTION, FN_HASH_COUNTER);\n/**\n * A cache of request and refresh callbacks per server/user.\n */\nclass CallbackLockCache extends cache_1.Cache {\n    /**\n     * Get the callbacks for the connection and credentials. If an entry does not\n     * exist a new one will get set.\n     */\n    getEntry(connection, credentials) {\n        const requestCallback = credentials.mechanismProperties.REQUEST_TOKEN_CALLBACK;\n        const refreshCallback = credentials.mechanismProperties.REFRESH_TOKEN_CALLBACK;\n        if (!requestCallback) {\n            throw new error_1.MongoInvalidArgumentError(REQUEST_CALLBACK_REQUIRED_ERROR);\n        }\n        const callbackHash = hashFunctions(requestCallback, refreshCallback);\n        const key = this.cacheKey(connection.address, credentials.username, callbackHash);\n        const entry = this.entries.get(key);\n        if (entry) {\n            return entry;\n        }\n        return this.addEntry(key, callbackHash, requestCallback, refreshCallback);\n    }\n    /**\n     * Set locked callbacks on for connection and credentials.\n     */\n    addEntry(key, callbackHash, requestCallback, refreshCallback) {\n        const entry = {\n            requestCallback: withLock(requestCallback),\n            refreshCallback: refreshCallback ? withLock(refreshCallback) : undefined,\n            callbackHash: callbackHash\n        };\n        this.entries.set(key, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.CallbackLockCache = CallbackLockCache;\n/**\n * Ensure the callback is only executed one at a time.\n */\nfunction withLock(callback) {\n    let lock = Promise.resolve();\n    return async (info, context) => {\n        await lock;\n        lock = lock.then(() => callback(info, context));\n        return lock;\n    };\n}\n/**\n * Get the hash string for the request and refresh functions.\n */\nfunction hashFunctions(requestFn, refreshFn) {\n    let requestHash = FN_HASHES.get(requestFn);\n    let refreshHash = FN_HASHES.get(refreshFn ?? NO_FUNCTION);\n    if (requestHash == null) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        requestHash = FN_HASH_COUNTER;\n        FN_HASHES.set(requestFn, FN_HASH_COUNTER);\n    }\n    if (refreshHash == null && refreshFn) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        refreshHash = FN_HASH_COUNTER;\n        FN_HASHES.set(refreshFn, FN_HASH_COUNTER);\n    }\n    return `${requestHash}-${refreshHash}`;\n}\n//# sourceMappingURL=callback_lock_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWxsYmFja19sb2NrX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVksR0FBRyxZQUFZO0FBQ3pDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWxsYmFja19sb2NrX2NhY2hlLmpzPzlkYzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbGxiYWNrTG9ja0NhY2hlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IGNhY2hlXzEgPSByZXF1aXJlKFwiLi9jYWNoZVwiKTtcbi8qKiBFcnJvciBtZXNzYWdlIGZvciB3aGVuIHJlcXVlc3QgY2FsbGJhY2sgaXMgbWlzc2luZy4gKi9cbmNvbnN0IFJFUVVFU1RfQ0FMTEJBQ0tfUkVRVUlSRURfRVJST1IgPSAnQXV0aCBtZWNoYW5pc20gcHJvcGVydHkgUkVRVUVTVF9UT0tFTl9DQUxMQkFDSyBpcyByZXF1aXJlZC4nO1xuLyogQ291bnRlciBmb3IgZnVuY3Rpb24gXCJoYXNoZXNcIi4qL1xubGV0IEZOX0hBU0hfQ09VTlRFUiA9IDA7XG4vKiBObyBmdW5jdGlvbiBwcmVzZW50IGZ1bmN0aW9uICovXG5jb25zdCBOT19GVU5DVElPTiA9IGFzeW5jICgpID0+ICh7IGFjY2Vzc1Rva2VuOiAndGVzdCcgfSk7XG4vKiBUaGUgbWFwIG9mIGZ1bmN0aW9uIGhhc2hlcyAqL1xuY29uc3QgRk5fSEFTSEVTID0gbmV3IFdlYWtNYXAoKTtcbi8qIFB1dCB0aGUgbm8gZnVuY3Rpb24gaGFzaCBpbiB0aGUgbWFwLiAqL1xuRk5fSEFTSEVTLnNldChOT19GVU5DVElPTiwgRk5fSEFTSF9DT1VOVEVSKTtcbi8qKlxuICogQSBjYWNoZSBvZiByZXF1ZXN0IGFuZCByZWZyZXNoIGNhbGxiYWNrcyBwZXIgc2VydmVyL3VzZXIuXG4gKi9cbmNsYXNzIENhbGxiYWNrTG9ja0NhY2hlIGV4dGVuZHMgY2FjaGVfMS5DYWNoZSB7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjYWxsYmFja3MgZm9yIHRoZSBjb25uZWN0aW9uIGFuZCBjcmVkZW50aWFscy4gSWYgYW4gZW50cnkgZG9lcyBub3RcbiAgICAgKiBleGlzdCBhIG5ldyBvbmUgd2lsbCBnZXQgc2V0LlxuICAgICAqL1xuICAgIGdldEVudHJ5KGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RDYWxsYmFjayA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXMuUkVRVUVTVF9UT0tFTl9DQUxMQkFDSztcbiAgICAgICAgY29uc3QgcmVmcmVzaENhbGxiYWNrID0gY3JlZGVudGlhbHMubWVjaGFuaXNtUHJvcGVydGllcy5SRUZSRVNIX1RPS0VOX0NBTExCQUNLO1xuICAgICAgICBpZiAoIXJlcXVlc3RDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihSRVFVRVNUX0NBTExCQUNLX1JFUVVJUkVEX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWxsYmFja0hhc2ggPSBoYXNoRnVuY3Rpb25zKHJlcXVlc3RDYWxsYmFjaywgcmVmcmVzaENhbGxiYWNrKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5jYWNoZUtleShjb25uZWN0aW9uLmFkZHJlc3MsIGNyZWRlbnRpYWxzLnVzZXJuYW1lLCBjYWxsYmFja0hhc2gpO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuZW50cmllcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRW50cnkoa2V5LCBjYWxsYmFja0hhc2gsIHJlcXVlc3RDYWxsYmFjaywgcmVmcmVzaENhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGxvY2tlZCBjYWxsYmFja3Mgb24gZm9yIGNvbm5lY3Rpb24gYW5kIGNyZWRlbnRpYWxzLlxuICAgICAqL1xuICAgIGFkZEVudHJ5KGtleSwgY2FsbGJhY2tIYXNoLCByZXF1ZXN0Q2FsbGJhY2ssIHJlZnJlc2hDYWxsYmFjaykge1xuICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgIHJlcXVlc3RDYWxsYmFjazogd2l0aExvY2socmVxdWVzdENhbGxiYWNrKSxcbiAgICAgICAgICAgIHJlZnJlc2hDYWxsYmFjazogcmVmcmVzaENhbGxiYWNrID8gd2l0aExvY2socmVmcmVzaENhbGxiYWNrKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNhbGxiYWNrSGFzaDogY2FsbGJhY2tIYXNoXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW50cmllcy5zZXQoa2V5LCBlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5IGZyb20gdGhlIGFkZHJlc3MgYW5kIHVzZXJuYW1lLlxuICAgICAqL1xuICAgIGNhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaGVkQ2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCk7XG4gICAgfVxufVxuZXhwb3J0cy5DYWxsYmFja0xvY2tDYWNoZSA9IENhbGxiYWNrTG9ja0NhY2hlO1xuLyoqXG4gKiBFbnN1cmUgdGhlIGNhbGxiYWNrIGlzIG9ubHkgZXhlY3V0ZWQgb25lIGF0IGEgdGltZS5cbiAqL1xuZnVuY3Rpb24gd2l0aExvY2soY2FsbGJhY2spIHtcbiAgICBsZXQgbG9jayA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHJldHVybiBhc3luYyAoaW5mbywgY29udGV4dCkgPT4ge1xuICAgICAgICBhd2FpdCBsb2NrO1xuICAgICAgICBsb2NrID0gbG9jay50aGVuKCgpID0+IGNhbGxiYWNrKGluZm8sIGNvbnRleHQpKTtcbiAgICAgICAgcmV0dXJuIGxvY2s7XG4gICAgfTtcbn1cbi8qKlxuICogR2V0IHRoZSBoYXNoIHN0cmluZyBmb3IgdGhlIHJlcXVlc3QgYW5kIHJlZnJlc2ggZnVuY3Rpb25zLlxuICovXG5mdW5jdGlvbiBoYXNoRnVuY3Rpb25zKHJlcXVlc3RGbiwgcmVmcmVzaEZuKSB7XG4gICAgbGV0IHJlcXVlc3RIYXNoID0gRk5fSEFTSEVTLmdldChyZXF1ZXN0Rm4pO1xuICAgIGxldCByZWZyZXNoSGFzaCA9IEZOX0hBU0hFUy5nZXQocmVmcmVzaEZuID8/IE5PX0ZVTkNUSU9OKTtcbiAgICBpZiAocmVxdWVzdEhhc2ggPT0gbnVsbCkge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgb25lIGZvciB0aGUgZnVuY3Rpb24gYW5kIHB1dCBpdCBpbiB0aGUgbWFwLlxuICAgICAgICBGTl9IQVNIX0NPVU5URVIrKztcbiAgICAgICAgcmVxdWVzdEhhc2ggPSBGTl9IQVNIX0NPVU5URVI7XG4gICAgICAgIEZOX0hBU0hFUy5zZXQocmVxdWVzdEZuLCBGTl9IQVNIX0NPVU5URVIpO1xuICAgIH1cbiAgICBpZiAocmVmcmVzaEhhc2ggPT0gbnVsbCAmJiByZWZyZXNoRm4pIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IG9uZSBmb3IgdGhlIGZ1bmN0aW9uIGFuZCBwdXQgaXQgaW4gdGhlIG1hcC5cbiAgICAgICAgRk5fSEFTSF9DT1VOVEVSKys7XG4gICAgICAgIHJlZnJlc2hIYXNoID0gRk5fSEFTSF9DT1VOVEVSO1xuICAgICAgICBGTl9IQVNIRVMuc2V0KHJlZnJlc2hGbiwgRk5fSEFTSF9DT1VOVEVSKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3JlcXVlc3RIYXNofS0ke3JlZnJlc2hIYXNofWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsYmFja19sb2NrX2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst callback_lock_cache_1 = __webpack_require__(/*! ./callback_lock_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\");\nconst token_entry_cache_1 = __webpack_require__(/*! ./token_entry_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\");\n/** The current version of OIDC implementation. */\nconst OIDC_VERSION = 0;\n/** 5 minutes in seconds */\nconst TIMEOUT_S = 300;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the workflow\n     */\n    constructor() {\n        this.cache = new token_entry_cache_1.TokenEntryCache();\n        this.callbackCache = new callback_lock_cache_1.CallbackLockCache();\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(credentials) {\n        const document = startCommandDocument(credentials);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials, reauthenticating, response) {\n        // Get the callbacks with locks from the callback lock cache.\n        const { requestCallback, refreshCallback, callbackHash } = this.callbackCache.getEntry(connection, credentials);\n        // Look for an existing entry in the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        if (entry) {\n            // Reauthentication cannot use a token from the cache since the server has\n            // stated it is invalid by the request for reauthentication.\n            if (entry.isValid() && !reauthenticating) {\n                // Presence of a valid cache entry means we can skip to the finishing step.\n                result = await this.finishAuthentication(connection, credentials, entry.tokenResult, response?.speculativeAuthenticate?.conversationId);\n            }\n            else {\n                // Presence of an expired cache entry means we must fetch a new one and\n                // then execute the final step.\n                const tokenResult = await this.fetchAccessToken(connection, credentials, entry.serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback);\n                try {\n                    result = await this.finishAuthentication(connection, credentials, tokenResult, reauthenticating ? undefined : response?.speculativeAuthenticate?.conversationId);\n                }\n                catch (error) {\n                    // If we are reauthenticating and this errors with reauthentication\n                    // required, we need to do the entire process over again and clear\n                    // the cache entry.\n                    if (reauthenticating &&\n                        error instanceof error_1.MongoError &&\n                        error.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                        this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n                        result = await this.execute(connection, credentials, reauthenticating);\n                    }\n                    else {\n                        throw error;\n                    }\n                }\n            }\n        }\n        else {\n            // No entry in the cache requires us to do all authentication steps\n            // from start to finish, including getting a fresh token for the cache.\n            const startDocument = await this.startAuthentication(connection, credentials, reauthenticating, response);\n            const conversationId = startDocument.conversationId;\n            const serverResult = bson_1.BSON.deserialize(startDocument.payload.buffer);\n            const tokenResult = await this.fetchAccessToken(connection, credentials, serverResult, reauthenticating, callbackHash, requestCallback, refreshCallback);\n            result = await this.finishAuthentication(connection, credentials, tokenResult, conversationId);\n        }\n        return result;\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, reauthenticating, response) {\n        let result;\n        if (!reauthenticating && response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.command((0, utils_1.ns)(credentials.source), startCommandDocument(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, tokenResult, conversationId) {\n        const result = await connection.command((0, utils_1.ns)(credentials.source), finishCommandDocument(tokenResult.accessToken, conversationId), undefined);\n        return result;\n    }\n    /**\n     * Fetches an access token using either the request or refresh callbacks and\n     * puts it in the cache.\n     */\n    async fetchAccessToken(connection, credentials, serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback) {\n        // Get the token from the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        const context = { timeoutSeconds: TIMEOUT_S, version: OIDC_VERSION };\n        // Check if there's a token in the cache.\n        if (entry) {\n            // If the cache entry is valid, return the token result.\n            if (entry.isValid() && !reauthenticating) {\n                return entry.tokenResult;\n            }\n            // If the cache entry is not valid, remove it from the cache and first attempt\n            // to use the refresh callback to get a new token. If no refresh callback\n            // exists, then fallback to the request callback.\n            if (refreshCallback) {\n                context.refreshToken = entry.tokenResult.refreshToken;\n                result = await refreshCallback(serverInfo, context);\n            }\n            else {\n                result = await requestCallback(serverInfo, context);\n            }\n        }\n        else {\n            // With no token in the cache we use the request callback.\n            result = await requestCallback(serverInfo, context);\n        }\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        // Cleanup the cache.\n        this.cache.deleteExpiredEntries();\n        // Put the new entry into the cache.\n        this.cache.addEntry(connection.address, credentials.username || '', callbackHash, result, serverInfo);\n        return result;\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null && typeof conversationId === 'number') {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWxsYmFja193b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZUFBZSxtQkFBTyxDQUFDLG9EQUFNO0FBQzdCLGdCQUFnQixtQkFBTyxDQUFDLGlFQUFnQjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBZ0I7QUFDeEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWM7QUFDMUMsOEJBQThCLG1CQUFPLENBQUMsNkdBQXVCO0FBQzdELDRCQUE0QixtQkFBTyxDQUFDLHlHQUFxQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlEQUFpRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxZQUFZO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxZQUFZO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2NhbGxiYWNrX3dvcmtmbG93LmpzP2M3NDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbGxiYWNrV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi4vcHJvdmlkZXJzXCIpO1xuY29uc3QgY2FsbGJhY2tfbG9ja19jYWNoZV8xID0gcmVxdWlyZShcIi4vY2FsbGJhY2tfbG9ja19jYWNoZVwiKTtcbmNvbnN0IHRva2VuX2VudHJ5X2NhY2hlXzEgPSByZXF1aXJlKFwiLi90b2tlbl9lbnRyeV9jYWNoZVwiKTtcbi8qKiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIE9JREMgaW1wbGVtZW50YXRpb24uICovXG5jb25zdCBPSURDX1ZFUlNJT04gPSAwO1xuLyoqIDUgbWludXRlcyBpbiBzZWNvbmRzICovXG5jb25zdCBUSU1FT1VUX1MgPSAzMDA7XG4vKiogUHJvcGVydGllcyBhbGxvd2VkIG9uIHJlc3VsdHMgb2YgY2FsbGJhY2tzLiAqL1xuY29uc3QgUkVTVUxUX1BST1BFUlRJRVMgPSBbJ2FjY2Vzc1Rva2VuJywgJ2V4cGlyZXNJblNlY29uZHMnLCAncmVmcmVzaFRva2VuJ107XG4vKiogRXJyb3IgbWVzc2FnZSB3aGVuIHRoZSBjYWxsYmFjayByZXN1bHQgaXMgaW52YWxpZC4gKi9cbmNvbnN0IENBTExCQUNLX1JFU1VMVF9FUlJPUiA9ICdVc2VyIHByb3ZpZGVkIE9JREMgY2FsbGJhY2tzIG11c3QgcmV0dXJuIGEgdmFsaWQgb2JqZWN0IHdpdGggYW4gYWNjZXNzVG9rZW4uJztcbi8qKlxuICogT0lEQyBpbXBsZW1lbnRhdGlvbiBvZiBhIGNhbGxiYWNrIGJhc2VkIHdvcmtmbG93LlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIENhbGxiYWNrV29ya2Zsb3cge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSB3b3JrZmxvd1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IHRva2VuX2VudHJ5X2NhY2hlXzEuVG9rZW5FbnRyeUNhY2hlKCk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tDYWNoZSA9IG5ldyBjYWxsYmFja19sb2NrX2NhY2hlXzEuQ2FsbGJhY2tMb2NrQ2FjaGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCB0byBhZGQgZm9yIHNwZWN1bGF0aXZlIGF1dGhlbnRpY2F0aW9uLiBUaGlzIGFsc28gbmVlZHNcbiAgICAgKiB0byBhZGQgYSBkYiBmaWVsZCBmcm9tIHRoZSBjcmVkZW50aWFscyBzb3VyY2UuXG4gICAgICovXG4gICAgYXN5bmMgc3BlY3VsYXRpdmVBdXRoKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50ID0gc3RhcnRDb21tYW5kRG9jdW1lbnQoY3JlZGVudGlhbHMpO1xuICAgICAgICBkb2N1bWVudC5kYiA9IGNyZWRlbnRpYWxzLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHsgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IGRvY3VtZW50IH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIE9JREMgY2FsbGJhY2sgd29ya2Zsb3cuXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscywgcmVhdXRoZW50aWNhdGluZywgcmVzcG9uc2UpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBjYWxsYmFja3Mgd2l0aCBsb2NrcyBmcm9tIHRoZSBjYWxsYmFjayBsb2NrIGNhY2hlLlxuICAgICAgICBjb25zdCB7IHJlcXVlc3RDYWxsYmFjaywgcmVmcmVzaENhbGxiYWNrLCBjYWxsYmFja0hhc2ggfSA9IHRoaXMuY2FsbGJhY2tDYWNoZS5nZXRFbnRyeShjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgIC8vIExvb2sgZm9yIGFuIGV4aXN0aW5nIGVudHJ5IGluIHRoZSBjYWNoZS5cbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldEVudHJ5KGNvbm5lY3Rpb24uYWRkcmVzcywgY3JlZGVudGlhbHMudXNlcm5hbWUsIGNhbGxiYWNrSGFzaCk7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgLy8gUmVhdXRoZW50aWNhdGlvbiBjYW5ub3QgdXNlIGEgdG9rZW4gZnJvbSB0aGUgY2FjaGUgc2luY2UgdGhlIHNlcnZlciBoYXNcbiAgICAgICAgICAgIC8vIHN0YXRlZCBpdCBpcyBpbnZhbGlkIGJ5IHRoZSByZXF1ZXN0IGZvciByZWF1dGhlbnRpY2F0aW9uLlxuICAgICAgICAgICAgaWYgKGVudHJ5LmlzVmFsaWQoKSAmJiAhcmVhdXRoZW50aWNhdGluZykge1xuICAgICAgICAgICAgICAgIC8vIFByZXNlbmNlIG9mIGEgdmFsaWQgY2FjaGUgZW50cnkgbWVhbnMgd2UgY2FuIHNraXAgdG8gdGhlIGZpbmlzaGluZyBzdGVwLlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuZmluaXNoQXV0aGVudGljYXRpb24oY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIGVudHJ5LnRva2VuUmVzdWx0LCByZXNwb25zZT8uc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU/LmNvbnZlcnNhdGlvbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFByZXNlbmNlIG9mIGFuIGV4cGlyZWQgY2FjaGUgZW50cnkgbWVhbnMgd2UgbXVzdCBmZXRjaCBhIG5ldyBvbmUgYW5kXG4gICAgICAgICAgICAgICAgLy8gdGhlbiBleGVjdXRlIHRoZSBmaW5hbCBzdGVwLlxuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuUmVzdWx0ID0gYXdhaXQgdGhpcy5mZXRjaEFjY2Vzc1Rva2VuKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBlbnRyeS5zZXJ2ZXJJbmZvLCByZWF1dGhlbnRpY2F0aW5nLCBjYWxsYmFja0hhc2gsIHJlcXVlc3RDYWxsYmFjaywgcmVmcmVzaENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLmZpbmlzaEF1dGhlbnRpY2F0aW9uKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCB0b2tlblJlc3VsdCwgcmVhdXRoZW50aWNhdGluZyA/IHVuZGVmaW5lZCA6IHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZT8uY29udmVyc2F0aW9uSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHJlYXV0aGVudGljYXRpbmcgYW5kIHRoaXMgZXJyb3JzIHdpdGggcmVhdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyByZXF1aXJlZCwgd2UgbmVlZCB0byBkbyB0aGUgZW50aXJlIHByb2Nlc3Mgb3ZlciBhZ2FpbiBhbmQgY2xlYXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGNhY2hlIGVudHJ5LlxuICAgICAgICAgICAgICAgICAgICBpZiAocmVhdXRoZW50aWNhdGluZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5SZWF1dGhlbnRpY2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5kZWxldGVFbnRyeShjb25uZWN0aW9uLmFkZHJlc3MsIGNyZWRlbnRpYWxzLnVzZXJuYW1lLCBjYWxsYmFja0hhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCByZWF1dGhlbnRpY2F0aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTm8gZW50cnkgaW4gdGhlIGNhY2hlIHJlcXVpcmVzIHVzIHRvIGRvIGFsbCBhdXRoZW50aWNhdGlvbiBzdGVwc1xuICAgICAgICAgICAgLy8gZnJvbSBzdGFydCB0byBmaW5pc2gsIGluY2x1ZGluZyBnZXR0aW5nIGEgZnJlc2ggdG9rZW4gZm9yIHRoZSBjYWNoZS5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0RG9jdW1lbnQgPSBhd2FpdCB0aGlzLnN0YXJ0QXV0aGVudGljYXRpb24oY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIHJlYXV0aGVudGljYXRpbmcsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbklkID0gc3RhcnREb2N1bWVudC5jb252ZXJzYXRpb25JZDtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlclJlc3VsdCA9IGJzb25fMS5CU09OLmRlc2VyaWFsaXplKHN0YXJ0RG9jdW1lbnQucGF5bG9hZC5idWZmZXIpO1xuICAgICAgICAgICAgY29uc3QgdG9rZW5SZXN1bHQgPSBhd2FpdCB0aGlzLmZldGNoQWNjZXNzVG9rZW4oY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIHNlcnZlclJlc3VsdCwgcmVhdXRoZW50aWNhdGluZywgY2FsbGJhY2tIYXNoLCByZXF1ZXN0Q2FsbGJhY2ssIHJlZnJlc2hDYWxsYmFjayk7XG4gICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLmZpbmlzaEF1dGhlbnRpY2F0aW9uKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCB0b2tlblJlc3VsdCwgY29udmVyc2F0aW9uSWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgY2FsbGJhY2sgYXV0aGVudGljYXRpb24gcHJvY2Vzcy4gSWYgdGhlcmUgaXMgYSBzcGVjdWxhdGl2ZVxuICAgICAqIGF1dGhlbnRpY2F0aW9uIGRvY3VtZW50IGZyb20gdGhlIGluaXRpYWwgaGFuZHNoYWtlLCB0aGVuIHdlIHdpbGwgdXNlIHRoYXRcbiAgICAgKiB2YWx1ZSB0byBnZXQgdGhlIGlzc3Vlciwgb3RoZXJ3aXNlIHdlIHdpbGwgc2VuZCB0aGUgc2FzbFN0YXJ0IGNvbW1hbmQuXG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRBdXRoZW50aWNhdGlvbihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgcmVhdXRoZW50aWNhdGluZywgcmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgaWYgKCFyZWF1dGhlbnRpY2F0aW5nICYmIHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzcG9uc2Uuc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKGNyZWRlbnRpYWxzLnNvdXJjZSksIHN0YXJ0Q29tbWFuZERvY3VtZW50KGNyZWRlbnRpYWxzKSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5pc2hlcyB0aGUgY2FsbGJhY2sgYXV0aGVudGljYXRpb24gcHJvY2Vzcy5cbiAgICAgKi9cbiAgICBhc3luYyBmaW5pc2hBdXRoZW50aWNhdGlvbihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgdG9rZW5SZXN1bHQsIGNvbnZlcnNhdGlvbklkKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoY3JlZGVudGlhbHMuc291cmNlKSwgZmluaXNoQ29tbWFuZERvY3VtZW50KHRva2VuUmVzdWx0LmFjY2Vzc1Rva2VuLCBjb252ZXJzYXRpb25JZCksIHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYW4gYWNjZXNzIHRva2VuIHVzaW5nIGVpdGhlciB0aGUgcmVxdWVzdCBvciByZWZyZXNoIGNhbGxiYWNrcyBhbmRcbiAgICAgKiBwdXRzIGl0IGluIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBhc3luYyBmZXRjaEFjY2Vzc1Rva2VuKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCBzZXJ2ZXJJbmZvLCByZWF1dGhlbnRpY2F0aW5nLCBjYWxsYmFja0hhc2gsIHJlcXVlc3RDYWxsYmFjaywgcmVmcmVzaENhbGxiYWNrKSB7XG4gICAgICAgIC8vIEdldCB0aGUgdG9rZW4gZnJvbSB0aGUgY2FjaGUuXG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5jYWNoZS5nZXRFbnRyeShjb25uZWN0aW9uLmFkZHJlc3MsIGNyZWRlbnRpYWxzLnVzZXJuYW1lLCBjYWxsYmFja0hhc2gpO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBjb25zdCBjb250ZXh0ID0geyB0aW1lb3V0U2Vjb25kczogVElNRU9VVF9TLCB2ZXJzaW9uOiBPSURDX1ZFUlNJT04gfTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBhIHRva2VuIGluIHRoZSBjYWNoZS5cbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY2FjaGUgZW50cnkgaXMgdmFsaWQsIHJldHVybiB0aGUgdG9rZW4gcmVzdWx0LlxuICAgICAgICAgICAgaWYgKGVudHJ5LmlzVmFsaWQoKSAmJiAhcmVhdXRoZW50aWNhdGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS50b2tlblJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBjYWNoZSBlbnRyeSBpcyBub3QgdmFsaWQsIHJlbW92ZSBpdCBmcm9tIHRoZSBjYWNoZSBhbmQgZmlyc3QgYXR0ZW1wdFxuICAgICAgICAgICAgLy8gdG8gdXNlIHRoZSByZWZyZXNoIGNhbGxiYWNrIHRvIGdldCBhIG5ldyB0b2tlbi4gSWYgbm8gcmVmcmVzaCBjYWxsYmFja1xuICAgICAgICAgICAgLy8gZXhpc3RzLCB0aGVuIGZhbGxiYWNrIHRvIHRoZSByZXF1ZXN0IGNhbGxiYWNrLlxuICAgICAgICAgICAgaWYgKHJlZnJlc2hDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQucmVmcmVzaFRva2VuID0gZW50cnkudG9rZW5SZXN1bHQucmVmcmVzaFRva2VuO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJlZnJlc2hDYWxsYmFjayhzZXJ2ZXJJbmZvLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJlcXVlc3RDYWxsYmFjayhzZXJ2ZXJJbmZvLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdpdGggbm8gdG9rZW4gaW4gdGhlIGNhY2hlIHdlIHVzZSB0aGUgcmVxdWVzdCBjYWxsYmFjay5cbiAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJlcXVlc3RDYWxsYmFjayhzZXJ2ZXJJbmZvLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGlzIGFjY2VwdGFibGUuIElmIGl0IGlzIG5vdFxuICAgICAgICAvLyB3ZSBtdXN0IGNsZWFyIHRoZSB0b2tlbiByZXN1bHQgZnJvbSB0aGUgY2FjaGUuXG4gICAgICAgIGlmIChpc0NhbGxiYWNrUmVzdWx0SW52YWxpZChyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmRlbGV0ZUVudHJ5KGNvbm5lY3Rpb24uYWRkcmVzcywgY3JlZGVudGlhbHMudXNlcm5hbWUsIGNhbGxiYWNrSGFzaCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKENBTExCQUNLX1JFU1VMVF9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xlYW51cCB0aGUgY2FjaGUuXG4gICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlRXhwaXJlZEVudHJpZXMoKTtcbiAgICAgICAgLy8gUHV0IHRoZSBuZXcgZW50cnkgaW50byB0aGUgY2FjaGUuXG4gICAgICAgIHRoaXMuY2FjaGUuYWRkRW50cnkoY29ubmVjdGlvbi5hZGRyZXNzLCBjcmVkZW50aWFscy51c2VybmFtZSB8fCAnJywgY2FsbGJhY2tIYXNoLCByZXN1bHQsIHNlcnZlckluZm8pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FsbGJhY2tXb3JrZmxvdyA9IENhbGxiYWNrV29ya2Zsb3c7XG4vKipcbiAqIEdlbmVyYXRlIHRoZSBmaW5pc2hpbmcgY29tbWFuZCBkb2N1bWVudCBmb3IgYXV0aGVudGljYXRpb24uIFdpbGwgYmUgYVxuICogc2FzbFN0YXJ0IG9yIHNhc2xDb250aW51ZSBkZXBlbmRpbmcgb24gdGhlIHByZXNlbmNlIG9mIGEgY29udmVyc2F0aW9uIGlkLlxuICovXG5mdW5jdGlvbiBmaW5pc2hDb21tYW5kRG9jdW1lbnQodG9rZW4sIGNvbnZlcnNhdGlvbklkKSB7XG4gICAgaWYgKGNvbnZlcnNhdGlvbklkICE9IG51bGwgJiYgdHlwZW9mIGNvbnZlcnNhdGlvbklkID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2FzbENvbnRpbnVlOiAxLFxuICAgICAgICAgICAgY29udmVyc2F0aW9uSWQ6IGNvbnZlcnNhdGlvbklkLFxuICAgICAgICAgICAgcGF5bG9hZDogbmV3IGJzb25fMS5CaW5hcnkoYnNvbl8xLkJTT04uc2VyaWFsaXplKHsgand0OiB0b2tlbiB9KSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gc2FzbENvbnRpbnVlIHJlcXVpcmVzIGEgY29udmVyc2F0aW9uSWQgaW4gdGhlIGNvbW1hbmQgdG8gYmUgdmFsaWQgc28gaW4gdGhpc1xuICAgIC8vIGNhc2UgdGhlIHNlcnZlciBhbGxvd3MgXCJzdGVwIHR3b1wiIHRvIGFjdHVhbGx5IGJlIGEgc2FzbFN0YXJ0IHdpdGggdGhlIHRva2VuXG4gICAgLy8gYXMgdGhlIGp3dCBzaW5jZSB0aGUgdXNlIG9mIHRoZSBjYWNoZWQgdmFsdWUgaGFzIG5vIGNvcnJlbGF0aW5nIGNvbnZlcnNhdGluZ1xuICAgIC8vIG9uIHRoZSBwYXJ0aWN1bGFyIGNvbm5lY3Rpb24uXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICBtZWNoYW5pc206IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgICAgICBwYXlsb2FkOiBuZXcgYnNvbl8xLkJpbmFyeShic29uXzEuQlNPTi5zZXJpYWxpemUoeyBqd3Q6IHRva2VuIH0pKVxuICAgIH07XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSByZXN1bHQgcmV0dXJuZWQgZnJvbSBhIHJlcXVlc3Qgb3IgcmVmcmVzaCBjYWxsYmFja1xuICogZnVuY3Rpb24gaXMgaW52YWxpZC4gVGhpcyBtZWFucyB0aGUgcmVzdWx0IGlzIG51bGxpc2gsIGRvZXNuJ3QgY29udGFpblxuICogdGhlIGFjY2Vzc1Rva2VuIHJlcXVpcmVkIGZpZWxkLCBhbmQgZG9lcyBub3QgY29udGFpbiBleHRyYSBmaWVsZHMuXG4gKi9cbmZ1bmN0aW9uIGlzQ2FsbGJhY2tSZXN1bHRJbnZhbGlkKHRva2VuUmVzdWx0KSB7XG4gICAgaWYgKHRva2VuUmVzdWx0ID09IG51bGwgfHwgdHlwZW9mIHRva2VuUmVzdWx0ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKCEoJ2FjY2Vzc1Rva2VuJyBpbiB0b2tlblJlc3VsdCkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModG9rZW5SZXN1bHQpLmV2ZXJ5KHByb3AgPT4gUkVTVUxUX1BST1BFUlRJRVMuaW5jbHVkZXMocHJvcCkpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgc2FzbFN0YXJ0IGNvbW1hbmQgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0Q29tbWFuZERvY3VtZW50KGNyZWRlbnRpYWxzKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICBwYXlsb2FkLm4gPSBjcmVkZW50aWFscy51c2VybmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICBhdXRvQXV0aG9yaXplOiAxLFxuICAgICAgICBtZWNoYW5pc206IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgICAgICBwYXlsb2FkOiBuZXcgYnNvbl8xLkJpbmFyeShic29uXzEuQlNPTi5zZXJpYWxpemUocGF5bG9hZCkpXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGxiYWNrX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nclass ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getToken(credentials);\n        const command = commandDocument(token);\n        return connection.command((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth(credentials) {\n        const token = await this.getToken(credentials);\n        const document = commandDocument(token);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\nfunction commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({ jwt: token })\n    };\n}\nexports.commandDocument = commandDocument;\n//# sourceMappingURL=service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLHVCQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsb0RBQU07QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWdCO0FBQ3hDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQ7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3NlcnZpY2Vfd29ya2Zsb3cuanM/ZDAxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tbWFuZERvY3VtZW50ID0gZXhwb3J0cy5TZXJ2aWNlV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiYnNvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBwcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuLi9wcm92aWRlcnNcIik7XG4vKipcbiAqIENvbW1vbiBiZWhhdmlvdXIgZm9yIE9JREMgZGV2aWNlIHdvcmtmbG93cy5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBTZXJ2aWNlV29ya2Zsb3cge1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHdvcmtmbG93LiBMb29rcyBmb3IgQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFIGluIHRoZSBlbnZpcm9ubWVudFxuICAgICAqIGFuZCB0aGVuIGF0dGVtcHRzIHRvIHJlYWQgdGhlIHRva2VuIGZyb20gdGhhdCBwYXRoLlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldFRva2VuKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmREb2N1bWVudCh0b2tlbik7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKGNyZWRlbnRpYWxzLnNvdXJjZSksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZG9jdW1lbnQgdG8gYWRkIGZvciBzcGVjdWxhdGl2ZSBhdXRoZW50aWNhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzcGVjdWxhdGl2ZUF1dGgoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldFRva2VuKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBjb21tYW5kRG9jdW1lbnQodG9rZW4pO1xuICAgICAgICBkb2N1bWVudC5kYiA9IGNyZWRlbnRpYWxzLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHsgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IGRvY3VtZW50IH07XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2aWNlV29ya2Zsb3cgPSBTZXJ2aWNlV29ya2Zsb3c7XG4vKipcbiAqIENyZWF0ZSB0aGUgc2FzbFN0YXJ0IGNvbW1hbmQgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGNvbW1hbmREb2N1bWVudCh0b2tlbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgbWVjaGFuaXNtOiBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQyxcbiAgICAgICAgcGF5bG9hZDogYnNvbl8xLkJTT04uc2VyaWFsaXplKHsgand0OiB0b2tlbiB9KVxuICAgIH07XG59XG5leHBvcnRzLmNvbW1hbmREb2N1bWVudCA9IGNvbW1hbmREb2N1bWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2Vfd29ya2Zsb3cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nclass TokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(tokenResult, serverInfo, expiration) {\n        super(expiration);\n        this.tokenResult = tokenResult;\n        this.serverInfo = serverInfo;\n    }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nclass TokenEntryCache extends cache_1.Cache {\n    /**\n     * Set an entry in the token cache.\n     */\n    addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n        const entry = new TokenEntry(tokenResult, serverInfo, tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS);\n        this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n        return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(address, username, callbackHash) {\n        this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */\n    getEntry(address, username, callbackHash) {\n        return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */\n    deleteExpiredEntries() {\n        for (const [key, entry] of this.entries) {\n            if (!entry.isValid()) {\n                this.entries.delete(key);\n            }\n        }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.TokenEntryCache = TokenEntryCache;\n//# sourceMappingURL=token_entry_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxrQkFBa0I7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvdG9rZW5fZW50cnlfY2FjaGUuanM/MWM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5FbnRyeUNhY2hlID0gZXhwb3J0cy5Ub2tlbkVudHJ5ID0gdm9pZCAwO1xuY29uc3QgY2FjaGVfMSA9IHJlcXVpcmUoXCIuL2NhY2hlXCIpO1xuLyogRGVmYXVsdCBleHBpcmF0aW9uIGlzIG5vdyBmb3Igd2hlbiBubyBleHBpcmF0aW9uIHByb3ZpZGVkICovXG5jb25zdCBERUZBVUxUX0VYUElSQVRJT05fU0VDUyA9IDA7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBUb2tlbkVudHJ5IGV4dGVuZHMgY2FjaGVfMS5FeHBpcmluZ0NhY2hlRW50cnkge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBlbnRyeS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b2tlblJlc3VsdCwgc2VydmVySW5mbywgZXhwaXJhdGlvbikge1xuICAgICAgICBzdXBlcihleHBpcmF0aW9uKTtcbiAgICAgICAgdGhpcy50b2tlblJlc3VsdCA9IHRva2VuUmVzdWx0O1xuICAgICAgICB0aGlzLnNlcnZlckluZm8gPSBzZXJ2ZXJJbmZvO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5FbnRyeSA9IFRva2VuRW50cnk7XG4vKipcbiAqIENhY2hlIG9mIE9JREMgdG9rZW4gZW50cmllcy5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBUb2tlbkVudHJ5Q2FjaGUgZXh0ZW5kcyBjYWNoZV8xLkNhY2hlIHtcbiAgICAvKipcbiAgICAgKiBTZXQgYW4gZW50cnkgaW4gdGhlIHRva2VuIGNhY2hlLlxuICAgICAqL1xuICAgIGFkZEVudHJ5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gsIHRva2VuUmVzdWx0LCBzZXJ2ZXJJbmZvKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gbmV3IFRva2VuRW50cnkodG9rZW5SZXN1bHQsIHNlcnZlckluZm8sIHRva2VuUmVzdWx0LmV4cGlyZXNJblNlY29uZHMgPz8gREVGQVVMVF9FWFBJUkFUSU9OX1NFQ1MpO1xuICAgICAgICB0aGlzLmVudHJpZXMuc2V0KHRoaXMuY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCksIGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZW50cnkgZnJvbSB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgZGVsZXRlRW50cnkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICB0aGlzLmVudHJpZXMuZGVsZXRlKHRoaXMuY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gZW50cnkgZnJvbSB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgZ2V0RW50cnkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzLmdldCh0aGlzLmNhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFsbCBleHBpcmVkIGVudHJpZXMgZnJvbSB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgZGVsZXRlRXhwaXJlZEVudHJpZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIHRoaXMuZW50cmllcykge1xuICAgICAgICAgICAgaWYgKCFlbnRyeS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVudHJpZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5IGZyb20gdGhlIGFkZHJlc3MgYW5kIHVzZXJuYW1lLlxuICAgICAqL1xuICAgIGNhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaGVkQ2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbkVudHJ5Q2FjaGUgPSBUb2tlbkVudHJ5Q2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbl9lbnRyeV9jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3BsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ2pEO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckMsNkRBQTZELFNBQVMsTUFBTSxTQUFTO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcGxhaW4uanM/OTRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGxhaW4gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNsYXNzIFBsYWluIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBic29uXzEuQmluYXJ5KEJ1ZmZlci5mcm9tKGBcXHgwMCR7dXNlcm5hbWV9XFx4MDAke3Bhc3N3b3JkfWApKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgICAgIG1lY2hhbmlzbTogJ1BMQUlOJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgICAgICBhdXRvQXV0aG9yaXplOiAxXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5QbGFpbiA9IFBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    /** @experimental */\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRyxxQkFBcUI7QUFDNUQ7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9wcm92aWRlcnMuanM/M2M3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQVVUSF9NRUNIU19BVVRIX1NSQ19FWFRFUk5BTCA9IGV4cG9ydHMuQXV0aE1lY2hhbmlzbSA9IHZvaWQgMDtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkF1dGhNZWNoYW5pc20gPSBPYmplY3QuZnJlZXplKHtcbiAgICBNT05HT0RCX0FXUzogJ01PTkdPREItQVdTJyxcbiAgICBNT05HT0RCX0NSOiAnTU9OR09EQi1DUicsXG4gICAgTU9OR09EQl9ERUZBVUxUOiAnREVGQVVMVCcsXG4gICAgTU9OR09EQl9HU1NBUEk6ICdHU1NBUEknLFxuICAgIE1PTkdPREJfUExBSU46ICdQTEFJTicsXG4gICAgTU9OR09EQl9TQ1JBTV9TSEExOiAnU0NSQU0tU0hBLTEnLFxuICAgIE1PTkdPREJfU0NSQU1fU0hBMjU2OiAnU0NSQU0tU0hBLTI1NicsXG4gICAgTU9OR09EQl9YNTA5OiAnTU9OR09EQi1YNTA5JyxcbiAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgIE1PTkdPREJfT0lEQzogJ01PTkdPREItT0lEQydcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5BVVRIX01FQ0hTX0FVVEhfU1JDX0VYVEVSTkFMID0gbmV3IFNldChbXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfR1NTQVBJLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0FXUyxcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1g1MDlcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(ssr)/./node_modules/@mongodb-js/saslprep/dist/node.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await (0, utils_1.randomBytes)(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = (parts[i].match(/^([^=]*)=(.*)$/) ?? []).slice(1);\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3g1MDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLG9GQUFpQjtBQUNqRDtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC94NTA5LmpzP2UwN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlg1MDkgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jbGFzcyBYNTA5IGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgLi4uaGFuZHNoYWtlRG9jLCBzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZTogeDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpIH07XG4gICAgfVxuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF1dGhDb250ZXh0LmNvbm5lY3Rpb247XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXV0aENvbnRleHQuY3JlZGVudGlhbHM7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF1dGhDb250ZXh0LnJlc3BvbnNlO1xuICAgICAgICBpZiAocmVzcG9uc2U/LnNwZWN1bGF0aXZlQXV0aGVudGljYXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKSgnJGV4dGVybmFsLiRjbWQnKSwgeDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuWDUwOSA9IFg1MDk7XG5mdW5jdGlvbiB4NTA5QXV0aGVudGljYXRlQ29tbWFuZChjcmVkZW50aWFscykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSB7IGF1dGhlbnRpY2F0ZTogMSwgbWVjaGFuaXNtOiAnTU9OR09EQi1YNTA5JyB9O1xuICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICBjb21tYW5kLnVzZXIgPSBjcmVkZW50aWFscy51c2VybmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1hbmQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD14NTA5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst namespace = (command) => command.ns;\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'partial',\n    'exhaust'\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(command.command);\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach(key => {\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return { explain: result };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for (const k in command.query) {\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for (const k in command) {\n        if (k === 'query')\n            continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/commands.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/commands.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.OpQueryResponse = exports.OpQueryRequest = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nclass OpQueryRequest {\n    constructor(databaseName, query, options) {\n        this.databaseName = databaseName;\n        this.query = query;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== 'string') {\n            throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpQueryResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.documents = new Array(0);\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            bsonSize =\n                this.data[this.index] |\n                    (this.data[this.index + 1] << 8) |\n                    (this.data[this.index + 2] << 16) |\n                    (this.data[this.index + 3] << 24);\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            }\n            else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [doc];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.OpQueryResponse = OpQueryResponse;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass OpMsgRequest {\n    constructor(databaseName, command, options) {\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.command.$db = databaseName;\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n            // Due to the strictness of the BSON libraries validation option we need this cast\n        };\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [doc];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return { utf8: false };\n        }\n        return { utf8: { writeErrors: false } };\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n    constructor(command, options) {\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [msgHeader, compressionDetails, compressedMessage];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest;\n//# sourceMappingURL=commands.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connect.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connect.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeSocket = exports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.performInitialHandshake = exports.makeConnection = exports.connect = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nasync function connect(options) {\n    let connection = null;\n    try {\n        const socket = await makeSocket(options);\n        connection = makeConnection(options, socket);\n        await performInitialHandshake(connection, options);\n        return connection;\n    }\n    catch (error) {\n        connection?.destroy();\n        throw error;\n    }\n}\nexports.connect = connect;\nfunction makeConnection(options, socket) {\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n        ConnectionType = connection_1.CryptoConnection;\n    }\n    return new ConnectionType(socket, options);\n}\nexports.makeConnection = makeConnection;\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !options.authProviders.getOrCreateProvider(credentials.mechanism)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n    // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n    // Once connection is established, command logging can log events (if enabled)\n    conn.established = true;\n}\nexports.performInitialHandshake = performInitialHandshake;\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const clientMetadata = await options.extendedMetadata;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: clientMetadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nasync function makeSocket(options) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const existingSocket = options.existingSocket;\n    let socket;\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        });\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    let cancellationHandler = null;\n    const { promise: connectedSocket, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n    if (existingSocket) {\n        resolve(socket);\n    }\n    else {\n        const connectEvent = useTLS ? 'secureConnect' : 'connect';\n        socket\n            .once(connectEvent, () => resolve(socket))\n            .once('error', error => reject(connectionFailureError('error', error)))\n            .once('timeout', () => reject(connectionFailureError('timeout')))\n            .once('close', () => reject(connectionFailureError('close')));\n        if (options.cancellationToken != null) {\n            cancellationHandler = () => reject(connectionFailureError('cancel'));\n            options.cancellationToken.once('cancel', cancellationHandler);\n        }\n    }\n    try {\n        socket = await connectedSocket;\n        return socket;\n    }\n    catch (error) {\n        socket.destroy();\n        throw error;\n    }\n    finally {\n        socket.setTimeout(0);\n        socket.removeAllListeners();\n        if (cancellationHandler != null) {\n            options.cancellationToken?.removeListener('cancel', cancellationHandler);\n        }\n    }\n}\nexports.makeSocket = makeSocket;\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nasync function makeSocks5Connection(options) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    const rawSocket = await makeSocket({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    });\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n    }\n    socks ??= loadSocks();\n    try {\n        // Then, establish the Socks5 proxy connection:\n        const { socket } = await socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        });\n        // Finally, now treat the resulting duplex stream as the\n        // socket over which we send and receive wire protocol messages:\n        return await makeSocket({\n            ...options,\n            existingSocket: socket,\n            proxyHost: undefined\n        });\n    }\n    catch (error) {\n        throw connectionFailureError('error', error);\n    }\n}\nfunction connectionFailureError(type, cause) {\n    switch (type) {\n        case 'error':\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause });\n        case 'timeout':\n            return new error_1.MongoNetworkTimeoutError('connection timed out');\n        case 'close':\n            return new error_1.MongoNetworkError('connection closed');\n        case 'cancel':\n            return new error_1.MongoNetworkError('connection establishment was cancelled');\n        default:\n            return new error_1.MongoNetworkError('unknown network error');\n    }\n}\n//# sourceMappingURL=connect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9jb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLGdDQUFnQyxHQUFHLGdDQUFnQyxHQUFHLGdDQUFnQyxHQUFHLCtCQUErQixHQUFHLHNCQUFzQixHQUFHLGVBQWU7QUFDeE0sWUFBWSxtQkFBTyxDQUFDLGdCQUFLO0FBQ3pCLFlBQVksbUJBQU8sQ0FBQyxnQkFBSztBQUN6QixvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBYztBQUMxQyxlQUFlLG1CQUFPLENBQUMseURBQVM7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsd0JBQXdCLG1CQUFPLENBQUMseUZBQXNCO0FBQ3RELG9CQUFvQixtQkFBTyxDQUFDLGlGQUFrQjtBQUM5QyxxQkFBcUIsbUJBQU8sQ0FBQyx5RUFBYztBQUMzQyxvQkFBb0IsbUJBQU8sQ0FBQyxtR0FBMkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHFCQUFxQiwrQkFBK0IscUNBQXFDLDREQUE0RCx3Q0FBd0MsV0FBVyx5Q0FBeUM7QUFDdFI7QUFDQTtBQUNBLGlDQUFpQyxxQkFBcUIsK0JBQStCLDBDQUEwQyw2REFBNkQsd0NBQXdDLFdBQVcseUNBQXlDO0FBQ3hSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLHNCQUFzQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsK0JBQStCO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG1CQUFtQixHQUFHLHFCQUFxQjtBQUM1RjtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsZ0RBQWdEO0FBQ25JO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsdUJBQXVCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsNEJBQTRCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRDQUE0QztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0csT0FBTztBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvY29ubmVjdC5qcz8xZjdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYWtlU29ja2V0ID0gZXhwb3J0cy5MRUdBTF9UQ1BfU09DS0VUX09QVElPTlMgPSBleHBvcnRzLkxFR0FMX1RMU19TT0NLRVRfT1BUSU9OUyA9IGV4cG9ydHMucHJlcGFyZUhhbmRzaGFrZURvY3VtZW50ID0gZXhwb3J0cy5wZXJmb3JtSW5pdGlhbEhhbmRzaGFrZSA9IGV4cG9ydHMubWFrZUNvbm5lY3Rpb24gPSBleHBvcnRzLmNvbm5lY3QgPSB2b2lkIDA7XG5jb25zdCBuZXQgPSByZXF1aXJlKFwibmV0XCIpO1xuY29uc3QgdGxzID0gcmVxdWlyZShcInRsc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi9kZXBzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoL2F1dGhfcHJvdmlkZXJcIik7XG5jb25zdCBwcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuL2F1dGgvcHJvdmlkZXJzXCIpO1xuY29uc3QgY29ubmVjdGlvbl8xID0gcmVxdWlyZShcIi4vY29ubmVjdGlvblwiKTtcbmNvbnN0IGNvbnN0YW50c18yID0gcmVxdWlyZShcIi4vd2lyZV9wcm90b2NvbC9jb25zdGFudHNcIik7XG5hc3luYyBmdW5jdGlvbiBjb25uZWN0KG9wdGlvbnMpIHtcbiAgICBsZXQgY29ubmVjdGlvbiA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gYXdhaXQgbWFrZVNvY2tldChvcHRpb25zKTtcbiAgICAgICAgY29ubmVjdGlvbiA9IG1ha2VDb25uZWN0aW9uKG9wdGlvbnMsIHNvY2tldCk7XG4gICAgICAgIGF3YWl0IHBlcmZvcm1Jbml0aWFsSGFuZHNoYWtlKGNvbm5lY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbm5lY3Rpb24/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuZXhwb3J0cy5jb25uZWN0ID0gY29ubmVjdDtcbmZ1bmN0aW9uIG1ha2VDb25uZWN0aW9uKG9wdGlvbnMsIHNvY2tldCkge1xuICAgIGxldCBDb25uZWN0aW9uVHlwZSA9IG9wdGlvbnMuY29ubmVjdGlvblR5cGUgPz8gY29ubmVjdGlvbl8xLkNvbm5lY3Rpb247XG4gICAgaWYgKG9wdGlvbnMuYXV0b0VuY3J5cHRlcikge1xuICAgICAgICBDb25uZWN0aW9uVHlwZSA9IGNvbm5lY3Rpb25fMS5DcnlwdG9Db25uZWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENvbm5lY3Rpb25UeXBlKHNvY2tldCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLm1ha2VDb25uZWN0aW9uID0gbWFrZUNvbm5lY3Rpb247XG5mdW5jdGlvbiBjaGVja1N1cHBvcnRlZFNlcnZlcihoZWxsbywgb3B0aW9ucykge1xuICAgIGNvbnN0IG1heFdpcmVWZXJzaW9uID0gTnVtYmVyKGhlbGxvLm1heFdpcmVWZXJzaW9uKTtcbiAgICBjb25zdCBtaW5XaXJlVmVyc2lvbiA9IE51bWJlcihoZWxsby5taW5XaXJlVmVyc2lvbik7XG4gICAgY29uc3Qgc2VydmVyVmVyc2lvbkhpZ2hFbm91Z2ggPSAhTnVtYmVyLmlzTmFOKG1heFdpcmVWZXJzaW9uKSAmJiBtYXhXaXJlVmVyc2lvbiA+PSBjb25zdGFudHNfMi5NSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTjtcbiAgICBjb25zdCBzZXJ2ZXJWZXJzaW9uTG93RW5vdWdoID0gIU51bWJlci5pc05hTihtaW5XaXJlVmVyc2lvbikgJiYgbWluV2lyZVZlcnNpb24gPD0gY29uc3RhbnRzXzIuTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT047XG4gICAgaWYgKHNlcnZlclZlcnNpb25IaWdoRW5vdWdoKSB7XG4gICAgICAgIGlmIChzZXJ2ZXJWZXJzaW9uTG93RW5vdWdoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlID0gYFNlcnZlciBhdCAke29wdGlvbnMuaG9zdEFkZHJlc3N9IHJlcG9ydHMgbWluaW11bSB3aXJlIHZlcnNpb24gJHtKU09OLnN0cmluZ2lmeShoZWxsby5taW5XaXJlVmVyc2lvbil9LCBidXQgdGhpcyB2ZXJzaW9uIG9mIHRoZSBOb2RlLmpzIERyaXZlciByZXF1aXJlcyBhdCBtb3N0ICR7Y29uc3RhbnRzXzIuTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT059IChNb25nb0RCICR7Y29uc3RhbnRzXzIuTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTn0pYDtcbiAgICAgICAgcmV0dXJuIG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlID0gYFNlcnZlciBhdCAke29wdGlvbnMuaG9zdEFkZHJlc3N9IHJlcG9ydHMgbWF4aW11bSB3aXJlIHZlcnNpb24gJHtKU09OLnN0cmluZ2lmeShoZWxsby5tYXhXaXJlVmVyc2lvbikgPz8gMH0sIGJ1dCB0aGlzIHZlcnNpb24gb2YgdGhlIE5vZGUuanMgRHJpdmVyIHJlcXVpcmVzIGF0IGxlYXN0ICR7Y29uc3RhbnRzXzIuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT059IChNb25nb0RCICR7Y29uc3RhbnRzXzIuTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTn0pYDtcbiAgICByZXR1cm4gbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IobWVzc2FnZSk7XG59XG5hc3luYyBmdW5jdGlvbiBwZXJmb3JtSW5pdGlhbEhhbmRzaGFrZShjb25uLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzO1xuICAgIGlmIChjcmVkZW50aWFscykge1xuICAgICAgICBpZiAoIShjcmVkZW50aWFscy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9ERUZBVUxUKSAmJlxuICAgICAgICAgICAgIW9wdGlvbnMuYXV0aFByb3ZpZGVycy5nZXRPckNyZWF0ZVByb3ZpZGVyKGNyZWRlbnRpYWxzLm1lY2hhbmlzbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEF1dGhNZWNoYW5pc20gJyR7Y3JlZGVudGlhbHMubWVjaGFuaXNtfScgbm90IHN1cHBvcnRlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGF1dGhDb250ZXh0ID0gbmV3IGF1dGhfcHJvdmlkZXJfMS5BdXRoQ29udGV4dChjb25uLCBjcmVkZW50aWFscywgb3B0aW9ucyk7XG4gICAgY29ubi5hdXRoQ29udGV4dCA9IGF1dGhDb250ZXh0O1xuICAgIGNvbnN0IGhhbmRzaGFrZURvYyA9IGF3YWl0IHByZXBhcmVIYW5kc2hha2VEb2N1bWVudChhdXRoQ29udGV4dCk7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVE9ETyhOT0RFLTUxNDEpOiBUaGUgb3B0aW9ucyBuZWVkIHRvIGJlIGZpbHRlcmVkIHByb3Blcmx5LCBDb25uZWN0aW9uIG9wdGlvbnMgZGlmZmVyIGZyb20gQ29tbWFuZCBvcHRpb25zXG4gICAgY29uc3QgaGFuZHNoYWtlT3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb25uZWN0VGltZW91dE1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBUaGUgaGFuZHNoYWtlIHRlY2huaWNhbGx5IGlzIGEgbW9uaXRvcmluZyBjaGVjaywgc28gaXRzIHNvY2tldCB0aW1lb3V0IHNob3VsZCBiZSBjb25uZWN0VGltZW91dE1TXG4gICAgICAgIGhhbmRzaGFrZU9wdGlvbnMuc29ja2V0VGltZW91dE1TID0gb3B0aW9ucy5jb25uZWN0VGltZW91dE1TO1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29ubi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKSgnYWRtaW4uJGNtZCcpLCBoYW5kc2hha2VEb2MsIGhhbmRzaGFrZU9wdGlvbnMpO1xuICAgIGlmICghKCdpc1dyaXRhYmxlUHJpbWFyeScgaW4gcmVzcG9uc2UpKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgaGVsbG8tc3R5bGUgcmVzcG9uc2UgZG9jdW1lbnQuXG4gICAgICAgIHJlc3BvbnNlLmlzV3JpdGFibGVQcmltYXJ5ID0gcmVzcG9uc2VbY29uc3RhbnRzXzEuTEVHQUNZX0hFTExPX0NPTU1BTkRdO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2UuaGVsbG9Paykge1xuICAgICAgICBjb25uLmhlbGxvT2sgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzdXBwb3J0ZWRTZXJ2ZXJFcnIgPSBjaGVja1N1cHBvcnRlZFNlcnZlcihyZXNwb25zZSwgb3B0aW9ucyk7XG4gICAgaWYgKHN1cHBvcnRlZFNlcnZlckVycikge1xuICAgICAgICB0aHJvdyBzdXBwb3J0ZWRTZXJ2ZXJFcnI7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLnNlcnZpY2VJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoJ0RyaXZlciBhdHRlbXB0ZWQgdG8gaW5pdGlhbGl6ZSBpbiBsb2FkIGJhbGFuY2luZyBtb2RlLCAnICtcbiAgICAgICAgICAgICAgICAnYnV0IHRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIG1vZGUuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTk9URTogVGhpcyBpcyBtZXRhZGF0YSBhdHRhY2hlZCB0byB0aGUgY29ubmVjdGlvbiB3aGlsZSBwb3J0aW5nIGF3YXkgZnJvbVxuICAgIC8vICAgICAgIGhhbmRzaGFrZSBiZWluZyBkb25lIGluIHRoZSBgU2VydmVyYCBjbGFzcy4gTGlrZWx5LCBpdCBzaG91bGQgYmVcbiAgICAvLyAgICAgICByZWxvY2F0ZWQsIG9yIGF0IHZlcnkgbGVhc3QgcmVzdHJ1Y3R1cmVkLlxuICAgIGNvbm4uaGVsbG8gPSByZXNwb25zZTtcbiAgICBjb25uLmxhc3RIZWxsb01TID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydDtcbiAgICBpZiAoIXJlc3BvbnNlLmFyYml0ZXJPbmx5ICYmIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIC8vIHN0b3JlIHRoZSByZXNwb25zZSBvbiBhdXRoIGNvbnRleHRcbiAgICAgICAgYXV0aENvbnRleHQucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRDcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzLnJlc29sdmVBdXRoTWVjaGFuaXNtKHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBvcHRpb25zLmF1dGhQcm92aWRlcnMuZ2V0T3JDcmVhdGVQcm92aWRlcihyZXNvbHZlZENyZWRlbnRpYWxzLm1lY2hhbmlzbSk7XG4gICAgICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYE5vIEF1dGhQcm92aWRlciBmb3IgJHtyZXNvbHZlZENyZWRlbnRpYWxzLm1lY2hhbmlzbX0gZGVmaW5lZC5gKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcHJvdmlkZXIuYXV0aChhdXRoQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLkhhbmRzaGFrZUVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGVycm9yXzEubmVlZHNSZXRyeWFibGVXcml0ZUxhYmVsKShlcnJvciwgcmVzcG9uc2UubWF4V2lyZVZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUmV0cnlhYmxlV3JpdGVFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29ubmVjdGlvbiBlc3RhYmxpc2htZW50IGlzIHNvY2tldCBjcmVhdGlvbiAodGNwIGhhbmRzaGFrZSwgdGxzIGhhbmRzaGFrZSwgTW9uZ29EQiBoYW5kc2hha2UgKHNhc2xTdGFydCwgc2FzbENvbnRpbnVlKSlcbiAgICAvLyBPbmNlIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQsIGNvbW1hbmQgbG9nZ2luZyBjYW4gbG9nIGV2ZW50cyAoaWYgZW5hYmxlZClcbiAgICBjb25uLmVzdGFibGlzaGVkID0gdHJ1ZTtcbn1cbmV4cG9ydHMucGVyZm9ybUluaXRpYWxIYW5kc2hha2UgPSBwZXJmb3JtSW5pdGlhbEhhbmRzaGFrZTtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVIYW5kc2hha2VEb2N1bWVudChhdXRoQ29udGV4dCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhdXRoQ29udGV4dC5vcHRpb25zO1xuICAgIGNvbnN0IGNvbXByZXNzb3JzID0gb3B0aW9ucy5jb21wcmVzc29ycyA/IG9wdGlvbnMuY29tcHJlc3NvcnMgOiBbXTtcbiAgICBjb25zdCB7IHNlcnZlckFwaSB9ID0gYXV0aENvbnRleHQuY29ubmVjdGlvbjtcbiAgICBjb25zdCBjbGllbnRNZXRhZGF0YSA9IGF3YWl0IG9wdGlvbnMuZXh0ZW5kZWRNZXRhZGF0YTtcbiAgICBjb25zdCBoYW5kc2hha2VEb2MgPSB7XG4gICAgICAgIFtzZXJ2ZXJBcGk/LnZlcnNpb24gfHwgb3B0aW9ucy5sb2FkQmFsYW5jZWQgPT09IHRydWUgPyAnaGVsbG8nIDogY29uc3RhbnRzXzEuTEVHQUNZX0hFTExPX0NPTU1BTkRdOiAxLFxuICAgICAgICBoZWxsb09rOiB0cnVlLFxuICAgICAgICBjbGllbnQ6IGNsaWVudE1ldGFkYXRhLFxuICAgICAgICBjb21wcmVzc2lvbjogY29tcHJlc3NvcnNcbiAgICB9O1xuICAgIGlmIChvcHRpb25zLmxvYWRCYWxhbmNlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBoYW5kc2hha2VEb2MubG9hZEJhbGFuY2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSBhdXRoQ29udGV4dC5jcmVkZW50aWFscztcbiAgICBpZiAoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLm1lY2hhbmlzbSA9PT0gcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0RFRkFVTFQgJiYgY3JlZGVudGlhbHMudXNlcm5hbWUpIHtcbiAgICAgICAgICAgIGhhbmRzaGFrZURvYy5zYXNsU3VwcG9ydGVkTWVjaHMgPSBgJHtjcmVkZW50aWFscy5zb3VyY2V9LiR7Y3JlZGVudGlhbHMudXNlcm5hbWV9YDtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXV0aENvbnRleHQub3B0aW9ucy5hdXRoUHJvdmlkZXJzLmdldE9yQ3JlYXRlUHJvdmlkZXIocHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTI1Nik7XG4gICAgICAgICAgICBpZiAoIXByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhdXRoIG1lY2hhbmlzbSBpcyBhbHdheXMgcHJlc2VudC5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBObyBBdXRoUHJvdmlkZXIgZm9yICR7cHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1NDUkFNX1NIQTI1Nn0gZGVmaW5lZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5wcmVwYXJlKGhhbmRzaGFrZURvYywgYXV0aENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXV0aENvbnRleHQub3B0aW9ucy5hdXRoUHJvdmlkZXJzLmdldE9yQ3JlYXRlUHJvdmlkZXIoY3JlZGVudGlhbHMubWVjaGFuaXNtKTtcbiAgICAgICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgTm8gQXV0aFByb3ZpZGVyIGZvciAke2NyZWRlbnRpYWxzLm1lY2hhbmlzbX0gZGVmaW5lZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvdmlkZXIucHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRzaGFrZURvYztcbn1cbmV4cG9ydHMucHJlcGFyZUhhbmRzaGFrZURvY3VtZW50ID0gcHJlcGFyZUhhbmRzaGFrZURvY3VtZW50O1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuTEVHQUxfVExTX1NPQ0tFVF9PUFRJT05TID0gW1xuICAgICdBTFBOUHJvdG9jb2xzJyxcbiAgICAnY2EnLFxuICAgICdjZXJ0JyxcbiAgICAnY2hlY2tTZXJ2ZXJJZGVudGl0eScsXG4gICAgJ2NpcGhlcnMnLFxuICAgICdjcmwnLFxuICAgICdlY2RoQ3VydmUnLFxuICAgICdrZXknLFxuICAgICdtaW5ESFNpemUnLFxuICAgICdwYXNzcGhyYXNlJyxcbiAgICAncGZ4JyxcbiAgICAncmVqZWN0VW5hdXRob3JpemVkJyxcbiAgICAnc2VjdXJlQ29udGV4dCcsXG4gICAgJ3NlY3VyZVByb3RvY29sJyxcbiAgICAnc2VydmVybmFtZScsXG4gICAgJ3Nlc3Npb24nXG5dO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuTEVHQUxfVENQX1NPQ0tFVF9PUFRJT05TID0gW1xuICAgICdmYW1pbHknLFxuICAgICdoaW50cycsXG4gICAgJ2xvY2FsQWRkcmVzcycsXG4gICAgJ2xvY2FsUG9ydCcsXG4gICAgJ2xvb2t1cCdcbl07XG5mdW5jdGlvbiBwYXJzZUNvbm5lY3RPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBjb25zdCBob3N0QWRkcmVzcyA9IG9wdGlvbnMuaG9zdEFkZHJlc3M7XG4gICAgaWYgKCFob3N0QWRkcmVzcylcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwiaG9zdEFkZHJlc3NcIiBpcyByZXF1aXJlZCcpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBleHBvcnRzLkxFR0FMX1RDUF9TT0NLRVRfT1BUSU9OUykge1xuICAgICAgICBpZiAob3B0aW9uc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaG9zdEFkZHJlc3Muc29ja2V0UGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzdWx0LnBhdGggPSBob3N0QWRkcmVzcy5zb2NrZXRQYXRoO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaG9zdEFkZHJlc3MuaG9zdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSBob3N0QWRkcmVzcy5ob3N0O1xuICAgICAgICByZXN1bHQucG9ydCA9IGhvc3RBZGRyZXNzLnBvcnQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gc2luY2Ugd2Ugc2V0IHVwIEhvc3RBZGRyZXNzZXNcbiAgICAgICAgLy8gQnV0IGlmIHdlIGRvbid0IHRocm93IGhlcmUgdGhlIHNvY2tldCBjb3VsZCBoYW5nIHVudGlsIHRpbWVvdXRcbiAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKGBVbmV4cGVjdGVkIEhvc3RBZGRyZXNzICR7SlNPTi5zdHJpbmdpZnkoaG9zdEFkZHJlc3MpfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlU3NsT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gcGFyc2VDb25uZWN0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAvLyBNZXJnZSBpbiB2YWxpZCBTU0wgb3B0aW9uc1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBleHBvcnRzLkxFR0FMX1RMU19TT0NLRVRfT1BUSU9OUykge1xuICAgICAgICBpZiAob3B0aW9uc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV4aXN0aW5nU29ja2V0KSB7XG4gICAgICAgIHJlc3VsdC5zb2NrZXQgPSBvcHRpb25zLmV4aXN0aW5nU29ja2V0O1xuICAgIH1cbiAgICAvLyBTZXQgZGVmYXVsdCBzbmkgc2VydmVybmFtZSB0byBiZSB0aGUgc2FtZSBhcyBob3N0XG4gICAgaWYgKHJlc3VsdC5zZXJ2ZXJuYW1lID09IG51bGwgJiYgcmVzdWx0Lmhvc3QgJiYgIW5ldC5pc0lQKHJlc3VsdC5ob3N0KSkge1xuICAgICAgICByZXN1bHQuc2VydmVybmFtZSA9IHJlc3VsdC5ob3N0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuYXN5bmMgZnVuY3Rpb24gbWFrZVNvY2tldChvcHRpb25zKSB7XG4gICAgY29uc3QgdXNlVExTID0gb3B0aW9ucy50bHMgPz8gZmFsc2U7XG4gICAgY29uc3Qgbm9EZWxheSA9IG9wdGlvbnMubm9EZWxheSA/PyB0cnVlO1xuICAgIGNvbnN0IGNvbm5lY3RUaW1lb3V0TVMgPSBvcHRpb25zLmNvbm5lY3RUaW1lb3V0TVMgPz8gMzAwMDA7XG4gICAgY29uc3QgZXhpc3RpbmdTb2NrZXQgPSBvcHRpb25zLmV4aXN0aW5nU29ja2V0O1xuICAgIGxldCBzb2NrZXQ7XG4gICAgaWYgKG9wdGlvbnMucHJveHlIb3N0ICE9IG51bGwpIHtcbiAgICAgICAgLy8gQ3VycmVudGx5LCBvbmx5IFNvY2tzNSBpcyBzdXBwb3J0ZWQuXG4gICAgICAgIHJldHVybiBtYWtlU29ja3M1Q29ubmVjdGlvbih7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgY29ubmVjdFRpbWVvdXRNUyAvLyBTaG91bGQgYWx3YXlzIGJlIHByZXNlbnQgZm9yIFNvY2tzNVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHVzZVRMUykge1xuICAgICAgICBjb25zdCB0bHNTb2NrZXQgPSB0bHMuY29ubmVjdChwYXJzZVNzbE9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgICBpZiAodHlwZW9mIHRsc1NvY2tldC5kaXNhYmxlUmVuZWdvdGlhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGxzU29ja2V0LmRpc2FibGVSZW5lZ290aWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgc29ja2V0ID0gdGxzU29ja2V0O1xuICAgIH1cbiAgICBlbHNlIGlmIChleGlzdGluZ1NvY2tldCkge1xuICAgICAgICAvLyBJbiB0aGUgVExTIGNhc2UsIHBhcnNlU3NsT3B0aW9ucygpIHNldHMgb3B0aW9ucy5zb2NrZXQgdG8gZXhpc3RpbmdTb2NrZXQsXG4gICAgICAgIC8vIHNvIHdlIG9ubHkgbmVlZCB0byBoYW5kbGUgdGhlIG5vbi1UTFMgY2FzZSBoZXJlICh3aGVyZSBleGlzdGluZ1NvY2tldFxuICAgICAgICAvLyBnaXZlcyB1cyBhbGwgd2UgbmVlZCBvdXQgb2YgdGhlIGJveCkuXG4gICAgICAgIHNvY2tldCA9IGV4aXN0aW5nU29ja2V0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc29ja2V0ID0gbmV0LmNyZWF0ZUNvbm5lY3Rpb24ocGFyc2VDb25uZWN0T3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuICAgIHNvY2tldC5zZXRLZWVwQWxpdmUodHJ1ZSwgMzAwMDAwKTtcbiAgICBzb2NrZXQuc2V0VGltZW91dChjb25uZWN0VGltZW91dE1TKTtcbiAgICBzb2NrZXQuc2V0Tm9EZWxheShub0RlbGF5KTtcbiAgICBsZXQgY2FuY2VsbGF0aW9uSGFuZGxlciA9IG51bGw7XG4gICAgY29uc3QgeyBwcm9taXNlOiBjb25uZWN0ZWRTb2NrZXQsIHJlc29sdmUsIHJlamVjdCB9ID0gKDAsIHV0aWxzXzEucHJvbWlzZVdpdGhSZXNvbHZlcnMpKCk7XG4gICAgaWYgKGV4aXN0aW5nU29ja2V0KSB7XG4gICAgICAgIHJlc29sdmUoc29ja2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3RFdmVudCA9IHVzZVRMUyA/ICdzZWN1cmVDb25uZWN0JyA6ICdjb25uZWN0JztcbiAgICAgICAgc29ja2V0XG4gICAgICAgICAgICAub25jZShjb25uZWN0RXZlbnQsICgpID0+IHJlc29sdmUoc29ja2V0KSlcbiAgICAgICAgICAgIC5vbmNlKCdlcnJvcicsIGVycm9yID0+IHJlamVjdChjb25uZWN0aW9uRmFpbHVyZUVycm9yKCdlcnJvcicsIGVycm9yKSkpXG4gICAgICAgICAgICAub25jZSgndGltZW91dCcsICgpID0+IHJlamVjdChjb25uZWN0aW9uRmFpbHVyZUVycm9yKCd0aW1lb3V0JykpKVxuICAgICAgICAgICAgLm9uY2UoJ2Nsb3NlJywgKCkgPT4gcmVqZWN0KGNvbm5lY3Rpb25GYWlsdXJlRXJyb3IoJ2Nsb3NlJykpKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2FuY2VsbGF0aW9uVG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgY2FuY2VsbGF0aW9uSGFuZGxlciA9ICgpID0+IHJlamVjdChjb25uZWN0aW9uRmFpbHVyZUVycm9yKCdjYW5jZWwnKSk7XG4gICAgICAgICAgICBvcHRpb25zLmNhbmNlbGxhdGlvblRva2VuLm9uY2UoJ2NhbmNlbCcsIGNhbmNlbGxhdGlvbkhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHNvY2tldCA9IGF3YWl0IGNvbm5lY3RlZFNvY2tldDtcbiAgICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgc29ja2V0LnNldFRpbWVvdXQoMCk7XG4gICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgaWYgKGNhbmNlbGxhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5jYW5jZWxsYXRpb25Ub2tlbj8ucmVtb3ZlTGlzdGVuZXIoJ2NhbmNlbCcsIGNhbmNlbGxhdGlvbkhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5tYWtlU29ja2V0ID0gbWFrZVNvY2tldDtcbmxldCBzb2NrcyA9IG51bGw7XG5mdW5jdGlvbiBsb2FkU29ja3MoKSB7XG4gICAgaWYgKHNvY2tzID09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc29ja3NJbXBvcnQgPSAoMCwgZGVwc18xLmdldFNvY2tzKSgpO1xuICAgICAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gc29ja3NJbXBvcnQpIHtcbiAgICAgICAgICAgIHRocm93IHNvY2tzSW1wb3J0LmtNb2R1bGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBzb2NrcyA9IHNvY2tzSW1wb3J0O1xuICAgIH1cbiAgICByZXR1cm4gc29ja3M7XG59XG5hc3luYyBmdW5jdGlvbiBtYWtlU29ja3M1Q29ubmVjdGlvbihvcHRpb25zKSB7XG4gICAgY29uc3QgaG9zdEFkZHJlc3MgPSB1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21Ib3N0UG9ydChvcHRpb25zLnByb3h5SG9zdCA/PyAnJywgLy8gcHJveHlIb3N0IGlzIGd1YXJhbnRlZWQgdG8gc2V0IGhlcmVcbiAgICBvcHRpb25zLnByb3h5UG9ydCA/PyAxMDgwKTtcbiAgICAvLyBGaXJzdCwgY29ubmVjdCB0byB0aGUgcHJveHkgc2VydmVyIGl0c2VsZjpcbiAgICBjb25zdCByYXdTb2NrZXQgPSBhd2FpdCBtYWtlU29ja2V0KHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaG9zdEFkZHJlc3MsXG4gICAgICAgIHRsczogZmFsc2UsXG4gICAgICAgIHByb3h5SG9zdDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgY29uc3QgZGVzdGluYXRpb24gPSBwYXJzZUNvbm5lY3RPcHRpb25zKG9wdGlvbnMpO1xuICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb24uaG9zdCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGRlc3RpbmF0aW9uLnBvcnQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0NhbiBvbmx5IG1ha2UgU29ja3M1IGNvbm5lY3Rpb25zIHRvIFRDUCBob3N0cycpO1xuICAgIH1cbiAgICBzb2NrcyA/Pz0gbG9hZFNvY2tzKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVGhlbiwgZXN0YWJsaXNoIHRoZSBTb2NrczUgcHJveHkgY29ubmVjdGlvbjpcbiAgICAgICAgY29uc3QgeyBzb2NrZXQgfSA9IGF3YWl0IHNvY2tzLlNvY2tzQ2xpZW50LmNyZWF0ZUNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgZXhpc3Rpbmdfc29ja2V0OiByYXdTb2NrZXQsXG4gICAgICAgICAgICB0aW1lb3V0OiBvcHRpb25zLmNvbm5lY3RUaW1lb3V0TVMsXG4gICAgICAgICAgICBjb21tYW5kOiAnY29ubmVjdCcsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgICAgICAgICAgIGhvc3Q6IGRlc3RpbmF0aW9uLmhvc3QsXG4gICAgICAgICAgICAgICAgcG9ydDogZGVzdGluYXRpb24ucG9ydFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3h5OiB7XG4gICAgICAgICAgICAgICAgLy8gaG9zdCBhbmQgcG9ydCBhcmUgaWdub3JlZCBiZWNhdXNlIHdlIHBhc3MgZXhpc3Rpbmdfc29ja2V0XG4gICAgICAgICAgICAgICAgaG9zdDogJ2lMb3ZlSmF2YVNjcmlwdCcsXG4gICAgICAgICAgICAgICAgcG9ydDogMCxcbiAgICAgICAgICAgICAgICB0eXBlOiA1LFxuICAgICAgICAgICAgICAgIHVzZXJJZDogb3B0aW9ucy5wcm94eVVzZXJuYW1lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogb3B0aW9ucy5wcm94eVBhc3N3b3JkIHx8IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gRmluYWxseSwgbm93IHRyZWF0IHRoZSByZXN1bHRpbmcgZHVwbGV4IHN0cmVhbSBhcyB0aGVcbiAgICAgICAgLy8gc29ja2V0IG92ZXIgd2hpY2ggd2Ugc2VuZCBhbmQgcmVjZWl2ZSB3aXJlIHByb3RvY29sIG1lc3NhZ2VzOlxuICAgICAgICByZXR1cm4gYXdhaXQgbWFrZVNvY2tldCh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgZXhpc3RpbmdTb2NrZXQ6IHNvY2tldCxcbiAgICAgICAgICAgIHByb3h5SG9zdDogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgY29ubmVjdGlvbkZhaWx1cmVFcnJvcignZXJyb3InLCBlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gY29ubmVjdGlvbkZhaWx1cmVFcnJvcih0eXBlLCBjYXVzZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3IoZXJyb3JfMS5Nb25nb0Vycm9yLmJ1aWxkRXJyb3JNZXNzYWdlKGNhdXNlKSwgeyBjYXVzZSB9KTtcbiAgICAgICAgY2FzZSAndGltZW91dCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yXzEuTW9uZ29OZXR3b3JrVGltZW91dEVycm9yKCdjb25uZWN0aW9uIHRpbWVkIG91dCcpO1xuICAgICAgICBjYXNlICdjbG9zZSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3IoJ2Nvbm5lY3Rpb24gY2xvc2VkJyk7XG4gICAgICAgIGNhc2UgJ2NhbmNlbCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3IoJ2Nvbm5lY3Rpb24gZXN0YWJsaXNobWVudCB3YXMgY2FuY2VsbGVkJyk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3IoJ3Vua25vd24gbmV0d29yayBlcnJvcicpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = exports.hasSessionSupport = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst on_data_1 = __webpack_require__(/*! ./wire_protocol/on_data */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.lastHelloMS = -1;\n        this.helloOk = false;\n        this.delayedTimeoutId = null;\n        /** Indicates that the connection (including underlying TCP socket) has been closed. */\n        this.closed = false;\n        this.clusterTime = null;\n        this.error = null;\n        this.dataEvents = null;\n        this.socket = stream;\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.mongoLogger = options.mongoLogger;\n        this.established = false;\n        this.description = new stream_description_1.StreamDescription(this.address, options);\n        this.generation = options.generation;\n        this.lastUseTime = (0, utils_1.now)();\n        this.messageStream = this.socket\n            .on('error', this.onError.bind(this))\n            .pipe(new SizedMessageTransform({ connection: this }))\n            .on('error', this.onError.bind(this));\n        this.socket.on('close', this.onClose.bind(this));\n        this.socket.on('timeout', this.onTimeout.bind(this));\n    }\n    get hello() {\n        return this.description.hello;\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this.description.receiveResponse(response);\n        Object.freeze(this.description);\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return (this.description != null &&\n            (0, utils_1.maxWireVersion)(this) >= 6 &&\n            !this.description.__nodejs_mock_server__);\n    }\n    get shouldEmitAndLogCommand() {\n        return ((this.monitorCommands ||\n            (this.established &&\n                !this.authContext?.reauthenticating &&\n                this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG))) ??\n            false);\n    }\n    markAvailable() {\n        this.lastUseTime = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    destroy() {\n        if (this.closed) {\n            return;\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(error) {\n        if (this.closed) {\n            return;\n        }\n        this.socket.destroy();\n        this.error = error;\n        this.dataEvents?.throw(error).then(undefined, () => null); // squash unhandled rejection\n        this.closed = true;\n        this.emit(Connection.CLOSE);\n    }\n    prepareCommand(db, command, options) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n            if (sessionError)\n                throw sessionError;\n        }\n        else if (session?.explicit) {\n            throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        // For standalone, drivers MUST NOT set $readPreference.\n        if (this.description.type !== common_1.ServerType.Standalone) {\n            if (!(0, shared_1.isSharded)(this) &&\n                !this.description.loadBalanced &&\n                this.supportsOpMsg &&\n                options.directConnection === true &&\n                readPreference?.mode === 'primary') {\n                // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n                // For all other types with a direct connection, if the read preference is 'primary'\n                // (driver sets 'primary' as default if no read preference is configured),\n                // the $readPreference MUST be set to 'primaryPreferred'\n                // to ensure that any server type can handle the request.\n                cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n            }\n            else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n                // When sending a read operation via OP_QUERY and the $readPreference modifier,\n                // the query MUST be provided using the $query modifier.\n                cmd = {\n                    $query: cmd,\n                    $readPreference: readPreference.toJSON()\n                };\n            }\n            else if (readPreference?.mode !== 'primary') {\n                // For mode 'primary', drivers MUST NOT set $readPreference.\n                // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n                // drivers MUST set $readPreference\n                cmd.$readPreference = readPreference.toJSON();\n            }\n        }\n        const commandOptions = {\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk(),\n            ...options\n        };\n        const message = this.supportsOpMsg\n            ? new commands_1.OpMsgRequest(db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n        return message;\n    }\n    async *sendWire(message, options) {\n        this.throwIfAborted();\n        if (typeof options.socketTimeoutMS === 'number') {\n            this.socket.setTimeout(options.socketTimeoutMS);\n        }\n        else if (this.socketTimeoutMS !== 0) {\n            this.socket.setTimeout(this.socketTimeoutMS);\n        }\n        try {\n            await this.writeCommand(message, {\n                agreedCompressor: this.description.compressor ?? 'none',\n                zlibCompressionLevel: this.description.zlibCompressionLevel\n            });\n            if (options.noResponse) {\n                yield { ok: 1 };\n                return;\n            }\n            this.throwIfAborted();\n            for await (const response of this.readMany()) {\n                this.socket.setTimeout(0);\n                response.parse(options);\n                const [document] = response.documents;\n                if (!Buffer.isBuffer(document)) {\n                    const { session } = options;\n                    if (session) {\n                        (0, sessions_1.updateSessionFromResponse)(session, document);\n                    }\n                    if (document.$clusterTime) {\n                        this.clusterTime = document.$clusterTime;\n                        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n                    }\n                }\n                yield document;\n                this.throwIfAborted();\n                if (typeof options.socketTimeoutMS === 'number') {\n                    this.socket.setTimeout(options.socketTimeoutMS);\n                }\n                else if (this.socketTimeoutMS !== 0) {\n                    this.socket.setTimeout(this.socketTimeoutMS);\n                }\n            }\n        }\n        finally {\n            this.socket.setTimeout(0);\n        }\n    }\n    async *sendCommand(ns, command, options = {}) {\n        const message = this.prepareCommand(ns.db, command, options);\n        let started = 0;\n        if (this.shouldEmitAndLogCommand) {\n            started = (0, utils_1.now)();\n            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n        }\n        let document;\n        try {\n            this.throwIfAborted();\n            for await (document of this.sendWire(message, options)) {\n                if (!Buffer.isBuffer(document) && document.writeConcernError) {\n                    throw new error_1.MongoWriteConcernError(document.writeConcernError, document);\n                }\n                if (!Buffer.isBuffer(document) &&\n                    (document.ok === 0 || document.$err || document.errmsg || document.code)) {\n                    throw new error_1.MongoServerError(document);\n                }\n                if (this.shouldEmitAndLogCommand) {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n                }\n                yield document;\n                this.throwIfAborted();\n            }\n        }\n        catch (error) {\n            if (this.shouldEmitAndLogCommand) {\n                if (error.name === 'MongoWriteConcernError') {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n                }\n                else {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n                }\n            }\n            throw error;\n        }\n    }\n    async command(ns, command, options = {}) {\n        this.throwIfAborted();\n        for await (const document of this.sendCommand(ns, command, options)) {\n            return document;\n        }\n        throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n    }\n    exhaustCommand(ns, command, options, replyListener) {\n        const exhaustLoop = async () => {\n            this.throwIfAborted();\n            for await (const reply of this.sendCommand(ns, command, options)) {\n                replyListener(undefined, reply);\n                this.throwIfAborted();\n            }\n            throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n        };\n        exhaustLoop().catch(replyListener);\n    }\n    throwIfAborted() {\n        if (this.error)\n            throw this.error;\n    }\n    /**\n     * @internal\n     *\n     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n     */\n    async writeCommand(command, options) {\n        const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n            ? command\n            : new commands_1.OpCompressedRequest(command, {\n                agreedCompressor: options.agreedCompressor ?? 'none',\n                zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n            });\n        const buffer = Buffer.concat(await finalCommand.toBin());\n        if (this.socket.write(buffer))\n            return;\n        return (0, utils_1.once)(this.socket, 'drain');\n    }\n    /**\n     * @internal\n     *\n     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n     * by calling `return` on the generator.\n     *\n     * Note that `for-await` loops call `return` automatically when the loop is exited.\n     */\n    async *readMany() {\n        try {\n            this.dataEvents = (0, on_data_1.onData)(this.messageStream);\n            for await (const message of this.dataEvents) {\n                const response = await (0, compression_1.decompressResponse)(message);\n                yield response;\n                if (!response.moreToCome) {\n                    return;\n                }\n            }\n        }\n        finally {\n            this.dataEvents = null;\n            this.throwIfAborted();\n        }\n    }\n}\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n    constructor({ connection }) {\n        super({ objectMode: false });\n        this.bufferPool = new utils_1.BufferPool();\n        this.connection = connection;\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.connection.delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n            this.connection.delayedTimeoutId = null;\n        }\n        this.bufferPool.append(chunk);\n        const sizeOfMessage = this.bufferPool.getInt32();\n        if (sizeOfMessage == null) {\n            return callback();\n        }\n        if (sizeOfMessage < 0) {\n            return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n        }\n        if (sizeOfMessage > this.bufferPool.length) {\n            return callback();\n        }\n        const message = this.bufferPool.read(sizeOfMessage);\n        return callback(null, message);\n    }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this.autoEncrypter = options.autoEncrypter;\n    }\n    /** @internal @override */\n    async command(ns, cmd, options) {\n        const { autoEncrypter } = this;\n        if (!autoEncrypter) {\n            throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption');\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return super.command(ns, cmd, options);\n        }\n        if (serverWireVersion < 8) {\n            throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n            encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n            for (const [offset, index] of indexKeys.entries()) {\n                // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                encrypted.indexes[offset].key = index;\n            }\n        }\n        const response = await super.command(ns, encrypted, options);\n        return autoEncrypter.decrypt(response, options);\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.options = Object.freeze({\n            connectionType: connection_1.Connection,\n            ...options,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    async checkOut() {\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const waitQueueMember = {\n            resolve,\n            reject,\n            timeoutController: new utils_1.TimeoutController(waitQueueTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n            waitQueueMember.reject(new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                ? this.waitQueueErrorMetrics()\n                : 'Timed out while checking out a connection from connection pool', this.address));\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n        return promise;\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]) {\n            if (connection.generation <= minGeneration) {\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n                this.checkIn(connection);\n            }\n        }\n    }\n    /** Close the pool */\n    close() {\n        if (this.closed) {\n            return;\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        for (const conn of this[kConnections]) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy();\n        }\n        this[kConnections].clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n    }\n    /**\n     * @internal\n     * Reauthenticate a connection\n     */\n    async reauthenticate(connection) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            throw new error_1.MongoRuntimeError('No auth context found on connection.');\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n        const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n        }\n        await provider.reauth(authContext);\n        return;\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        connection.destroy();\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken],\n            mongoLogger: this.mongoLogger,\n            authProviders: this[kServer].topology.client.s.authProviders\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions).then(connection => {\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy();\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            this[kPending]--;\n            callback(undefined, connection);\n        }, error => {\n            this[kPending]--;\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n            // TODO(NODE-5192): Remove this cast\n            error));\n            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n                error.connectionGeneration = connectOptions.generation;\n            }\n            callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.reject(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.resolve(connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', err));\n                        waitQueueMember.reject(err);\n                    }\n                    else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                        waitQueueMember.resolve(connection);\n                    }\n                    waitQueueMember.timeoutController.clear();\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool;\n//# sourceMappingURL=connection_pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/errors.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsaUNBQWlDLEdBQUcsd0JBQXdCLEdBQUcsdUJBQXVCO0FBQ3RILGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjLHNEQUFzRCwwQkFBMEI7QUFDbkksaURBQWlELDBCQUEwQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanM/MTgyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2FpdFF1ZXVlVGltZW91dEVycm9yID0gZXhwb3J0cy5Qb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yID0gZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gZXhwb3J0cy5Qb29sQ2xvc2VkRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGEgY29ubmVjdGlvbiBwb29sIGlzIGNsb3NlZFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbG9zZWRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIoJ0F0dGVtcHRlZCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIGZyb20gY2xvc2VkIGNvbm5lY3Rpb24gcG9vbCcpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBwb29sLmFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsb3NlZEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBvb2xDbG9zZWRFcnJvciA9IFBvb2xDbG9zZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhIGNvbm5lY3Rpb24gcG9vbCBpcyBjdXJyZW50bHkgcGF1c2VkXG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgUG9vbENsZWFyZWRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VcbiAgICAgICAgICAgID8gbWVzc2FnZVxuICAgICAgICAgICAgOiBgQ29ubmVjdGlvbiBwb29sIGZvciAke3Bvb2wuYWRkcmVzc30gd2FzIGNsZWFyZWQgYmVjYXVzZSBhbm90aGVyIG9wZXJhdGlvbiBmYWlsZWQgd2l0aDogXCIke3Bvb2wuc2VydmVyRXJyb3I/Lm1lc3NhZ2V9XCJgO1xuICAgICAgICBzdXBlcihlcnJvck1lc3NhZ2UsIHBvb2wuc2VydmVyRXJyb3IgPyB7IGNhdXNlOiBwb29sLnNlcnZlckVycm9yIH0gOiB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBwb29sLmFkZHJlc3M7XG4gICAgICAgIHRoaXMuYWRkRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5Qb29sUmVxdXN0ZWRSZXRyeSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsZWFyZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gUG9vbENsZWFyZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGEgY29ubmVjdGlvbiBwb29sIGhhcyBiZWVuIGNsZWFyZWQgYWZ0ZXIgdGhlIG1vbml0b3IgZm9yIHRoYXQgc2VydmVyIHRpbWVkIG91dC5cbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yIGV4dGVuZHMgUG9vbENsZWFyZWRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIocG9vbCwgYENvbm5lY3Rpb24gdG8gJHtwb29sLmFkZHJlc3N9IGludGVycnVwdGVkIGR1ZSB0byBzZXJ2ZXIgbW9uaXRvciB0aW1lb3V0YCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1Bvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciA9IFBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIGEgcmVxdWVzdCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIHRpbWVzIG91dFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFdhaXRRdWV1ZVRpbWVvdXRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFkZHJlc3MpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvV2FpdFF1ZXVlVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLldhaXRRdWV1ZVRpbWVvdXRFcnJvciA9IFdhaXRRdWV1ZVRpbWVvdXRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getFAASEnv = exports.addContainerMetadata = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(ssr)/./node_modules/mongodb/package.json\").version);\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\nlet dockerPromise;\n/** @internal */\nasync function getContainerMetadata() {\n    const containerMetadata = {};\n    dockerPromise ??= fs_1.promises.access('/.dockerenv').then(() => true, () => false);\n    const isDocker = await dockerPromise;\n    const { KUBERNETES_SERVICE_HOST = '' } = process.env;\n    const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n    if (isDocker)\n        containerMetadata.runtime = 'docker';\n    if (isKubernetes)\n        containerMetadata.orchestrator = 'kubernetes';\n    return containerMetadata;\n}\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */\nasync function addContainerMetadata(originalMetadata) {\n    const containerMetadata = await getContainerMetadata();\n    if (Object.keys(containerMetadata).length === 0)\n        return originalMetadata;\n    const extendedMetadata = new LimitedSizeDocument(512);\n    const extendedEnvMetadata = { ...originalMetadata?.env, container: containerMetadata };\n    for (const [key, val] of Object.entries(originalMetadata)) {\n        if (key !== 'env') {\n            extendedMetadata.ifItFitsItSits(key, val);\n        }\n        else {\n            if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {\n                // add in old data if newer / extended metadata does not fit\n                extendedMetadata.ifItFitsItSits('env', val);\n            }\n        }\n    }\n    if (!('env' in originalMetadata)) {\n        extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);\n    }\n    return extendedMetadata.toObject();\n}\nexports.addContainerMetadata = addContainerMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/metrics.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/metrics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\n//# sourceMappingURL=metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixZQUFZO0FBQ3hDLDhDQUE4Qyx1QkFBdUI7QUFDckUsbURBQW1ELG9CQUFvQjtBQUN2RSx1REFBdUQsc0JBQXNCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvbWV0cmljcy5qcz9iOTI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0aW9uUG9vbE1ldHJpY3MgPSB2b2lkIDA7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb25uZWN0aW9uUG9vbE1ldHJpY3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMub3RoZXJDb25uZWN0aW9ucyA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hcmsgYSBjb25uZWN0aW9uIGFzIHBpbm5lZCBmb3IgYSBzcGVjaWZpYyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgbWFya1Bpbm5lZChwaW5UeXBlKSB7XG4gICAgICAgIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOKSB7XG4gICAgICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUikge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zICs9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5tYXJrIGEgY29ubmVjdGlvbiBhcyBwaW5uZWQgZm9yIGFuIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBtYXJrVW5waW5uZWQocGluVHlwZSkge1xuICAgICAgICBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLlRYTikge1xuICAgICAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5DVVJTT1IpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3RoZXJDb25uZWN0aW9ucyAtPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY21hcCBtZXRyaWNzIGFzIGEgc3RyaW5nLlxuICAgICAqL1xuICAgIGluZm8obWF4UG9vbFNpemUpIHtcbiAgICAgICAgcmV0dXJuICgnVGltZWQgb3V0IHdoaWxlIGNoZWNraW5nIG91dCBhIGNvbm5lY3Rpb24gZnJvbSBjb25uZWN0aW9uIHBvb2w6ICcgK1xuICAgICAgICAgICAgYG1heFBvb2xTaXplOiAke21heFBvb2xTaXplfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IGN1cnNvcnM6ICR7dGhpcy5jdXJzb3JDb25uZWN0aW9uc30sIGAgK1xuICAgICAgICAgICAgYGNvbm5lY3Rpb25zIGluIHVzZSBieSB0cmFuc2FjdGlvbnM6ICR7dGhpcy50eG5Db25uZWN0aW9uc30sIGAgK1xuICAgICAgICAgICAgYGNvbm5lY3Rpb25zIGluIHVzZSBieSBvdGhlciBvcGVyYXRpb25zOiAke3RoaXMub3RoZXJDb25uZWN0aW9uc31gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIG1ldHJpY3MgdG8gdGhlIGluaXRpYWwgdmFsdWVzLlxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMub3RoZXJDb25uZWN0aW9ucyA9IDA7XG4gICAgfVxufVxuQ29ubmVjdGlvblBvb2xNZXRyaWNzLlRYTiA9ICd0eG4nO1xuQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUiA9ICdjdXJzb3InO1xuQ29ubmVjdGlvblBvb2xNZXRyaWNzLk9USEVSID0gJ290aGVyJztcbmV4cG9ydHMuQ29ubmVjdGlvblBvb2xNZXRyaWNzID0gQ29ubmVjdGlvblBvb2xNZXRyaWNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/stream_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if ('connectionId' in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        }\n        else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */\n    parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId)\n            ? serverConnectionId.toBigInt()\n            : // @ts-expect-error: Doubles are coercible to number\n                BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGVBQWUsbUJBQU8sQ0FBQyx5REFBUztBQUNoQyxpQkFBaUIsbUJBQU8sQ0FBQyx1RUFBZ0I7QUFDekMsNkJBQTZCLG1CQUFPLENBQUMsK0ZBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanM/MDdiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtRGVzY3JpcHRpb24gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL3NkYW0vY29tbW9uXCIpO1xuY29uc3Qgc2VydmVyX2Rlc2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9zZXJ2ZXJfZGVzY3JpcHRpb25cIik7XG5jb25zdCBSRVNQT05TRV9GSUVMRFMgPSBbXG4gICAgJ21pbldpcmVWZXJzaW9uJyxcbiAgICAnbWF4V2lyZVZlcnNpb24nLFxuICAgICdtYXhCc29uT2JqZWN0U2l6ZScsXG4gICAgJ21heE1lc3NhZ2VTaXplQnl0ZXMnLFxuICAgICdtYXhXcml0ZUJhdGNoU2l6ZScsXG4gICAgJ2xvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMnXG5dO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIFN0cmVhbURlc2NyaXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaGVsbG8gPSBudWxsO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLnR5cGUgPSBjb21tb25fMS5TZXJ2ZXJUeXBlLlVua25vd247XG4gICAgICAgIHRoaXMubWluV2lyZVZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4QnNvbk9iamVjdFNpemUgPSAxNjc3NzIxNjtcbiAgICAgICAgdGhpcy5tYXhNZXNzYWdlU2l6ZUJ5dGVzID0gNDgwMDAwMDA7XG4gICAgICAgIHRoaXMubWF4V3JpdGVCYXRjaFNpemUgPSAxMDAwMDA7XG4gICAgICAgIHRoaXMubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcyA9IG9wdGlvbnM/LmxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXM7XG4gICAgICAgIHRoaXMubG9hZEJhbGFuY2VkID0gISFvcHRpb25zPy5sb2FkQmFsYW5jZWQ7XG4gICAgICAgIHRoaXMuY29tcHJlc3NvcnMgPVxuICAgICAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLmNvbXByZXNzb3JzICYmIEFycmF5LmlzQXJyYXkob3B0aW9ucy5jb21wcmVzc29ycylcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuY29tcHJlc3NvcnNcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICB0aGlzLnNlcnZlckNvbm5lY3Rpb25JZCA9IG51bGw7XG4gICAgfVxuICAgIHJlY2VpdmVSZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVsbG8gPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy50eXBlID0gKDAsIHNlcnZlcl9kZXNjcmlwdGlvbl8xLnBhcnNlU2VydmVyVHlwZSkocmVzcG9uc2UpO1xuICAgICAgICBpZiAoJ2Nvbm5lY3Rpb25JZCcgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VydmVyQ29ubmVjdGlvbklkID0gdGhpcy5wYXJzZVNlcnZlckNvbm5lY3Rpb25JRChyZXNwb25zZS5jb25uZWN0aW9uSWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJDb25uZWN0aW9uSWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgUkVTUE9OU0VfRklFTERTKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbZmllbGRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ZpZWxkXSA9IHJlc3BvbnNlW2ZpZWxkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3RpbmcgY2FzZVxuICAgICAgICAgICAgaWYgKCdfX25vZGVqc19tb2NrX3NlcnZlcl9fJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19ub2RlanNfbW9ja19zZXJ2ZXJfXyA9IHJlc3BvbnNlWydfX25vZGVqc19tb2NrX3NlcnZlcl9fJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlLmNvbXByZXNzaW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXByZXNzb3IgPSB0aGlzLmNvbXByZXNzb3JzLmZpbHRlcihjID0+IHJlc3BvbnNlLmNvbXByZXNzaW9uPy5pbmNsdWRlcyhjKSlbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogQGludGVybmFsICovXG4gICAgcGFyc2VTZXJ2ZXJDb25uZWN0aW9uSUQoc2VydmVyQ29ubmVjdGlvbklkKSB7XG4gICAgICAgIC8vIENvbm5lY3Rpb24gaWRzIGFyZSBhbHdheXMgaW50ZWdyYWwsIHNvIGl0J3Mgc2FmZSB0byBjb2VyY2UgZG91YmxlcyBhcyB3ZWxsIGFzXG4gICAgICAgIC8vIGFueSBpbnRlZ3JhbCB0eXBlLlxuICAgICAgICByZXR1cm4gYnNvbl8xLkxvbmcuaXNMb25nKHNlcnZlckNvbm5lY3Rpb25JZClcbiAgICAgICAgICAgID8gc2VydmVyQ29ubmVjdGlvbklkLnRvQmlnSW50KClcbiAgICAgICAgICAgIDogLy8gQHRzLWV4cGVjdC1lcnJvcjogRG91YmxlcyBhcmUgY29lcmNpYmxlIHRvIG51bWJlclxuICAgICAgICAgICAgICAgIEJpZ0ludChzZXJ2ZXJDb25uZWN0aW9uSWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RyZWFtRGVzY3JpcHRpb24gPSBTdHJlYW1EZXNjcmlwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbV9kZXNjcmlwdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decompressResponse = exports.compressCommand = exports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst commands_1 = __webpack_require__(/*! ../commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */\nasync function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: description.agreedCompressor ?? 'none',\n            zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n        });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\nexports.compressCommand = compressCommand;\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */\nasync function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n    }\n    return new ResponseType(message, header, messageBody);\n}\nexports.decompressResponse = decompressResponse;\n//# sourceMappingURL=compression.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '3.6';\nexports.MAX_SUPPORTED_SERVER_VERSION = '7.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 6;\nexports.MAX_SUPPORTED_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsdUNBQXVDLEdBQUcscUNBQXFDLEdBQUcsa0NBQWtDLEdBQUcsa0NBQWtDLEdBQUcsb0NBQW9DLEdBQUcsb0NBQW9DO0FBQ2xYLG9DQUFvQztBQUNwQyxvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckMsdUNBQXVDO0FBQ3ZDLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIscUJBQXFCO0FBQ3JCLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzLmpzP2RmOTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9QX01TRyA9IGV4cG9ydHMuT1BfQ09NUFJFU1NFRCA9IGV4cG9ydHMuT1BfREVMRVRFID0gZXhwb3J0cy5PUF9RVUVSWSA9IGV4cG9ydHMuT1BfSU5TRVJUID0gZXhwb3J0cy5PUF9VUERBVEUgPSBleHBvcnRzLk9QX1JFUExZID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1NFUlZFUl9WRVJTSU9OID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gdm9pZCAwO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gJzMuNic7XG5leHBvcnRzLk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSAnNy4wJztcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSA2O1xuZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IDIxO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1dJUkVfVkVSU0lPTiA9IDIxO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1FFX1NFUlZFUl9WRVJTSU9OID0gJzcuMCc7XG5leHBvcnRzLk9QX1JFUExZID0gMTtcbmV4cG9ydHMuT1BfVVBEQVRFID0gMjAwMTtcbmV4cG9ydHMuT1BfSU5TRVJUID0gMjAwMjtcbmV4cG9ydHMuT1BfUVVFUlkgPSAyMDA0O1xuZXhwb3J0cy5PUF9ERUxFVEUgPSAyMDA2O1xuZXhwb3J0cy5PUF9DT01QUkVTU0VEID0gMjAxMjtcbmV4cG9ydHMuT1BfTVNHID0gMjAxMztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.onData = void 0;\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * onData is adapted from Node.js' events.on helper\n * https://nodejs.org/api/events.html#eventsonemitter-eventname-options\n *\n * Returns an AsyncIterator that iterates each 'data' event emitted from emitter.\n * It will reject upon an error event.\n */\nfunction onData(emitter) {\n    // Setup pending events and pending promise lists\n    /**\n     * When the caller has not yet called .next(), we store the\n     * value from the event in this list. Next time they call .next()\n     * we pull the first value out of this list and resolve a promise with it.\n     */\n    const unconsumedEvents = new utils_1.List();\n    /**\n     * When there has not yet been an event, a new promise will be created\n     * and implicitly stored in this list. When an event occurs we take the first\n     * promise in this list and resolve it.\n     */\n    const unconsumedPromises = new utils_1.List();\n    /**\n     * Stored an error created by an error event.\n     * This error will turn into a rejection for the subsequent .next() call\n     */\n    let error = null;\n    /** Set to true only after event listeners have been removed. */\n    let finished = false;\n    const iterator = {\n        next() {\n            // First, we consume all unread events\n            const value = unconsumedEvents.shift();\n            if (value != null) {\n                return Promise.resolve({ value, done: false });\n            }\n            // Then we error, if an error happened\n            // This happens one time if at all, because after 'error'\n            // we stop listening\n            if (error != null) {\n                const p = Promise.reject(error);\n                // Only the first element errors\n                error = null;\n                return p;\n            }\n            // If the iterator is finished, resolve to done\n            if (finished)\n                return closeHandler();\n            // Wait until an event happens\n            const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n            unconsumedPromises.push({ resolve, reject });\n            return promise;\n        },\n        return() {\n            return closeHandler();\n        },\n        throw(err) {\n            errorHandler(err);\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        }\n    };\n    // Adding event handlers\n    emitter.on('data', eventHandler);\n    emitter.on('error', errorHandler);\n    return iterator;\n    function eventHandler(value) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.resolve({ value, done: false });\n        else\n            unconsumedEvents.push(value);\n    }\n    function errorHandler(err) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.reject(err);\n        else\n            error = err;\n        void closeHandler();\n    }\n    function closeHandler() {\n        // Adding event handlers\n        emitter.off('data', eventHandler);\n        emitter.off('error', errorHandler);\n        finished = true;\n        const doneResult = { value: undefined, done: finished };\n        for (const promise of unconsumedPromises) {\n            promise.resolve(doneResult);\n        }\n        return Promise.resolve(doneResult);\n    }\n}\nexports.onData = onData;\n//# sourceMappingURL=on_data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL29uX2RhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxvQkFBb0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0Msc0NBQXNDLGlCQUFpQjtBQUN2RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQ0FBcUMsOEJBQThCO0FBQ25FLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL29uX2RhdGEuanM/NjkyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25EYXRhID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbi8qKlxuICogb25EYXRhIGlzIGFkYXB0ZWQgZnJvbSBOb2RlLmpzJyBldmVudHMub24gaGVscGVyXG4gKiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c29uZW1pdHRlci1ldmVudG5hbWUtb3B0aW9uc1xuICpcbiAqIFJldHVybnMgYW4gQXN5bmNJdGVyYXRvciB0aGF0IGl0ZXJhdGVzIGVhY2ggJ2RhdGEnIGV2ZW50IGVtaXR0ZWQgZnJvbSBlbWl0dGVyLlxuICogSXQgd2lsbCByZWplY3QgdXBvbiBhbiBlcnJvciBldmVudC5cbiAqL1xuZnVuY3Rpb24gb25EYXRhKGVtaXR0ZXIpIHtcbiAgICAvLyBTZXR1cCBwZW5kaW5nIGV2ZW50cyBhbmQgcGVuZGluZyBwcm9taXNlIGxpc3RzXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY2FsbGVyIGhhcyBub3QgeWV0IGNhbGxlZCAubmV4dCgpLCB3ZSBzdG9yZSB0aGVcbiAgICAgKiB2YWx1ZSBmcm9tIHRoZSBldmVudCBpbiB0aGlzIGxpc3QuIE5leHQgdGltZSB0aGV5IGNhbGwgLm5leHQoKVxuICAgICAqIHdlIHB1bGwgdGhlIGZpcnN0IHZhbHVlIG91dCBvZiB0aGlzIGxpc3QgYW5kIHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXQuXG4gICAgICovXG4gICAgY29uc3QgdW5jb25zdW1lZEV2ZW50cyA9IG5ldyB1dGlsc18xLkxpc3QoKTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZXJlIGhhcyBub3QgeWV0IGJlZW4gYW4gZXZlbnQsIGEgbmV3IHByb21pc2Ugd2lsbCBiZSBjcmVhdGVkXG4gICAgICogYW5kIGltcGxpY2l0bHkgc3RvcmVkIGluIHRoaXMgbGlzdC4gV2hlbiBhbiBldmVudCBvY2N1cnMgd2UgdGFrZSB0aGUgZmlyc3RcbiAgICAgKiBwcm9taXNlIGluIHRoaXMgbGlzdCBhbmQgcmVzb2x2ZSBpdC5cbiAgICAgKi9cbiAgICBjb25zdCB1bmNvbnN1bWVkUHJvbWlzZXMgPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgLyoqXG4gICAgICogU3RvcmVkIGFuIGVycm9yIGNyZWF0ZWQgYnkgYW4gZXJyb3IgZXZlbnQuXG4gICAgICogVGhpcyBlcnJvciB3aWxsIHR1cm4gaW50byBhIHJlamVjdGlvbiBmb3IgdGhlIHN1YnNlcXVlbnQgLm5leHQoKSBjYWxsXG4gICAgICovXG4gICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAvKiogU2V0IHRvIHRydWUgb25seSBhZnRlciBldmVudCBsaXN0ZW5lcnMgaGF2ZSBiZWVuIHJlbW92ZWQuICovXG4gICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCwgd2UgY29uc3VtZSBhbGwgdW5yZWFkIGV2ZW50c1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB1bmNvbnN1bWVkRXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGVuIHdlIGVycm9yLCBpZiBhbiBlcnJvciBoYXBwZW5lZFxuICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIG9uZSB0aW1lIGlmIGF0IGFsbCwgYmVjYXVzZSBhZnRlciAnZXJyb3InXG4gICAgICAgICAgICAvLyB3ZSBzdG9wIGxpc3RlbmluZ1xuICAgICAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGVsZW1lbnQgZXJyb3JzXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCByZXNvbHZlIHRvIGRvbmVcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VIYW5kbGVyKCk7XG4gICAgICAgICAgICAvLyBXYWl0IHVudGlsIGFuIGV2ZW50IGhhcHBlbnNcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0IH0gPSAoMCwgdXRpbHNfMS5wcm9taXNlV2l0aFJlc29sdmVycykoKTtcbiAgICAgICAgICAgIHVuY29uc3VtZWRQcm9taXNlcy5wdXNoKHsgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHJldHVybigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZUhhbmRsZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhyb3coZXJyKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZGluZyBldmVudCBoYW5kbGVyc1xuICAgIGVtaXR0ZXIub24oJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgIGVtaXR0ZXIub24oJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgZnVuY3Rpb24gZXZlbnRIYW5kbGVyKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB1bmNvbnN1bWVkUHJvbWlzZXMuc2hpZnQoKTtcbiAgICAgICAgaWYgKHByb21pc2UgIT0gbnVsbClcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZSh7IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdW5jb25zdW1lZEV2ZW50cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycikge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdW5jb25zdW1lZFByb21pc2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwcm9taXNlICE9IG51bGwpXG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgdm9pZCBjbG9zZUhhbmRsZXIoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VIYW5kbGVyKCkge1xuICAgICAgICAvLyBBZGRpbmcgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgZW1pdHRlci5vZmYoJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgICAgICBlbWl0dGVyLm9mZignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGRvbmVSZXN1bHQgPSB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IGZpbmlzaGVkIH07XG4gICAgICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiB1bmNvbnN1bWVkUHJvbWlzZXMpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShkb25lUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRvbmVSZXN1bHQpO1xuICAgIH1cbn1cbmV4cG9ydHMub25EYXRhID0gb25EYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25fZGF0YS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSharded = exports.getReadPreference = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference.\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    // happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded;\n//# sourceMappingURL=shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyx5QkFBeUI7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsMEJBQTBCLG1CQUFPLENBQUMsa0ZBQXVCO0FBQ3pELGlCQUFpQixtQkFBTyxDQUFDLDBFQUFtQjtBQUM1QywrQkFBK0IsbUJBQU8sQ0FBQyxzR0FBaUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcz8wM2M2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1NoYXJkZWQgPSBleHBvcnRzLmdldFJlYWRQcmVmZXJlbmNlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uLy4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL3NkYW0vY29tbW9uXCIpO1xuY29uc3QgdG9wb2xvZ3lfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9zZGFtL3RvcG9sb2d5X2Rlc2NyaXB0aW9uXCIpO1xuZnVuY3Rpb24gZ2V0UmVhZFByZWZlcmVuY2Uob3B0aW9ucykge1xuICAgIC8vIERlZmF1bHQgdG8gY29tbWFuZCB2ZXJzaW9uIG9mIHRoZSByZWFkUHJlZmVyZW5jZS5cbiAgICBsZXQgcmVhZFByZWZlcmVuY2UgPSBvcHRpb25zPy5yZWFkUHJlZmVyZW5jZSA/PyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuICAgIGlmICh0eXBlb2YgcmVhZFByZWZlcmVuY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlYWRQcmVmZXJlbmNlID0gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UuZnJvbVN0cmluZyhyZWFkUHJlZmVyZW5jZSk7XG4gICAgfVxuICAgIGlmICghKHJlYWRQcmVmZXJlbmNlIGluc3RhbmNlb2YgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcInJlYWRQcmVmZXJlbmNlXCIgbXVzdCBiZSBhIFJlYWRQcmVmZXJlbmNlIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIHJldHVybiByZWFkUHJlZmVyZW5jZTtcbn1cbmV4cG9ydHMuZ2V0UmVhZFByZWZlcmVuY2UgPSBnZXRSZWFkUHJlZmVyZW5jZTtcbmZ1bmN0aW9uIGlzU2hhcmRlZCh0b3BvbG9neU9yU2VydmVyKSB7XG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24udHlwZSA9PT0gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgaXMgaW5jcmVkaWJseSBpbmVmZmljaWVudCwgYW5kIHNob3VsZCBiZSByZW1vdmVkIG9uY2UgY29tbWFuZCBjb25zdHJ1Y3Rpb25cbiAgICAvLyBoYXBwZW5zIGJhc2VkIG9uIGBTZXJ2ZXJgIG5vdCBgVG9wb2xvZ3lgLlxuICAgIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gaW5zdGFuY2VvZiB0b3BvbG9neV9kZXNjcmlwdGlvbl8xLlRvcG9sb2d5RGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IEFycmF5LmZyb20odG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKTtcbiAgICAgICAgcmV0dXJuIHNlcnZlcnMuc29tZSgoc2VydmVyKSA9PiBzZXJ2ZXIudHlwZSA9PT0gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzU2hhcmRlZCA9IGlzU2hhcmRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/collection.js":
/*!************************************************!*\
  !*** ./node_modules/mongodb/lib/collection.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst count_documents_1 = __webpack_require__(/*! ./operations/count_documents */ \"(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(ssr)/./node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/connection_string.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/connection_string.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(ssr)/./node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst monitor_1 = __webpack_require__(/*! ./sdam/monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n    }\n    // Asynchronously start TXT resolution so that we do not have to wait until\n    // the SRV record is resolved before starting a second DNS query.\n    const lookupAddress = options.srvHost;\n    const txtResolutionPromise = dns.promises.resolveTxt(lookupAddress);\n    txtResolutionPromise.catch(() => {\n        /* rejections will be handled later */\n    });\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n        }\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Use the result of resolving the TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await txtResolutionPromise;\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath,\n            mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n            mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).catch(() => {\n        /* rejections will be handled later */\n    });\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverMonitoringMode: {\n        default: 'auto',\n        transform({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    timeoutMS: {\n        type: 'uint'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    // MongoLogger\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogPath: {\n        transform({ values: [value] }) {\n            if (!((typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n                (value &&\n                    typeof value === 'object' &&\n                    'write' in value &&\n                    typeof value.write === 'function'))) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogComponentSeverities: {\n        transform({ values: [value] }) {\n            if (typeof value !== 'object' || !value) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n            }\n            for (const [k, v] of Object.entries(value)) {\n                if (typeof v !== 'string' || typeof k !== 'string') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n                }\n                if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n                }\n                if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n                    throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n                }\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogMaxDocumentLength: { type: 'uint' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([\n    Symbol.for('@@mdb.skipPingOnConnect'),\n    Symbol.for('@@mdb.enableMongoLogger'),\n    Symbol.for('@@mdb.internalLoggerConfig')\n]);\n//# sourceMappingURL=connection_string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/constants.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.WAITING_FOR_SUITABLE_SERVER = exports.SERVER_SELECTION_SUCCEEDED = exports.SERVER_SELECTION_FAILED = exports.SERVER_SELECTION_STARTED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = exports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @internal */\nexports.SERVER_OPENING = 'serverOpening';\n/** @internal */\nexports.SERVER_CLOSED = 'serverClosed';\n/** @internal */\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @internal */\nexports.TOPOLOGY_OPENING = 'topologyOpening';\n/** @internal */\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @internal */\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.SERVER_SELECTION_STARTED = 'serverSelectionStarted';\n/** @internal */\nexports.SERVER_SELECTION_FAILED = 'serverSelectionFailed';\n/** @internal */\nexports.SERVER_SELECTION_SUCCEEDED = 'serverSelectionSucceeded';\n/** @internal */\nexports.WAITING_FOR_SUITABLE_SERVER = 'waitingForSuitableServer';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\n/** @internal */\nexports.COMMAND_STARTED = 'commandStarted';\n/** @internal */\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\n/** @internal */\nexports.COMMAND_FAILED = 'commandFailed';\n/** @internal */\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @internal */\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @internal */\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this[kClient] = client;\n        this[kNamespace] = namespace;\n        this[kId] = null;\n        this[kDocuments] = new utils_1.List();\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        }\n        else {\n            this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\n        }\n    }\n    get id() {\n        return this[kId] ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */\n    get client() {\n        return this[kClient];\n    }\n    /** @internal */\n    get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */\n    get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return !!this[kClient].topology?.loadBalanced;\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this[kDocuments].shift();\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                const document = await this.next();\n                // Intentional strict null check, because users can map cursors to falsey values.\n                // We allow mapping to all values except for null.\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    if (!this.closed) {\n                        const message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                        await cleanupCursor(this, { needsToEmitClosed: true }).catch(() => null);\n                        throw new error_1.MongoAPIError(message);\n                    }\n                    break;\n                }\n                yield document;\n                if (this[kId] === bson_1.Long.ZERO) {\n                    // Cursor exhausted\n                    break;\n                }\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.closed) {\n                await this.close().catch(() => null);\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            const transformedStream = readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n            // Bubble errors to transformed stream, because otherwise no way\n            // to handle this error.\n            readable.on('error', err => transformedStream.emit('error', err));\n            return transformedStream;\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this[kDocuments].length !== 0) {\n            return true;\n        }\n        const doc = await next(this, { blocking: true, transform: false });\n        if (doc) {\n            this[kDocuments].unshift(doc);\n            return true;\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: true, transform: true });\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: false, transform: true });\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    async close() {\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        await cleanupCursor(this, { needsToEmitClosed });\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        const array = [];\n        for await (const document of this) {\n            array.push(document);\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = null;\n        this[kDocuments].clear();\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().catch(() => null);\n                }\n                this[kSession] = this.client.startSession({ owner: this, explicit: false });\n            }\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        });\n        return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async [kInit]() {\n        try {\n            const state = await this._initialize(this[kSession]);\n            const response = state.response;\n            this[kServer] = state.server;\n            if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] =\n                    typeof response.cursor.id === 'number'\n                        ? bson_1.Long.fromNumber(response.cursor.id)\n                        : typeof response.cursor.id === 'bigint'\n                            ? bson_1.Long.fromBigInt(response.cursor.id)\n                            : response.cursor.id;\n                if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n            }\n            // When server responses return without a cursor document, we close this cursor\n            // and return the raw server response. This is often the case for explain commands\n            // for example\n            if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n            }\n            // the cursor is now initialized, even if it is dead\n            this[kInitialized] = true;\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this[kInitialized] = true;\n            await cleanupCursor(this, { error });\n            throw error;\n        }\n        if (this.isDead) {\n            await cleanupCursor(this, undefined);\n        }\n        return;\n    }\n}\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nasync function next(cursor, { blocking, transform }) {\n    if (cursor.closed) {\n        return null;\n    }\n    do {\n        if (cursor[kId] == null) {\n            // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n            await cursor[kInit]();\n        }\n        if (cursor[kDocuments].length !== 0) {\n            const doc = cursor[kDocuments].shift();\n            if (doc != null && transform && cursor[kTransform]) {\n                try {\n                    return cursor[kTransform](doc);\n                }\n                catch (error) {\n                    // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n                    // error instead.\n                    await cleanupCursor(cursor, { error, needsToEmitClosed: true }).catch(() => null);\n                    throw error;\n                }\n            }\n            return doc;\n        }\n        if (cursor.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n            return null;\n        }\n        // otherwise need to call getMore\n        const batchSize = cursor[kOptions].batchSize || 1000;\n        try {\n            const response = await cursor.getMore(batchSize);\n            if (response) {\n                const cursorId = typeof response.cursor.id === 'number'\n                    ? bson_1.Long.fromNumber(response.cursor.id)\n                    : typeof response.cursor.id === 'bigint'\n                        ? bson_1.Long.fromBigInt(response.cursor.id)\n                        : response.cursor.id;\n                cursor[kDocuments].pushMany(response.cursor.nextBatch);\n                cursor[kId] = cursorId;\n            }\n        }\n        catch (error) {\n            // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n            // error instead.\n            await cleanupCursor(cursor, { error }).catch(() => null);\n            throw error;\n        }\n        if (cursor.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return null;\n        }\n    } while (!cursor.isDead || cursor[kDocuments].length !== 0);\n    return null;\n}\nasync function cleanupCursor(cursor, options) {\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options?.error;\n    // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n    // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n    // cleanup the cursor but don't emit a `close` event.\n    const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                await session.endSession({ error });\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        return;\n    }\n    async function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                try {\n                    await session.endSession({ error });\n                }\n                finally {\n                    cursor.emit(AbstractCursor.CLOSE);\n                }\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return;\n    }\n    cursor[kKilled] = true;\n    if (session.hasEnded) {\n        return completeCleanup();\n    }\n    try {\n        await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, { session })).catch(() => null);\n    }\n    finally {\n        await completeCleanup();\n    }\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        next(this._cursor, { blocking: true, transform: true }).then(result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().catch(() => null);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().catch(() => null);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n}\n//# sourceMappingURL=abstract_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregationCursor = void 0;\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        // TODO: NODE-2882\n        return { server: aggregateOperation.server, session, response };\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $group });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $limit });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $match });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $out });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $project });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $lookup });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $redact });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $skip });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $sort });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $unwind });\n        return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $geoNear });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.options\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.options.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const cursor = response.cursor;\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n            const batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n            if (batch.length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.resumeAfter == null &&\n            this.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        // TODO: NODE-2882\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2NoYW5nZV9zdHJlYW1fY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQix3QkFBd0IsbUJBQU8sQ0FBQywyRUFBa0I7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsbUVBQWM7QUFDMUMsb0JBQW9CLG1CQUFPLENBQUMseUZBQXlCO0FBQ3JELDRCQUE0QixtQkFBTyxDQUFDLHlHQUFpQztBQUNyRSxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQywwQkFBMEIsbUJBQU8sQ0FBQyxxRkFBbUI7QUFDckQ7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2NoYW5nZV9zdHJlYW1fY3Vyc29yLmpzPzZlYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYW5nZVN0cmVhbUN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGNoYW5nZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCIuLi9jaGFuZ2Vfc3RyZWFtXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgYWdncmVnYXRlXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9hZ2dyZWdhdGVcIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDaGFuZ2VTdHJlYW1DdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBuYW1lc3BhY2UsIHBpcGVsaW5lID0gW10sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihjbGllbnQsIG5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fcmVzdW1lVG9rZW4gPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gb3B0aW9ucy5zdGFydEF0T3BlcmF0aW9uVGltZTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnRBZnRlcikge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IG9wdGlvbnMuc3RhcnRBZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLnJlc3VtZUFmdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gb3B0aW9ucy5yZXN1bWVBZnRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgcmVzdW1lVG9rZW4odG9rZW4pIHtcbiAgICAgICAgdGhpcy5fcmVzdW1lVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5lbWl0KGNoYW5nZV9zdHJlYW1fMS5DaGFuZ2VTdHJlYW0uUkVTVU1FX1RPS0VOX0NIQU5HRUQsIHRva2VuKTtcbiAgICB9XG4gICAgZ2V0IHJlc3VtZVRva2VuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdW1lVG9rZW47XG4gICAgfVxuICAgIGdldCByZXN1bWVPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIFsncmVzdW1lQWZ0ZXInLCAnc3RhcnRBZnRlcicsICdzdGFydEF0T3BlcmF0aW9uVGltZSddKSB7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9uc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlc3VtZVRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3RhcnRBZnRlciAmJiAhdGhpcy5oYXNSZWNlaXZlZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RhcnRBZnRlciA9IHRoaXMucmVzdW1lVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnJlc3VtZUFmdGVyID0gdGhpcy5yZXN1bWVUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lICE9IG51bGwgJiYgKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHRoaXMuc2VydmVyKSA+PSA3KSB7XG4gICAgICAgICAgICBvcHRpb25zLnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gdGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgY2FjaGVSZXN1bWVUb2tlbihyZXN1bWVUb2tlbikge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJlZENvdW50KCkgPT09IDAgJiYgdGhpcy5wb3N0QmF0Y2hSZXN1bWVUb2tlbikge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IHRoaXMucG9zdEJhdGNoUmVzdW1lVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gcmVzdW1lVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYXNSZWNlaXZlZCA9IHRydWU7XG4gICAgfVxuICAgIF9wcm9jZXNzQmF0Y2gocmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gcmVzcG9uc2UuY3Vyc29yO1xuICAgICAgICBpZiAoY3Vyc29yLnBvc3RCYXRjaFJlc3VtZVRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnBvc3RCYXRjaFJlc3VtZVRva2VuID0gcmVzcG9uc2UuY3Vyc29yLnBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSAnZmlyc3RCYXRjaCcgaW4gcmVzcG9uc2UuY3Vyc29yID8gcmVzcG9uc2UuY3Vyc29yLmZpcnN0QmF0Y2ggOiByZXNwb25zZS5jdXJzb3IubmV4dEJhdGNoO1xuICAgICAgICAgICAgaWYgKGJhdGNoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBjdXJzb3IucG9zdEJhdGNoUmVzdW1lVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlU3RyZWFtQ3Vyc29yKHRoaXMuY2xpZW50LCB0aGlzLm5hbWVzcGFjZSwgdGhpcy5waXBlbGluZSwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGFnZ3JlZ2F0ZU9wZXJhdGlvbiA9IG5ldyBhZ2dyZWdhdGVfMS5BZ2dyZWdhdGVPcGVyYXRpb24odGhpcy5uYW1lc3BhY2UsIHRoaXMucGlwZWxpbmUsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikoc2Vzc2lvbi5jbGllbnQsIGFnZ3JlZ2F0ZU9wZXJhdGlvbik7XG4gICAgICAgIGNvbnN0IHNlcnZlciA9IGFnZ3JlZ2F0ZU9wZXJhdGlvbi5zZXJ2ZXI7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5yZXN1bWVBZnRlciA9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLnN0YXJ0QWZ0ZXIgPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA+PSA3KSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gcmVzcG9uc2Uub3BlcmF0aW9uVGltZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9jZXNzQmF0Y2gocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVtaXQoY29uc3RhbnRzXzEuSU5JVCwgcmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVtaXQoY29uc3RhbnRzXzEuUkVTUE9OU0UpO1xuICAgICAgICAvLyBUT0RPOiBOT0RFLTI4ODJcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbiAgICBhc3luYyBnZXRNb3JlKGJhdGNoU2l6ZSkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmdldE1vcmUoYmF0Y2hTaXplKTtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKSh0aGlzLnNlcnZlcik7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NCYXRjaChyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjaGFuZ2Vfc3RyZWFtXzEuQ2hhbmdlU3RyZWFtLk1PUkUsIHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNoYW5nZV9zdHJlYW1fMS5DaGFuZ2VTdHJlYW0uUkVTUE9OU0UpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxufVxuZXhwb3J0cy5DaGFuZ2VTdHJlYW1DdXJzb3IgPSBDaGFuZ2VTdHJlYW1DdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2Vfc3RyZWFtX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindCursor = exports.FLAGS = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(ssr)/./node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this[kNumReturned] = response.cursor?.firstBatch?.length;\n        // TODO: NODE-2882\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                // this is an optimization for the special case of a limit for a find command to avoid an\n                // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                // produces results for the find command.  Once a batch is filled up, it is returned and only\n                // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                // is exhausted and return a cursorId of zero.\n                // instead, if we determine there are no more documents to request from the server, we preemptively\n                // close the cursor\n                await this.close().catch(() => null);\n                return { cursor: { id: bson_1.Long.ZERO, nextBatch: [] } };\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n            this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw0QkFBNEIsbUJBQU8sQ0FBQyx5R0FBaUM7QUFDckUsMkJBQTJCLG1CQUFPLENBQUMsdUdBQWdDO0FBQ25FLDBCQUEwQixtQkFBTyxDQUFDLHFGQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9saXN0X2NvbGxlY3Rpb25zX2N1cnNvci5qcz8yZGM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0Q29sbGVjdGlvbnNDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBsaXN0X2NvbGxlY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdENvbGxlY3Rpb25zQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGRiLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIuY2xpZW50LCBkYi5zLm5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gZGI7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0Q29sbGVjdGlvbnNDdXJzb3IodGhpcy5wYXJlbnQsIHRoaXMuZmlsdGVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBsaXN0X2NvbGxlY3Rpb25zXzEuTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uKHRoaXMucGFyZW50LCB0aGlzLmZpbHRlciwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnBhcmVudC5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIC8vIFRPRE86IE5PREUtMjg4MlxuICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0Q29sbGVjdGlvbnNDdXJzb3IgPSBMaXN0Q29sbGVjdGlvbnNDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2NvbGxlY3Rpb25zX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLDRCQUE0QixtQkFBTyxDQUFDLHlHQUFpQztBQUNyRSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBdUI7QUFDakQsMEJBQTBCLG1CQUFPLENBQUMscUZBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9saXN0X2luZGV4ZXNfY3Vyc29yLmpzPzg2Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RJbmRleGVzQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgaW5kZXhlc18xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvaW5kZXhlc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RJbmRleGVzQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5jbGllbnQsIGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RJbmRleGVzQ3Vyc29yKHRoaXMucGFyZW50LCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBpbmRleGVzXzEuTGlzdEluZGV4ZXNPcGVyYXRpb24odGhpcy5wYXJlbnQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5wYXJlbnQuY2xpZW50LCBvcGVyYXRpb24pO1xuICAgICAgICAvLyBUT0RPOiBOT0RFLTI4ODJcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdEluZGV4ZXNDdXJzb3IgPSBMaXN0SW5kZXhlc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfaW5kZXhlc19jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQjtBQUMvQiw2QkFBNkIsbUJBQU8sQ0FBQywyRkFBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDJCQUEyQixvQkFBb0I7QUFDakUsMkNBQTJDLHdCQUF3QixPQUFPLHNCQUFzQixRQUFRO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9zZWFyY2hfaW5kZXhlc19jdXJzb3IuanM/MGM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBhZ2dyZWdhdGlvbl9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2FnZ3JlZ2F0aW9uX2N1cnNvclwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBMaXN0U2VhcmNoSW5kZXhlc0N1cnNvciBleHRlbmRzIGFnZ3JlZ2F0aW9uX2N1cnNvcl8xLkFnZ3JlZ2F0aW9uQ3Vyc29yIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoeyBmdWxsTmFtZXNwYWNlOiBucywgY2xpZW50IH0sIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBwaXBlbGluZSA9IG5hbWUgPT0gbnVsbCA/IFt7ICRsaXN0U2VhcmNoSW5kZXhlczoge30gfV0gOiBbeyAkbGlzdFNlYXJjaEluZGV4ZXM6IHsgbmFtZSB9IH1dO1xuICAgICAgICBzdXBlcihjbGllbnQsIG5zLCBwaXBlbGluZSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0U2VhcmNoSW5kZXhlc0N1cnNvciA9IExpc3RTZWFyY2hJbmRleGVzQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9zZWFyY2hfaW5kZXhlc19jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunCommandCursor = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        if (response.cursor == null) {\n            throw new error_1.MongoUnexpectedServerResponseError('Expected server to respond with cursor');\n        }\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL3J1bl9jb21tYW5kX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsNEJBQTRCLG1CQUFPLENBQUMseUdBQWlDO0FBQ3JFLG1CQUFtQixtQkFBTyxDQUFDLHVGQUF3QjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyw2RkFBMkI7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsMEJBQTBCLG1CQUFPLENBQUMscUZBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFlBQVk7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL3J1bl9jb21tYW5kX2N1cnNvci5qcz9jM2FiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SdW5Db21tYW5kQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGdldF9tb3JlXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9nZXRfbW9yZVwiKTtcbmNvbnN0IHJ1bl9jb21tYW5kXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9ydW5fY29tbWFuZFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBSdW5Db21tYW5kQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHRoZSBgZ2V0TW9yZS5jb21tZW50YCBmaWVsZFxuICAgICAqIEBwYXJhbSBjb21tZW50IC0gYW55IEJTT04gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRDb21tZW50KGNvbW1lbnQpIHtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucy5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHRoZSBgZ2V0TW9yZS5tYXhUaW1lTVNgIGZpZWxkLiBPbmx5IHZhbGlkIHdoZW4gY3Vyc29yIGlzIHRhaWxhYmxlIGF3YWl0XG4gICAgICogQHBhcmFtIG1heFRpbWVNUyAtIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIG5ldyBkYXRhXG4gICAgICovXG4gICAgc2V0TWF4VGltZU1TKG1heFRpbWVNUykge1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zLm1heEF3YWl0VGltZU1TID0gbWF4VGltZU1TO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgdGhlIGBnZXRNb3JlLmJhdGNoU2l6ZWAgZmllbGRcbiAgICAgKiBAcGFyYW0gbWF4VGltZU1TIC0gdGhlIG51bWJlciBkb2N1bWVudHMgdG8gcmV0dXJuIGluIHRoZSBgbmV4dEJhdGNoYFxuICAgICAqL1xuICAgIHNldEJhdGNoU2l6ZShiYXRjaFNpemUpIHtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucy5iYXRjaFNpemUgPSBiYXRjaFNpemU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3IgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignQ2xvbmUgbm90IHN1cHBvcnRlZCwgY3JlYXRlIGEgbmV3IGN1cnNvciB3aXRoIGRiLnJ1bkN1cnNvckNvbW1hbmQnKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiByZWFkQ29uY2VybiBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIHdpdGhSZWFkQ29uY2VybihfKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ1J1bkNvbW1hbmRDdXJzb3IgZG9lcyBub3Qgc3VwcG9ydCByZWFkQ29uY2VybiBpdCBtdXN0IGJlIGF0dGFjaGVkIHRvIHRoZSBjb21tYW5kIGJlaW5nIHJ1bicpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IHZhcmlvdXMgY3Vyc29yIGZsYWdzIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50ICovXG4gICAgYWRkQ3Vyc29yRmxhZyhfLCBfXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdSdW5Db21tYW5kQ3Vyc29yIGRvZXMgbm90IHN1cHBvcnQgY3Vyc29yIGZsYWdzLCB0aGV5IG11c3QgYmUgYXR0YWNoZWQgdG8gdGhlIGNvbW1hbmQgYmVpbmcgcnVuJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogbWF4VGltZU1TIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50ICovXG4gICAgbWF4VGltZU1TKF8pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignbWF4VGltZU1TIG11c3QgYmUgY29uZmlndXJlZCBvbiB0aGUgY29tbWFuZCBkb2N1bWVudCBkaXJlY3RseSwgdG8gY29uZmlndXJlIGdldE1vcmUubWF4VGltZU1TIHVzZSBjdXJzb3Iuc2V0TWF4VGltZU1TKCknKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiBiYXRjaFNpemUgbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICBiYXRjaFNpemUoXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdiYXRjaFNpemUgbXVzdCBiZSBjb25maWd1cmVkIG9uIHRoZSBjb21tYW5kIGRvY3VtZW50IGRpcmVjdGx5LCB0byBjb25maWd1cmUgZ2V0TW9yZS5iYXRjaFNpemUgdXNlIGN1cnNvci5zZXRCYXRjaFNpemUoKScpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoZGIsIGNvbW1hbmQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihkYi5jbGllbnQsICgwLCB1dGlsc18xLm5zKShkYi5uYW1lc3BhY2UpLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IE9iamVjdC5mcmVlemUoeyAuLi5jb21tYW5kIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgcnVuX2NvbW1hbmRfMS5SdW5Db21tYW5kT3BlcmF0aW9uKHRoaXMuZGIsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLmN1cnNvck9wdGlvbnMucmVhZFByZWZlcmVuY2VcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIGlmIChyZXNwb25zZS5jdXJzb3IgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcignRXhwZWN0ZWQgc2VydmVyIHRvIHJlc3BvbmQgd2l0aCBjdXJzb3InKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLFxuICAgICAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgICAgIHJlc3BvbnNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBnZXRNb3JlKF9iYXRjaFNpemUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgZ2V0TW9yZU9wZXJhdGlvbiA9IG5ldyBnZXRfbW9yZV8xLkdldE1vcmVPcGVyYXRpb24odGhpcy5uYW1lc3BhY2UsIHRoaXMuaWQsIHRoaXMuc2VydmVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uOiB0aGlzLnNlc3Npb24sXG4gICAgICAgICAgICAuLi50aGlzLmdldE1vcmVPcHRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIGdldE1vcmVPcGVyYXRpb24pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQ29tbWFuZEN1cnNvciA9IFJ1bkNvbW1hbmRDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5fY29tbWFuZF9jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/db.js":
/*!****************************************!*\
  !*** ./node_modules/mongodb/lib/db.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(ssr)/./node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(ssr)/./node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === 'string' && databaseName.includes('.')) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options, new_collection: true, readPreference: read_preference_1.ReadPreference.primary }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/deps.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/deps.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\nfunction getKerberos() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        exports.Kerberos = __webpack_require__(/*! kerberos */ \"?07fb\");\n        return exports.Kerberos;\n    }\n    catch {\n        return exports.Kerberos;\n    }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'));\nfunction getZstdLibrary() {\n    try {\n        exports.ZStandard = __webpack_require__(/*! @mongodb-js/zstd */ \"?e185\");\n        return exports.ZStandard;\n    }\n    catch {\n        return exports.ZStandard;\n    }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(/*! @aws-sdk/credential-providers */ \"?4bb6\");\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.'));\n    }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(/*! gcp-metadata */ \"?a71c\");\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.'));\n    }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(/*! snappy */ \"?aa0a\");\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(/*! socks */ \"?8f6e\");\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.aws4 = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'aws4'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n}\ncatch { } // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        mongodbClientEncryption = __webpack_require__(/*! mongodb-client-encryption */ \"?a5d2\");\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\n//# sourceMappingURL=deps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZGVwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxZQUFZLEdBQUcsZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcsc0JBQXNCLEdBQUcsZ0NBQWdDLEdBQUcsc0JBQXNCLEdBQUcsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQUcsZ0JBQWdCO0FBQzFPLGdCQUFnQixtQkFBTyxDQUFDLDBEQUFTO0FBQ2pDO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQXNDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBLFFBQVEsd0VBQStDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsbUJBQU8sQ0FBQyw0Q0FBK0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG1CQUFPLENBQUMsMkJBQWM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMscUJBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsNkpBQTZKLE9BQU87QUFDcEssaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsb0JBQU87QUFDckM7QUFDQTtBQUNBO0FBQ0Esa0tBQWtLLE9BQU87QUFDekssaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaO0FBQ0E7QUFDQSxJQUFJLGtKQUE4QjtBQUNsQztBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLHdDQUEyQjtBQUNyRTtBQUNBO0FBQ0EsK0xBQStMLE9BQU87QUFDdE0saUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9kZXBzLmpzPzNkN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE1vbmdvREJDbGllbnRFbmNyeXB0aW9uID0gZXhwb3J0cy5hd3M0ID0gZXhwb3J0cy5nZXRTb2NrcyA9IGV4cG9ydHMuZ2V0U25hcHB5ID0gZXhwb3J0cy5nZXRHY3BNZXRhZGF0YSA9IGV4cG9ydHMuZ2V0QXdzQ3JlZGVudGlhbFByb3ZpZGVyID0gZXhwb3J0cy5nZXRac3RkTGlicmFyeSA9IGV4cG9ydHMuWlN0YW5kYXJkID0gZXhwb3J0cy5nZXRLZXJiZXJvcyA9IGV4cG9ydHMuS2VyYmVyb3MgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5mdW5jdGlvbiBtYWtlRXJyb3JNb2R1bGUoZXJyb3IpIHtcbiAgICBjb25zdCBwcm9wcyA9IGVycm9yID8geyBrTW9kdWxlRXJyb3I6IGVycm9yIH0gOiB7fTtcbiAgICByZXR1cm4gbmV3IFByb3h5KHByb3BzLCB7XG4gICAgICAgIGdldDogKF8sIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2tNb2R1bGVFcnJvcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5LZXJiZXJvcyA9IG1ha2VFcnJvck1vZHVsZShuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdEZXBlbmRlbmN5RXJyb3IoJ09wdGlvbmFsIG1vZHVsZSBga2VyYmVyb3NgIG5vdCBmb3VuZC4gUGxlYXNlIGluc3RhbGwgaXQgdG8gZW5hYmxlIGtlcmJlcm9zIGF1dGhlbnRpY2F0aW9uJykpO1xuZnVuY3Rpb24gZ2V0S2VyYmVyb3MoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRW5zdXJlIHlvdSBhbHdheXMgd3JhcCBhbiBvcHRpb25hbCByZXF1aXJlIGluIHRoZSB0cnkgYmxvY2sgTk9ERS0zMTk5XG4gICAgICAgIGV4cG9ydHMuS2VyYmVyb3MgPSByZXF1aXJlKCdrZXJiZXJvcycpO1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5LZXJiZXJvcztcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5LZXJiZXJvcztcbiAgICB9XG59XG5leHBvcnRzLmdldEtlcmJlcm9zID0gZ2V0S2VyYmVyb3M7XG5leHBvcnRzLlpTdGFuZGFyZCA9IG1ha2VFcnJvck1vZHVsZShuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdEZXBlbmRlbmN5RXJyb3IoJ09wdGlvbmFsIG1vZHVsZSBgQG1vbmdvZGItanMvenN0ZGAgbm90IGZvdW5kLiBQbGVhc2UgaW5zdGFsbCBpdCB0byBlbmFibGUgenN0ZCBjb21wcmVzc2lvbicpKTtcbmZ1bmN0aW9uIGdldFpzdGRMaWJyYXJ5KCkge1xuICAgIHRyeSB7XG4gICAgICAgIGV4cG9ydHMuWlN0YW5kYXJkID0gcmVxdWlyZSgnQG1vbmdvZGItanMvenN0ZCcpO1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5aU3RhbmRhcmQ7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuWlN0YW5kYXJkO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0WnN0ZExpYnJhcnkgPSBnZXRac3RkTGlicmFyeTtcbmZ1bmN0aW9uIGdldEF3c0NyZWRlbnRpYWxQcm92aWRlcigpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBFbnN1cmUgeW91IGFsd2F5cyB3cmFwIGFuIG9wdGlvbmFsIHJlcXVpcmUgaW4gdGhlIHRyeSBibG9jayBOT0RFLTMxOTlcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gcmVxdWlyZSgnQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnMnKTtcbiAgICAgICAgcmV0dXJuIGNyZWRlbnRpYWxQcm92aWRlcjtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gbWFrZUVycm9yTW9kdWxlKG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0RlcGVuZGVuY3lFcnJvcignT3B0aW9uYWwgbW9kdWxlIGBAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyc2Agbm90IGZvdW5kLicgK1xuICAgICAgICAgICAgJyBQbGVhc2UgaW5zdGFsbCBpdCB0byBlbmFibGUgZ2V0dGluZyBhd3MgY3JlZGVudGlhbHMgdmlhIHRoZSBvZmZpY2lhbCBzZGsuJykpO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0QXdzQ3JlZGVudGlhbFByb3ZpZGVyID0gZ2V0QXdzQ3JlZGVudGlhbFByb3ZpZGVyO1xuZnVuY3Rpb24gZ2V0R2NwTWV0YWRhdGEoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRW5zdXJlIHlvdSBhbHdheXMgd3JhcCBhbiBvcHRpb25hbCByZXF1aXJlIGluIHRoZSB0cnkgYmxvY2sgTk9ERS0zMTk5XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxQcm92aWRlciA9IHJlcXVpcmUoJ2djcC1tZXRhZGF0YScpO1xuICAgICAgICByZXR1cm4gY3JlZGVudGlhbFByb3ZpZGVyO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBtYWtlRXJyb3JNb2R1bGUobmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nRGVwZW5kZW5jeUVycm9yKCdPcHRpb25hbCBtb2R1bGUgYGdjcC1tZXRhZGF0YWAgbm90IGZvdW5kLicgK1xuICAgICAgICAgICAgJyBQbGVhc2UgaW5zdGFsbCBpdCB0byBlbmFibGUgZ2V0dGluZyBnY3AgY3JlZGVudGlhbHMgdmlhIHRoZSBvZmZpY2lhbCBzZGsuJykpO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0R2NwTWV0YWRhdGEgPSBnZXRHY3BNZXRhZGF0YTtcbmZ1bmN0aW9uIGdldFNuYXBweSgpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBFbnN1cmUgeW91IGFsd2F5cyB3cmFwIGFuIG9wdGlvbmFsIHJlcXVpcmUgaW4gdGhlIHRyeSBibG9jayBOT0RFLTMxOTlcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXF1aXJlKCdzbmFwcHknKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgY29uc3Qga01vZHVsZUVycm9yID0gbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nRGVwZW5kZW5jeUVycm9yKCdPcHRpb25hbCBtb2R1bGUgYHNuYXBweWAgbm90IGZvdW5kLiBQbGVhc2UgaW5zdGFsbCBpdCB0byBlbmFibGUgc25hcHB5IGNvbXByZXNzaW9uJywgeyBjYXVzZSB9KTtcbiAgICAgICAgcmV0dXJuIHsga01vZHVsZUVycm9yIH07XG4gICAgfVxufVxuZXhwb3J0cy5nZXRTbmFwcHkgPSBnZXRTbmFwcHk7XG5mdW5jdGlvbiBnZXRTb2NrcygpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBFbnN1cmUgeW91IGFsd2F5cyB3cmFwIGFuIG9wdGlvbmFsIHJlcXVpcmUgaW4gdGhlIHRyeSBibG9jayBOT0RFLTMxOTlcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXF1aXJlKCdzb2NrcycpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNhdGNoIChjYXVzZSkge1xuICAgICAgICBjb25zdCBrTW9kdWxlRXJyb3IgPSBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdEZXBlbmRlbmN5RXJyb3IoJ09wdGlvbmFsIG1vZHVsZSBgc29ja3NgIG5vdCBmb3VuZC4gUGxlYXNlIGluc3RhbGwgaXQgdG8gY29ubmVjdGlvbnMgb3ZlciBhIFNPQ0tTNSBwcm94eScsIHsgY2F1c2UgfSk7XG4gICAgICAgIHJldHVybiB7IGtNb2R1bGVFcnJvciB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0U29ja3MgPSBnZXRTb2NrcztcbmV4cG9ydHMuYXdzNCA9IG1ha2VFcnJvck1vZHVsZShuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdEZXBlbmRlbmN5RXJyb3IoJ09wdGlvbmFsIG1vZHVsZSBgYXdzNGAgbm90IGZvdW5kLiBQbGVhc2UgaW5zdGFsbCBpdCB0byBlbmFibGUgQVdTIGF1dGhlbnRpY2F0aW9uJykpO1xudHJ5IHtcbiAgICAvLyBFbnN1cmUgeW91IGFsd2F5cyB3cmFwIGFuIG9wdGlvbmFsIHJlcXVpcmUgaW4gdGhlIHRyeSBibG9jayBOT0RFLTMxOTlcbiAgICBleHBvcnRzLmF3czQgPSByZXF1aXJlKCdhd3M0Jyk7XG59XG5jYXRjaCB7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuLyoqIEEgdXRpbGl0eSBmdW5jdGlvbiB0byBnZXQgdGhlIGluc3RhbmNlIG9mIG1vbmdvZGItY2xpZW50LWVuY3J5cHRpb24sIGlmIGl0IGV4aXN0cy4gKi9cbmZ1bmN0aW9uIGdldE1vbmdvREJDbGllbnRFbmNyeXB0aW9uKCkge1xuICAgIGxldCBtb25nb2RiQ2xpZW50RW5jcnlwdGlvbiA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gTk9URShOT0RFLTMxOTkpOiBFbnN1cmUgeW91IGFsd2F5cyB3cmFwIGFuIG9wdGlvbmFsIHJlcXVpcmUgbGl0ZXJhbGx5IGluIHRoZSB0cnkgYmxvY2tcbiAgICAgICAgLy8gQ2Fubm90IGJlIG1vdmVkIHRvIGhlbHBlciB1dGlsaXR5IGZ1bmN0aW9uLCBidW5kbGVycyBzZWFyY2ggYW5kIHJlcGxhY2UgdGhlIGFjdHVhbCByZXF1aXJlIGNhbGxcbiAgICAgICAgLy8gaW4gYSB3YXkgdGhhdCBtYWtlcyB0aGlzIGxpbmUgdGhyb3cgYXQgYnVuZGxlIHRpbWUsIG5vdCBydW50aW1lLCBjYXRjaGluZyBoZXJlIHdpbGwgbWFrZSBidW5kbGluZyBzdWNjZWVkXG4gICAgICAgIG1vbmdvZGJDbGllbnRFbmNyeXB0aW9uID0gcmVxdWlyZSgnbW9uZ29kYi1jbGllbnQtZW5jcnlwdGlvbicpO1xuICAgIH1cbiAgICBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgY29uc3Qga01vZHVsZUVycm9yID0gbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nRGVwZW5kZW5jeUVycm9yKCdPcHRpb25hbCBtb2R1bGUgYG1vbmdvZGItY2xpZW50LWVuY3J5cHRpb25gIG5vdCBmb3VuZC4gUGxlYXNlIGluc3RhbGwgaXQgdG8gdXNlIGF1dG8gZW5jcnlwdGlvbiBvciBDbGllbnRFbmNyeXB0aW9uLicsIHsgY2F1c2UgfSk7XG4gICAgICAgIHJldHVybiB7IGtNb2R1bGVFcnJvciB9O1xuICAgIH1cbiAgICByZXR1cm4gbW9uZ29kYkNsaWVudEVuY3J5cHRpb247XG59XG5leHBvcnRzLmdldE1vbmdvREJDbGllbnRFbmNyeXB0aW9uID0gZ2V0TW9uZ29EQkNsaWVudEVuY3J5cHRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXBzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/encrypter.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/encrypter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        const maybeError = await this.autoEncrypter.teardown(!!force).catch(e => e);\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return internalClient.close(force);\n        }\n        if (maybeError) {\n            throw maybeError;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZW5jcnlwdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IseUJBQXlCLG1CQUFPLENBQUMsMEhBQXlDO0FBQzFFLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyx3REFBUTtBQUMvQixnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9lbmNyeXB0ZXIuanM/MDdmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW5jcnlwdGVyID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBhdXRvX2VuY3J5cHRlcl8xID0gcmVxdWlyZShcIi4vY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9hdXRvX2VuY3J5cHRlclwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4vZGVwc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IG1vbmdvX2NsaWVudF8xID0gcmVxdWlyZShcIi4vbW9uZ29fY2xpZW50XCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qga0ludGVybmFsQ2xpZW50ID0gU3ltYm9sKCdpbnRlcm5hbENsaWVudCcpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRW5jcnlwdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHVyaSwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcHRpb24gXCJhdXRvRW5jcnlwdGlvblwiIG11c3QgYmUgc3BlY2lmaWVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5pdGlhbGl6ZSB0byBudWxsLCBpZiB3ZSBjYWxsIGdldEludGVybmFsQ2xpZW50LCB3ZSBtYXkgc2V0IHRoaXMgaXQgaXMgaW1wb3J0YW50IHRvIG5vdCBvdmVyd3JpdGUgdGhvc2UgZnVuY3Rpb24gY2FsbHMuXG4gICAgICAgIHRoaXNba0ludGVybmFsQ2xpZW50XSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnlwYXNzQXV0b0VuY3J5cHRpb24gPSAhIW9wdGlvbnMuYXV0b0VuY3J5cHRpb24uYnlwYXNzQXV0b0VuY3J5cHRpb247XG4gICAgICAgIHRoaXMubmVlZHNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChvcHRpb25zLm1heFBvb2xTaXplID09PSAwICYmIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ua2V5VmF1bHRDbGllbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5rZXlWYXVsdENsaWVudCA9IGNsaWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmF1dG9FbmNyeXB0aW9uLmtleVZhdWx0Q2xpZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ua2V5VmF1bHRDbGllbnQgPSB0aGlzLmdldEludGVybmFsQ2xpZW50KGNsaWVudCwgdXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ieXBhc3NBdXRvRW5jcnlwdGlvbikge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5tZXRhZGF0YUNsaWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLm1heFBvb2xTaXplID09PSAwKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLm1ldGFkYXRhQ2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5tZXRhZGF0YUNsaWVudCA9IHRoaXMuZ2V0SW50ZXJuYWxDbGllbnQoY2xpZW50LCB1cmksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnByb3h5SG9zdCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5wcm94eU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcHJveHlIb3N0OiBvcHRpb25zLnByb3h5SG9zdCxcbiAgICAgICAgICAgICAgICBwcm94eVBvcnQ6IG9wdGlvbnMucHJveHlQb3J0LFxuICAgICAgICAgICAgICAgIHByb3h5VXNlcm5hbWU6IG9wdGlvbnMucHJveHlVc2VybmFtZSxcbiAgICAgICAgICAgICAgICBwcm94eVBhc3N3b3JkOiBvcHRpb25zLnByb3h5UGFzc3dvcmRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdXRvRW5jcnlwdGVyID0gbmV3IGF1dG9fZW5jcnlwdGVyXzEuQXV0b0VuY3J5cHRlcihjbGllbnQsIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24pO1xuICAgIH1cbiAgICBnZXRJbnRlcm5hbENsaWVudChjbGllbnQsIHVyaSwgb3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPKE5PREUtNDE0NCk6IFJlbW92ZSBuZXcgdmFyaWFibGUgZm9yIHR5cGUgbmFycm93aW5nXG4gICAgICAgIGxldCBpbnRlcm5hbENsaWVudCA9IHRoaXNba0ludGVybmFsQ2xpZW50XTtcbiAgICAgICAgaWYgKGludGVybmFsQ2xpZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsb25lZE9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIFtcbiAgICAgICAgICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcHRpb25zKSxcbiAgICAgICAgICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9wdGlvbnMpXG4gICAgICAgICAgICBdKSB7XG4gICAgICAgICAgICAgICAgaWYgKFsnYXV0b0VuY3J5cHRpb24nLCAnbWluUG9vbFNpemUnLCAnc2VydmVycycsICdjYXNlVHJhbnNsYXRlJywgJ2RiTmFtZSddLmluY2x1ZGVzKGtleSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIFJlZmxlY3Quc2V0KGNsb25lZE9wdGlvbnMsIGtleSwgUmVmbGVjdC5nZXQob3B0aW9ucywga2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbG9uZWRPcHRpb25zLm1pblBvb2xTaXplID0gMDtcbiAgICAgICAgICAgIGludGVybmFsQ2xpZW50ID0gbmV3IG1vbmdvX2NsaWVudF8xLk1vbmdvQ2xpZW50KHVyaSwgY2xvbmVkT3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzW2tJbnRlcm5hbENsaWVudF0gPSBpbnRlcm5hbENsaWVudDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnROYW1lIG9mIGNvbnN0YW50c18xLk1PTkdPX0NMSUVOVF9FVkVOVFMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIGNsaWVudC5saXN0ZW5lcnMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbENsaWVudC5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGllbnQub24oJ25ld0xpc3RlbmVyJywgKGV2ZW50TmFtZSwgbGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbENsaWVudD8ub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubmVlZHNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJuYWxDbGllbnQ7XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3RJbnRlcm5hbENsaWVudCgpIHtcbiAgICAgICAgLy8gVE9ETyhOT0RFLTQxNDQpOiBSZW1vdmUgbmV3IHZhcmlhYmxlIGZvciB0eXBlIG5hcnJvd2luZ1xuICAgICAgICBjb25zdCBpbnRlcm5hbENsaWVudCA9IHRoaXNba0ludGVybmFsQ2xpZW50XTtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNDb25uZWN0aW5nICYmIGludGVybmFsQ2xpZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubmVlZHNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhd2FpdCBpbnRlcm5hbENsaWVudC5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvc2VDYWxsYmFjayhjbGllbnQsIGZvcmNlLCBjYWxsYmFjaykge1xuICAgICAgICAoMCwgdXRpbF8xLmNhbGxiYWNraWZ5KSh0aGlzLmNsb3NlLmJpbmQodGhpcykpKGNsaWVudCwgZm9yY2UsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgYXN5bmMgY2xvc2UoY2xpZW50LCBmb3JjZSkge1xuICAgICAgICBjb25zdCBtYXliZUVycm9yID0gYXdhaXQgdGhpcy5hdXRvRW5jcnlwdGVyLnRlYXJkb3duKCEhZm9yY2UpLmNhdGNoKGUgPT4gZSk7XG4gICAgICAgIGNvbnN0IGludGVybmFsQ2xpZW50ID0gdGhpc1trSW50ZXJuYWxDbGllbnRdO1xuICAgICAgICBpZiAoaW50ZXJuYWxDbGllbnQgIT0gbnVsbCAmJiBjbGllbnQgIT09IGludGVybmFsQ2xpZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxDbGllbnQuY2xvc2UoZm9yY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXliZUVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBtYXliZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBjaGVja0Zvck1vbmdvQ3J5cHQoKSB7XG4gICAgICAgIGNvbnN0IG1vbmdvZGJDbGllbnRFbmNyeXB0aW9uID0gKDAsIGRlcHNfMS5nZXRNb25nb0RCQ2xpZW50RW5jcnlwdGlvbikoKTtcbiAgICAgICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIG1vbmdvZGJDbGllbnRFbmNyeXB0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdEZXBlbmRlbmN5RXJyb3IoJ0F1dG8tZW5jcnlwdGlvbiByZXF1ZXN0ZWQsIGJ1dCB0aGUgbW9kdWxlIGlzIG5vdCBpbnN0YWxsZWQuICcgK1xuICAgICAgICAgICAgICAgICdQbGVhc2UgYWRkIGBtb25nb2RiLWNsaWVudC1lbmNyeXB0aW9uYCBhcyBhIGRlcGVuZGVuY3kgb2YgeW91ciBwcm9qZWN0Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkVuY3J5cHRlciA9IEVuY3J5cHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY3J5cHRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/error.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: 'RetryableWriteError',\n    TransientTransactionError: 'TransientTransactionError',\n    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n    ResumableChangeStreamError: 'ResumableChangeStreamError',\n    HandshakeError: 'HandshakeError',\n    ResetPool: 'ResetPool',\n    PoolRequstedRetry: 'PoolRequstedRetry',\n    InterruptInUseConnections: 'InterruptInUseConnections',\n    NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n    return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */\n    static buildErrorMessage(e) {\n        if (typeof e === 'string') {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0\n                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n                : e.errors.map(({ message }) => message).join(', ');\n        }\n        return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'\n            ? e.message\n            : 'empty error message';\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        this.errorResponse = message;\n        for (const name in message) {\n            if (name !== 'errorLabels' &&\n                name !== 'errmsg' &&\n                name !== 'message' &&\n                name !== 'errorResponse') {\n                this[name] = message[name];\n            }\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAWSError';\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAzureError';\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoUnexpectedServerResponseError';\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, { cause: options?.cause });\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, result) {\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) &&\n            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n    }\n    if (error instanceof MongoError && typeof error.code === 'number') {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n    return (error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) ||\n        error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry));\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/explain.js":
/*!*********************************************!*\
  !*** ./node_modules/mongodb/lib/explain.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n    }\n    static fromOptions(options) {\n        if (options?.explain == null)\n            return;\n        const explain = options.explain;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n    }\n}\nexports.Explain = Explain;\n//# sourceMappingURL=explain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLEdBQUcsd0JBQXdCO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLDBEQUFTO0FBQ2pDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2V4cGxhaW4uanM/YmU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXhwbGFpbiA9IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkV4cGxhaW5WZXJib3NpdHkgPSBPYmplY3QuZnJlZXplKHtcbiAgICBxdWVyeVBsYW5uZXI6ICdxdWVyeVBsYW5uZXInLFxuICAgIHF1ZXJ5UGxhbm5lckV4dGVuZGVkOiAncXVlcnlQbGFubmVyRXh0ZW5kZWQnLFxuICAgIGV4ZWN1dGlvblN0YXRzOiAnZXhlY3V0aW9uU3RhdHMnLFxuICAgIGFsbFBsYW5zRXhlY3V0aW9uOiAnYWxsUGxhbnNFeGVjdXRpb24nXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEV4cGxhaW4ge1xuICAgIGNvbnN0cnVjdG9yKHZlcmJvc2l0eSkge1xuICAgICAgICBpZiAodHlwZW9mIHZlcmJvc2l0eSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eVxuICAgICAgICAgICAgICAgID8gZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5LmFsbFBsYW5zRXhlY3V0aW9uXG4gICAgICAgICAgICAgICAgOiBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkucXVlcnlQbGFubmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52ZXJib3NpdHkgPSB2ZXJib3NpdHk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnM/LmV4cGxhaW4gPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZXhwbGFpbiA9IG9wdGlvbnMuZXhwbGFpbjtcbiAgICAgICAgaWYgKHR5cGVvZiBleHBsYWluID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGV4cGxhaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4cGxhaW4oZXhwbGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignRmllbGQgXCJleHBsYWluXCIgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJvb2xlYW4nKTtcbiAgICB9XG59XG5leHBvcnRzLkV4cGxhaW4gPSBFeHBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwbGFpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/download.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/download.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = ({ error, doc }) => {\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.destroy(error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(() => null, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc }) => {\n        if (error) {\n            return stream.destroy(error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, { ...options, id });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nexports.GridFSBucket = GridFSBucket;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/upload.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/upload.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n            }, () => null);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once('index', callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({ files_id: this.id });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, { writeConcern: stream.writeConcern }).then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, { background: false });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZ3JpZGZzL3VwbG9hZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsZUFBZSxtQkFBTyxDQUFDLHlEQUFTO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDZFQUFvQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxtQkFBbUI7QUFDMUQ7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsbUNBQW1DO0FBQ2hGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxJQUFJLGNBQWMsVUFBVTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxnREFBZ0QsbUJBQW1CO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxtQ0FBbUM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG1DQUFtQztBQUN0RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9ncmlkZnMvdXBsb2FkLmpzP2U4YmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdyaWRGU0J1Y2tldFdyaXRlU3RyZWFtID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4vLi4vd3JpdGVfY29uY2VyblwiKTtcbi8qKlxuICogQSB3cml0YWJsZSBzdHJlYW0gdGhhdCBlbmFibGVzIHlvdSB0byB3cml0ZSBidWZmZXJzIHRvIEdyaWRGUy5cbiAqXG4gKiBEbyBub3QgaW5zdGFudGlhdGUgdGhpcyBjbGFzcyBkaXJlY3RseS4gVXNlIGBvcGVuVXBsb2FkU3RyZWFtKClgIGluc3RlYWQuXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEdyaWRGU0J1Y2tldFdyaXRlU3RyZWFtIGV4dGVuZHMgc3RyZWFtXzEuV3JpdGFibGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBidWNrZXQgLSBIYW5kbGUgZm9yIHRoaXMgc3RyZWFtJ3MgY29ycmVzcG9uZGluZyBidWNrZXRcbiAgICAgKiBAcGFyYW0gZmlsZW5hbWUgLSBUaGUgdmFsdWUgb2YgdGhlICdmaWxlbmFtZScga2V5IGluIHRoZSBmaWxlcyBkb2NcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJ1Y2tldCwgZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkb2N1bWVudCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnNlcnRlZCBmaWxlLlxuICAgICAgICAgKiBUaGlzIHByb3BlcnR5IGlzIGRlZmluZWQgX2FmdGVyXyB0aGUgZmluaXNoIGV2ZW50IGhhcyBiZWVuIGVtaXR0ZWQuXG4gICAgICAgICAqIEl0IHdpbGwgcmVtYWluIGBudWxsYCBpZiBhbiBlcnJvciBvY2N1cnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGBgYHRzXG4gICAgICAgICAqIGZzLmNyZWF0ZVJlYWRTdHJlYW0oJ2ZpbGUudHh0JylcbiAgICAgICAgICogICAucGlwZShidWNrZXQub3BlblVwbG9hZFN0cmVhbSgnZmlsZS50eHQnKSlcbiAgICAgICAgICogICAub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICogICAgIGNvbnNvbGUubG9nKHRoaXMuZ3JpZEZTRmlsZSlcbiAgICAgICAgICogICB9KVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ3JpZEZTRmlsZSA9IG51bGw7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICB0aGlzLmJ1Y2tldCA9IGJ1Y2tldDtcbiAgICAgICAgdGhpcy5jaHVua3MgPSBidWNrZXQucy5fY2h1bmtzQ29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgICAgICB0aGlzLmZpbGVzID0gYnVja2V0LnMuX2ZpbGVzQ29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy53cml0ZUNvbmNlcm4gPSB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpIHx8IGJ1Y2tldC5zLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICAvLyBTaWduYWxzIHRoZSB3cml0ZSBpcyBhbGwgZG9uZVxuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pZCA9IG9wdGlvbnMuaWQgPyBvcHRpb25zLmlkIDogbmV3IGJzb25fMS5PYmplY3RJZCgpO1xuICAgICAgICAvLyBwcm9wZXJseSBpbmhlcml0IHRoZSBkZWZhdWx0IGNodW5rc2l6ZSBmcm9tIHBhcmVudFxuICAgICAgICB0aGlzLmNodW5rU2l6ZUJ5dGVzID0gb3B0aW9ucy5jaHVua1NpemVCeXRlcyB8fCB0aGlzLmJ1Y2tldC5zLm9wdGlvbnMuY2h1bmtTaXplQnl0ZXM7XG4gICAgICAgIHRoaXMuYnVmVG9TdG9yZSA9IEJ1ZmZlci5hbGxvYyh0aGlzLmNodW5rU2l6ZUJ5dGVzKTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLm4gPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzdHJlYW1FbmQ6IGZhbHNlLFxuICAgICAgICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0czogMCxcbiAgICAgICAgICAgIGVycm9yZWQ6IGZhbHNlLFxuICAgICAgICAgICAgYWJvcnRlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCF0aGlzLmJ1Y2tldC5zLmNhbGxlZE9wZW5VcGxvYWRTdHJlYW0pIHtcbiAgICAgICAgICAgIHRoaXMuYnVja2V0LnMuY2FsbGVkT3BlblVwbG9hZFN0cmVhbSA9IHRydWU7XG4gICAgICAgICAgICBjaGVja0luZGV4ZXModGhpcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWNrZXQucy5jaGVja2VkSW5kZXhlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5idWNrZXQuZW1pdCgnaW5kZXgnKTtcbiAgICAgICAgICAgIH0sICgpID0+IG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogVGhlIHN0cmVhbSBpcyBjb25zaWRlcmVkIGNvbnN0cnVjdGVkIHdoZW4gdGhlIGluZGV4ZXMgYXJlIGRvbmUgYmVpbmcgY3JlYXRlZFxuICAgICAqL1xuICAgIF9jb25zdHJ1Y3QoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuYnVja2V0LnMuY2hlY2tlZEluZGV4ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1Y2tldC5vbmNlKCdpbmRleCcsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogV3JpdGUgYSBidWZmZXIgdG8gdGhlIHN0cmVhbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayAtIEJ1ZmZlciB0byB3cml0ZVxuICAgICAqIEBwYXJhbSBlbmNvZGluZyAtIE9wdGlvbmFsIGVuY29kaW5nIGZvciB0aGUgYnVmZmVyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBjaHVuayB3YXMgYWRkZWQgdG8gdGhlIGJ1ZmZlciwgb3IgaWYgdGhlIGVudGlyZSBjaHVuayB3YXMgcGVyc2lzdGVkIHRvIE1vbmdvREIgaWYgdGhpcyBjaHVuayBjYXVzZWQgYSBmbHVzaC5cbiAgICAgKi9cbiAgICBfd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICBkb1dyaXRlKHRoaXMsIGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2ZpbmFsKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnN0cmVhbUVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUuc3RyZWFtRW5kID0gdHJ1ZTtcbiAgICAgICAgd3JpdGVSZW1uYW50KHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGxhY2VzIHRoaXMgd3JpdGUgc3RyZWFtIGludG8gYW4gYWJvcnRlZCBzdGF0ZSAoYWxsIGZ1dHVyZSB3cml0ZXMgZmFpbClcbiAgICAgKiBhbmQgZGVsZXRlcyBhbGwgY2h1bmtzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gd3JpdHRlbi5cbiAgICAgKi9cbiAgICBhc3luYyBhYm9ydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtRW5kKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4NSk6IFJlcGxhY2Ugd2l0aCBNb25nb0dyaWRGU1N0cmVhbUNsb3NlZFxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignQ2Fubm90IGFib3J0IGEgc3RyZWFtIHRoYXQgaGFzIGFscmVhZHkgY29tcGxldGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYWJvcnRlZCkge1xuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODUpOiBSZXBsYWNlIHdpdGggTW9uZ29HcmlkRlNTdHJlYW1DbG9zZWRcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ0Nhbm5vdCBjYWxsIGFib3J0KCkgb24gYSBzdHJlYW0gdHdpY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgICBhd2FpdCB0aGlzLmNodW5rcy5kZWxldGVNYW55KHsgZmlsZXNfaWQ6IHRoaXMuaWQgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5HcmlkRlNCdWNrZXRXcml0ZVN0cmVhbSA9IEdyaWRGU0J1Y2tldFdyaXRlU3RyZWFtO1xuZnVuY3Rpb24gaGFuZGxlRXJyb3Ioc3RyZWFtLCBlcnJvciwgY2FsbGJhY2spIHtcbiAgICBpZiAoc3RyZWFtLnN0YXRlLmVycm9yZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RyZWFtLnN0YXRlLmVycm9yZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIGVycm9yKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNodW5rRG9jKGZpbGVzSWQsIG4sIGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBfaWQ6IG5ldyBic29uXzEuT2JqZWN0SWQoKSxcbiAgICAgICAgZmlsZXNfaWQ6IGZpbGVzSWQsXG4gICAgICAgIG4sXG4gICAgICAgIGRhdGFcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tDaHVua3NJbmRleChzdHJlYW0pIHtcbiAgICBjb25zdCBpbmRleCA9IHsgZmlsZXNfaWQ6IDEsIG46IDEgfTtcbiAgICBsZXQgaW5kZXhlcztcbiAgICB0cnkge1xuICAgICAgICBpbmRleGVzID0gYXdhaXQgc3RyZWFtLmNodW5rcy5saXN0SW5kZXhlcygpLnRvQXJyYXkoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29FcnJvciAmJiBlcnJvci5jb2RlID09PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuTmFtZXNwYWNlTm90Rm91bmQpIHtcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhhc0NodW5rc0luZGV4ID0gISFpbmRleGVzLmZpbmQoaW5kZXggPT4ge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaW5kZXgua2V5KTtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAyICYmIGluZGV4LmtleS5maWxlc19pZCA9PT0gMSAmJiBpbmRleC5rZXkubiA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIGlmICghaGFzQ2h1bmtzSW5kZXgpIHtcbiAgICAgICAgYXdhaXQgc3RyZWFtLmNodW5rcy5jcmVhdGVJbmRleChpbmRleCwge1xuICAgICAgICAgICAgLi4uc3RyZWFtLndyaXRlQ29uY2VybixcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHRydWUsXG4gICAgICAgICAgICB1bmlxdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tEb25lKHN0cmVhbSwgY2FsbGJhY2spIHtcbiAgICBpZiAoc3RyZWFtLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xuICAgIH1cbiAgICBpZiAoc3RyZWFtLnN0YXRlLnN0cmVhbUVuZCAmJiBzdHJlYW0uc3RhdGUub3V0c3RhbmRpbmdSZXF1ZXN0cyA9PT0gMCAmJiAhc3RyZWFtLnN0YXRlLmVycm9yZWQpIHtcbiAgICAgICAgLy8gU2V0IGRvbmUgc28gd2UgZG8gbm90IHRyaWdnZXIgZHVwbGljYXRlIGNyZWF0ZUZpbGVzRG9jXG4gICAgICAgIHN0cmVhbS5kb25lID0gdHJ1ZTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGZpbGVzIGRvY1xuICAgICAgICBjb25zdCBncmlkRlNGaWxlID0gY3JlYXRlRmlsZXNEb2Moc3RyZWFtLmlkLCBzdHJlYW0ubGVuZ3RoLCBzdHJlYW0uY2h1bmtTaXplQnl0ZXMsIHN0cmVhbS5maWxlbmFtZSwgc3RyZWFtLm9wdGlvbnMuY29udGVudFR5cGUsIHN0cmVhbS5vcHRpb25zLmFsaWFzZXMsIHN0cmVhbS5vcHRpb25zLm1ldGFkYXRhKTtcbiAgICAgICAgaWYgKGlzQWJvcnRlZChzdHJlYW0sIGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5maWxlcy5pbnNlcnRPbmUoZ3JpZEZTRmlsZSwgeyB3cml0ZUNvbmNlcm46IHN0cmVhbS53cml0ZUNvbmNlcm4gfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBzdHJlYW0uZ3JpZEZTRmlsZSA9IGdyaWRGU0ZpbGU7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9LCBlcnJvciA9PiBoYW5kbGVFcnJvcihzdHJlYW0sIGVycm9yLCBjYWxsYmFjaykpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tJbmRleGVzKHN0cmVhbSkge1xuICAgIGNvbnN0IGRvYyA9IGF3YWl0IHN0cmVhbS5maWxlcy5maW5kT25lKHt9LCB7IHByb2plY3Rpb246IHsgX2lkOiAxIH0gfSk7XG4gICAgaWYgKGRvYyAhPSBudWxsKSB7XG4gICAgICAgIC8vIElmIGF0IGxlYXN0IG9uZSBkb2N1bWVudCBleGlzdHMgYXNzdW1lIHRoZSBjb2xsZWN0aW9uIGhhcyB0aGUgcmVxdWlyZWQgaW5kZXhcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHsgZmlsZW5hbWU6IDEsIHVwbG9hZERhdGU6IDEgfTtcbiAgICBsZXQgaW5kZXhlcztcbiAgICB0cnkge1xuICAgICAgICBpbmRleGVzID0gYXdhaXQgc3RyZWFtLmZpbGVzLmxpc3RJbmRleGVzKCkudG9BcnJheSgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb0Vycm9yICYmIGVycm9yLmNvZGUgPT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5OYW1lc3BhY2VOb3RGb3VuZCkge1xuICAgICAgICAgICAgaW5kZXhlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaGFzRmlsZUluZGV4ID0gISFpbmRleGVzLmZpbmQoaW5kZXggPT4ge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaW5kZXgua2V5KTtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAyICYmIGluZGV4LmtleS5maWxlbmFtZSA9PT0gMSAmJiBpbmRleC5rZXkudXBsb2FkRGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIGlmICghaGFzRmlsZUluZGV4KSB7XG4gICAgICAgIGF3YWl0IHN0cmVhbS5maWxlcy5jcmVhdGVJbmRleChpbmRleCwgeyBiYWNrZ3JvdW5kOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgYXdhaXQgY2hlY2tDaHVua3NJbmRleChzdHJlYW0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRmlsZXNEb2MoX2lkLCBsZW5ndGgsIGNodW5rU2l6ZSwgZmlsZW5hbWUsIGNvbnRlbnRUeXBlLCBhbGlhc2VzLCBtZXRhZGF0YSkge1xuICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgX2lkLFxuICAgICAgICBsZW5ndGgsXG4gICAgICAgIGNodW5rU2l6ZSxcbiAgICAgICAgdXBsb2FkRGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgZmlsZW5hbWVcbiAgICB9O1xuICAgIGlmIChjb250ZW50VHlwZSkge1xuICAgICAgICByZXQuY29udGVudFR5cGUgPSBjb250ZW50VHlwZTtcbiAgICB9XG4gICAgaWYgKGFsaWFzZXMpIHtcbiAgICAgICAgcmV0LmFsaWFzZXMgPSBhbGlhc2VzO1xuICAgIH1cbiAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgcmV0Lm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGlmIChpc0Fib3J0ZWQoc3RyZWFtLCBjYWxsYmFjaykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dEJ1ZiA9IEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykgPyBjaHVuayA6IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgc3RyZWFtLmxlbmd0aCArPSBpbnB1dEJ1Zi5sZW5ndGg7XG4gICAgLy8gSW5wdXQgaXMgc21hbGwgZW5vdWdoIHRvIGZpdCBpbiBvdXIgYnVmZmVyXG4gICAgaWYgKHN0cmVhbS5wb3MgKyBpbnB1dEJ1Zi5sZW5ndGggPCBzdHJlYW0uY2h1bmtTaXplQnl0ZXMpIHtcbiAgICAgICAgaW5wdXRCdWYuY29weShzdHJlYW0uYnVmVG9TdG9yZSwgc3RyZWFtLnBvcyk7XG4gICAgICAgIHN0cmVhbS5wb3MgKz0gaW5wdXRCdWYubGVuZ3RoO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGJ1ZmZlciBpcyB0b28gYmlnIGZvciBjdXJyZW50IGNodW5rLCBzbyB3ZSBuZWVkIHRvIGZsdXNoXG4gICAgLy8gdG8gTW9uZ29EQi5cbiAgICBsZXQgaW5wdXRCdWZSZW1haW5pbmcgPSBpbnB1dEJ1Zi5sZW5ndGg7XG4gICAgbGV0IHNwYWNlUmVtYWluaW5nID0gc3RyZWFtLmNodW5rU2l6ZUJ5dGVzIC0gc3RyZWFtLnBvcztcbiAgICBsZXQgbnVtVG9Db3B5ID0gTWF0aC5taW4oc3BhY2VSZW1haW5pbmcsIGlucHV0QnVmLmxlbmd0aCk7XG4gICAgbGV0IG91dHN0YW5kaW5nUmVxdWVzdHMgPSAwO1xuICAgIHdoaWxlIChpbnB1dEJ1ZlJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgY29uc3QgaW5wdXRCdWZQb3MgPSBpbnB1dEJ1Zi5sZW5ndGggLSBpbnB1dEJ1ZlJlbWFpbmluZztcbiAgICAgICAgaW5wdXRCdWYuY29weShzdHJlYW0uYnVmVG9TdG9yZSwgc3RyZWFtLnBvcywgaW5wdXRCdWZQb3MsIGlucHV0QnVmUG9zICsgbnVtVG9Db3B5KTtcbiAgICAgICAgc3RyZWFtLnBvcyArPSBudW1Ub0NvcHk7XG4gICAgICAgIHNwYWNlUmVtYWluaW5nIC09IG51bVRvQ29weTtcbiAgICAgICAgbGV0IGRvYztcbiAgICAgICAgaWYgKHNwYWNlUmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICBkb2MgPSBjcmVhdGVDaHVua0RvYyhzdHJlYW0uaWQsIHN0cmVhbS5uLCBCdWZmZXIuZnJvbShzdHJlYW0uYnVmVG9TdG9yZSkpO1xuICAgICAgICAgICAgKytzdHJlYW0uc3RhdGUub3V0c3RhbmRpbmdSZXF1ZXN0cztcbiAgICAgICAgICAgICsrb3V0c3RhbmRpbmdSZXF1ZXN0cztcbiAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQoc3RyZWFtLCBjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJlYW0uY2h1bmtzLmluc2VydE9uZShkb2MsIHsgd3JpdGVDb25jZXJuOiBzdHJlYW0ud3JpdGVDb25jZXJuIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIC0tc3RyZWFtLnN0YXRlLm91dHN0YW5kaW5nUmVxdWVzdHM7XG4gICAgICAgICAgICAgICAgLS1vdXRzdGFuZGluZ1JlcXVlc3RzO1xuICAgICAgICAgICAgICAgIGlmICghb3V0c3RhbmRpbmdSZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0RvbmUoc3RyZWFtLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZXJyb3IgPT4gaGFuZGxlRXJyb3Ioc3RyZWFtLCBlcnJvciwgY2FsbGJhY2spKTtcbiAgICAgICAgICAgIHNwYWNlUmVtYWluaW5nID0gc3RyZWFtLmNodW5rU2l6ZUJ5dGVzO1xuICAgICAgICAgICAgc3RyZWFtLnBvcyA9IDA7XG4gICAgICAgICAgICArK3N0cmVhbS5uO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0QnVmUmVtYWluaW5nIC09IG51bVRvQ29weTtcbiAgICAgICAgbnVtVG9Db3B5ID0gTWF0aC5taW4oc3BhY2VSZW1haW5pbmcsIGlucHV0QnVmUmVtYWluaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiB3cml0ZVJlbW5hbnQoc3RyZWFtLCBjYWxsYmFjaykge1xuICAgIC8vIEJ1ZmZlciBpcyBlbXB0eSwgc28gZG9uJ3QgYm90aGVyIHRvIGluc2VydFxuICAgIGlmIChzdHJlYW0ucG9zID09PSAwKSB7XG4gICAgICAgIHJldHVybiBjaGVja0RvbmUoc3RyZWFtLCBjYWxsYmFjayk7XG4gICAgfVxuICAgICsrc3RyZWFtLnN0YXRlLm91dHN0YW5kaW5nUmVxdWVzdHM7XG4gICAgLy8gQ3JlYXRlIGEgbmV3IGJ1ZmZlciB0byBtYWtlIHN1cmUgdGhlIGJ1ZmZlciBpc24ndCBiaWdnZXIgdGhhbiBpdCBuZWVkc1xuICAgIC8vIHRvIGJlLlxuICAgIGNvbnN0IHJlbW5hbnQgPSBCdWZmZXIuYWxsb2Moc3RyZWFtLnBvcyk7XG4gICAgc3RyZWFtLmJ1ZlRvU3RvcmUuY29weShyZW1uYW50LCAwLCAwLCBzdHJlYW0ucG9zKTtcbiAgICBjb25zdCBkb2MgPSBjcmVhdGVDaHVua0RvYyhzdHJlYW0uaWQsIHN0cmVhbS5uLCByZW1uYW50KTtcbiAgICAvLyBJZiB0aGUgc3RyZWFtIHdhcyBhYm9ydGVkLCBkbyBub3Qgd3JpdGUgcmVtbmFudFxuICAgIGlmIChpc0Fib3J0ZWQoc3RyZWFtLCBjYWxsYmFjaykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdHJlYW0uY2h1bmtzLmluc2VydE9uZShkb2MsIHsgd3JpdGVDb25jZXJuOiBzdHJlYW0ud3JpdGVDb25jZXJuIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAtLXN0cmVhbS5zdGF0ZS5vdXRzdGFuZGluZ1JlcXVlc3RzO1xuICAgICAgICBjaGVja0RvbmUoc3RyZWFtLCBjYWxsYmFjayk7XG4gICAgfSwgZXJyb3IgPT4gaGFuZGxlRXJyb3Ioc3RyZWFtLCBlcnJvciwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGlzQWJvcnRlZChzdHJlYW0sIGNhbGxiYWNrKSB7XG4gICAgaWYgKHN0cmVhbS5zdGF0ZS5hYm9ydGVkKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ1N0cmVhbSBoYXMgYmVlbiBhYm9ydGVkJykpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBsb2FkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.MongoWriteConcernError = void 0;\nexports.MongoClientAuthProviders = exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({ enumerable: true, get: function () { return admin_1.Admin; } }));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({ enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } }));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({ enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } }));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({ enumerable: true, get: function () { return change_stream_1.ChangeStream; } }));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({ enumerable: true, get: function () { return collection_1.Collection; } }));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({ enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } }));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({ enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } }));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({ enumerable: true, get: function () { return find_cursor_1.FindCursor; } }));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({ enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } }));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({ enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } }));\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({ enumerable: true, get: function () { return db_1.Db; } }));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(ssr)/./node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({ enumerable: true, get: function () { return gridfs_1.GridFSBucket; } }));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({ enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } }));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({ enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } }));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({ enumerable: true, get: function () { return mongo_client_1.MongoClient; } }));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({ enumerable: true, get: function () { return mongo_types_1.CancellationToken; } }));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({ enumerable: true, get: function () { return sessions_1.ClientSession; } }));\n/** @public */\nvar bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({ enumerable: true, get: function () { return common_1.MongoBulkWriteError; } }));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({ enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } }));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({ enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } }));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({ enumerable: true, get: function () { return error_1.MongoAPIError; } }));\nObject.defineProperty(exports, \"MongoAWSError\", ({ enumerable: true, get: function () { return error_1.MongoAWSError; } }));\nObject.defineProperty(exports, \"MongoAzureError\", ({ enumerable: true, get: function () { return error_1.MongoAzureError; } }));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } }));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({ enumerable: true, get: function () { return error_1.MongoChangeStreamError; } }));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({ enumerable: true, get: function () { return error_1.MongoCompatibilityError; } }));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({ enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } }));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({ enumerable: true, get: function () { return error_1.MongoCursorInUseError; } }));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({ enumerable: true, get: function () { return error_1.MongoDecompressionError; } }));\nObject.defineProperty(exports, \"MongoDriverError\", ({ enumerable: true, get: function () { return error_1.MongoDriverError; } }));\nObject.defineProperty(exports, \"MongoError\", ({ enumerable: true, get: function () { return error_1.MongoError; } }));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({ enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } }));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } }));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } }));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({ enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoKerberosError\", ({ enumerable: true, get: function () { return error_1.MongoKerberosError; } }));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({ enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } }));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({ enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } }));\nObject.defineProperty(exports, \"MongoNetworkError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkError; } }));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } }));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({ enumerable: true, get: function () { return error_1.MongoNotConnectedError; } }));\nObject.defineProperty(exports, \"MongoParseError\", ({ enumerable: true, get: function () { return error_1.MongoParseError; } }));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({ enumerable: true, get: function () { return error_1.MongoRuntimeError; } }));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({ enumerable: true, get: function () { return error_1.MongoServerClosedError; } }));\nObject.defineProperty(exports, \"MongoServerError\", ({ enumerable: true, get: function () { return error_1.MongoServerError; } }));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({ enumerable: true, get: function () { return error_1.MongoServerSelectionError; } }));\nObject.defineProperty(exports, \"MongoSystemError\", ({ enumerable: true, get: function () { return error_1.MongoSystemError; } }));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({ enumerable: true, get: function () { return error_1.MongoTailableCursorError; } }));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({ enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } }));\nObject.defineProperty(exports, \"MongoTransactionError\", ({ enumerable: true, get: function () { return error_1.MongoTransactionError; } }));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({ enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } }));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({ enumerable: true, get: function () { return error_1.MongoWriteConcernError; } }));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({ enumerable: true, get: function () { return common_2.BatchType; } }));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({ enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } }));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({ enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } }));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({ enumerable: true, get: function () { return providers_1.AuthMechanism; } }));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({ enumerable: true, get: function () { return compression_1.Compressor; } }));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({ enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } }));\nvar error_2 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({ enumerable: true, get: function () { return error_2.MongoErrorLabel; } }));\nvar explain_1 = __webpack_require__(/*! ./explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({ enumerable: true, get: function () { return explain_1.ExplainVerbosity; } }));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({ enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } }));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({ enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } }));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({ enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } }));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({ enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } }));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({ enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } }));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({ enumerable: true, get: function () { return common_3.ServerType; } }));\nObject.defineProperty(exports, \"TopologyType\", ({ enumerable: true, get: function () { return common_3.TopologyType; } }));\n// Helper classes\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({ enumerable: true, get: function () { return read_concern_2.ReadConcern; } }));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({ enumerable: true, get: function () { return read_preference_2.ReadPreference; } }));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({ enumerable: true, get: function () { return write_concern_1.WriteConcern; } }));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } }));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } }));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } }));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } }));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } }));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } }));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({ enumerable: true, get: function () { return events_1.ServerClosedEvent; } }));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } }));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({ enumerable: true, get: function () { return events_1.ServerOpeningEvent; } }));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyClosedEvent; } }));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({ enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } }));\nvar server_selection_events_1 = __webpack_require__(/*! ./sdam/server_selection_events */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\");\nObject.defineProperty(exports, \"ServerSelectionEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionFailedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionFailedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionStartedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionStartedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionSucceededEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionSucceededEvent; } }));\nObject.defineProperty(exports, \"WaitingForSuitableServerEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.WaitingForSuitableServerEvent; } }));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({ enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } }));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } }));\nObject.defineProperty(exports, \"MongoCryptError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptError; } }));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } }));\nvar mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nObject.defineProperty(exports, \"MongoClientAuthProviders\", ({ enumerable: true, get: function () { return mongo_client_auth_providers_1.MongoClientAuthProviders; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        const shouldSetLogger = Object.values(this[kOptions].mongoLoggerOptions.componentSeverities).some(value => value !== mongo_logger_1.SeverityLevel.OFF);\n        this.mongoLogger = shouldSetLogger\n            ? new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions)\n            : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n            get options() {\n                return client[kOptions];\n            },\n            get readConcern() {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern() {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference() {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */\n    checkForNonGenuineHosts() {\n        const documentDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n        const cosmosDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger?.info('client', utils_1.DOCUMENT_DB_MSG);\n        }\n        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger?.info('client', utils_1.COSMOS_DB_MSG);\n        }\n    }\n    /** @see MongoOptions */\n    get options() {\n        return Object.freeze({ ...this[kOptions] });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({ ...this[kOptions].serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await (0, util_1.promisify)(callback => this.topology?.connect(options, callback))();\n            }\n            catch (error) {\n                this.topology?.close();\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */\n    async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true })).catch(() => null); // outcome does not matter;\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        topology.close();\n        const { encrypter } = this[kOptions];\n        if (encrypter) {\n            await encrypter.close(this, force);\n        }\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch {\n                // We are not concerned with errors from endSession()\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n//# sourceMappingURL=mongo_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHdCQUF3QjtBQUM5QyxhQUFhLG1CQUFPLENBQUMsY0FBSTtBQUN6QixlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IsZUFBZSxtQkFBTyxDQUFDLHdEQUFRO0FBQy9CLHdCQUF3QixtQkFBTyxDQUFDLDBFQUFpQjtBQUNqRCw0QkFBNEIsbUJBQU8sQ0FBQyxzR0FBK0I7QUFDbkUsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ25ELDRCQUE0QixtQkFBTyxDQUFDLGtGQUFxQjtBQUN6RCxvQkFBb0IsbUJBQU8sQ0FBQyxrRUFBYTtBQUN6QyxhQUFhLG1CQUFPLENBQUMsb0RBQU07QUFDM0IsZ0JBQWdCLG1CQUFPLENBQUMsMERBQVM7QUFDakMsc0NBQXNDLG1CQUFPLENBQUMsc0dBQStCO0FBQzdFLHVCQUF1QixtQkFBTyxDQUFDLHdFQUFnQjtBQUMvQyxzQkFBc0IsbUJBQU8sQ0FBQyxzRUFBZTtBQUM3Qyw0QkFBNEIsbUJBQU8sQ0FBQyx3R0FBZ0M7QUFDcEUsc0JBQXNCLG1CQUFPLENBQUMsNEZBQTBCO0FBQ3hELDBCQUEwQixtQkFBTyxDQUFDLDhFQUFtQjtBQUNyRCwyQkFBMkIsbUJBQU8sQ0FBQywwRkFBeUI7QUFDNUQsbUJBQW1CLG1CQUFPLENBQUMsMEVBQWlCO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLGdFQUFZO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLDBEQUFTO0FBQ2pDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBLGlFQUFpRSx1QkFBdUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixtQkFBbUI7QUFDbEQ7QUFDQTtBQUNBLDJEQUEyRCw2QkFBNkI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxLQUFLLGdFQUFnRSx1QkFBdUI7QUFDeks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLElBQUk7QUFDL0U7QUFDQSxtSEFBbUgsYUFBYSxJQUFJLHFGQUFxRixzQkFBc0I7QUFDL087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLDRCQUE0QjtBQUM3RztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsZ0hBQWdIO0FBQ3RKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fY2xpZW50LmpzP2EwYjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ2xpZW50ID0gZXhwb3J0cy5TZXJ2ZXJBcGlWZXJzaW9uID0gdm9pZCAwO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4vYnNvblwiKTtcbmNvbnN0IGNoYW5nZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCIuL2NoYW5nZV9zdHJlYW1cIik7XG5jb25zdCBtb25nb19jcmVkZW50aWFsc18xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvX2NyZWRlbnRpYWxzXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvcHJvdmlkZXJzXCIpO1xuY29uc3QgY29ubmVjdGlvbl9zdHJpbmdfMSA9IHJlcXVpcmUoXCIuL2Nvbm5lY3Rpb25fc3RyaW5nXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBkYl8xID0gcmVxdWlyZShcIi4vZGJcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5jb25zdCBtb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuL21vbmdvX2NsaWVudF9hdXRoX3Byb3ZpZGVyc1wiKTtcbmNvbnN0IG1vbmdvX2xvZ2dlcl8xID0gcmVxdWlyZShcIi4vbW9uZ29fbG9nZ2VyXCIpO1xuY29uc3QgbW9uZ29fdHlwZXNfMSA9IHJlcXVpcmUoXCIuL21vbmdvX3R5cGVzXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBydW5fY29tbWFuZF8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9ydW5fY29tbWFuZFwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuY29uc3Qgc2VydmVyX3NlbGVjdGlvbl8xID0gcmVxdWlyZShcIi4vc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uXCIpO1xuY29uc3QgdG9wb2xvZ3lfMSA9IHJlcXVpcmUoXCIuL3NkYW0vdG9wb2xvZ3lcIik7XG5jb25zdCBzZXNzaW9uc18xID0gcmVxdWlyZShcIi4vc2Vzc2lvbnNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5TZXJ2ZXJBcGlWZXJzaW9uID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgdjE6ICcxJ1xufSk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrT3B0aW9ucyA9IFN5bWJvbCgnb3B0aW9ucycpO1xuLyoqXG4gKiBUaGUgKipNb25nb0NsaWVudCoqIGNsYXNzIGlzIGEgY2xhc3MgdGhhdCBhbGxvd3MgZm9yIG1ha2luZyBDb25uZWN0aW9ucyB0byBNb25nb0RCLlxuICogQHB1YmxpY1xuICpcbiAqIEByZW1hcmtzXG4gKiBUaGUgcHJvZ3JhbW1hdGljYWxseSBwcm92aWRlZCBvcHRpb25zIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoZSBVUkkgb3B0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYic7XG4gKlxuICogLy8gRW5hYmxlIGNvbW1hbmQgbW9uaXRvcmluZyBmb3IgZGVidWdnaW5nXG4gKiBjb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQoJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcnLCB7IG1vbml0b3JDb21tYW5kczogdHJ1ZSB9KTtcbiAqXG4gKiBjbGllbnQub24oJ2NvbW1hbmRTdGFydGVkJywgc3RhcnRlZCA9PiBjb25zb2xlLmxvZyhzdGFydGVkKSk7XG4gKiBjbGllbnQuZGIoKS5jb2xsZWN0aW9uKCdwZXRzJyk7XG4gKiBhd2FpdCBjbGllbnQuaW5zZXJ0T25lKHsgbmFtZTogJ3Nwb3QnLCBraW5kOiAnZG9nJyB9KTtcbiAqIGBgYFxuICovXG5jbGFzcyBNb25nb0NsaWVudCBleHRlbmRzIG1vbmdvX3R5cGVzXzEuVHlwZWRFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzW2tPcHRpb25zXSA9ICgwLCBjb25uZWN0aW9uX3N0cmluZ18xLnBhcnNlT3B0aW9ucykodXJsLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkU2V0TG9nZ2VyID0gT2JqZWN0LnZhbHVlcyh0aGlzW2tPcHRpb25zXS5tb25nb0xvZ2dlck9wdGlvbnMuY29tcG9uZW50U2V2ZXJpdGllcykuc29tZSh2YWx1ZSA9PiB2YWx1ZSAhPT0gbW9uZ29fbG9nZ2VyXzEuU2V2ZXJpdHlMZXZlbC5PRkYpO1xuICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyID0gc2hvdWxkU2V0TG9nZ2VyXG4gICAgICAgICAgICA/IG5ldyBtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dlcih0aGlzW2tPcHRpb25zXS5tb25nb0xvZ2dlck9wdGlvbnMpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IHRoaXM7XG4gICAgICAgIC8vIFRoZSBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICB0aGlzLnMgPSB7XG4gICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICBic29uT3B0aW9uczogKDAsIGJzb25fMS5yZXNvbHZlQlNPTk9wdGlvbnMpKHRoaXNba09wdGlvbnNdKSxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogKDAsIHV0aWxzXzEubnMpKCdhZG1pbicpLFxuICAgICAgICAgICAgaGFzQmVlbkNsb3NlZDogZmFsc2UsXG4gICAgICAgICAgICBzZXNzaW9uUG9vbDogbmV3IHNlc3Npb25zXzEuU2VydmVyU2Vzc2lvblBvb2wodGhpcyksXG4gICAgICAgICAgICBhY3RpdmVTZXNzaW9uczogbmV3IFNldCgpLFxuICAgICAgICAgICAgYXV0aFByb3ZpZGVyczogbmV3IG1vbmdvX2NsaWVudF9hdXRoX3Byb3ZpZGVyc18xLk1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycygpLFxuICAgICAgICAgICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudFtrT3B0aW9uc107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHJlYWRDb25jZXJuKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnRba09wdGlvbnNdLnJlYWRDb25jZXJuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCB3cml0ZUNvbmNlcm4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudFtrT3B0aW9uc10ud3JpdGVDb25jZXJuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCByZWFkUHJlZmVyZW5jZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50W2tPcHRpb25zXS5yZWFkUHJlZmVyZW5jZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgaXNNb25nb0NsaWVudCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jaGVja0Zvck5vbkdlbnVpbmVIb3N0cygpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgY2hlY2tGb3JOb25HZW51aW5lSG9zdHMoKSB7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50REJIb3N0bmFtZXMgPSB0aGlzW2tPcHRpb25zXS5ob3N0cy5maWx0ZXIoKGhvc3RBZGRyZXNzKSA9PiAoMCwgdXRpbHNfMS5pc0hvc3RNYXRjaCkodXRpbHNfMS5ET0NVTUVOVF9EQl9DSEVDSywgaG9zdEFkZHJlc3MuaG9zdCkpO1xuICAgICAgICBjb25zdCBzcnZIb3N0SXNEb2N1bWVudERCID0gKDAsIHV0aWxzXzEuaXNIb3N0TWF0Y2gpKHV0aWxzXzEuRE9DVU1FTlRfREJfQ0hFQ0ssIHRoaXNba09wdGlvbnNdLnNydkhvc3QpO1xuICAgICAgICBjb25zdCBjb3Ntb3NEQkhvc3RuYW1lcyA9IHRoaXNba09wdGlvbnNdLmhvc3RzLmZpbHRlcigoaG9zdEFkZHJlc3MpID0+ICgwLCB1dGlsc18xLmlzSG9zdE1hdGNoKSh1dGlsc18xLkNPU01PU19EQl9DSEVDSywgaG9zdEFkZHJlc3MuaG9zdCkpO1xuICAgICAgICBjb25zdCBzcnZIb3N0SXNDb3Ntb3NEQiA9ICgwLCB1dGlsc18xLmlzSG9zdE1hdGNoKSh1dGlsc18xLkNPU01PU19EQl9DSEVDSywgdGhpc1trT3B0aW9uc10uc3J2SG9zdCk7XG4gICAgICAgIGlmIChkb2N1bWVudERCSG9zdG5hbWVzLmxlbmd0aCAhPT0gMCB8fCBzcnZIb3N0SXNEb2N1bWVudERCKSB7XG4gICAgICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyPy5pbmZvKCdjbGllbnQnLCB1dGlsc18xLkRPQ1VNRU5UX0RCX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29zbW9zREJIb3N0bmFtZXMubGVuZ3RoICE9PSAwIHx8IHNydkhvc3RJc0Nvc21vc0RCKSB7XG4gICAgICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyPy5pbmZvKCdjbGllbnQnLCB1dGlsc18xLkNPU01PU19EQl9NU0cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAc2VlIE1vbmdvT3B0aW9ucyAqL1xuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLnRoaXNba09wdGlvbnNdIH0pO1xuICAgIH1cbiAgICBnZXQgc2VydmVyQXBpKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trT3B0aW9uc10uc2VydmVyQXBpICYmIE9iamVjdC5mcmVlemUoeyAuLi50aGlzW2tPcHRpb25zXS5zZXJ2ZXJBcGkgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVuZGVkIGZvciBBUE0gdXNlIG9ubHlcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgbW9uaXRvckNvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trT3B0aW9uc10ubW9uaXRvckNvbW1hbmRzO1xuICAgIH1cbiAgICBzZXQgbW9uaXRvckNvbW1hbmRzKHZhbHVlKSB7XG4gICAgICAgIHRoaXNba09wdGlvbnNdLm1vbml0b3JDb21tYW5kcyA9IHZhbHVlO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZ2V0IGF1dG9FbmNyeXB0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tPcHRpb25zXS5hdXRvRW5jcnlwdGVyO1xuICAgIH1cbiAgICBnZXQgcmVhZENvbmNlcm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMucmVhZENvbmNlcm47XG4gICAgfVxuICAgIGdldCB3cml0ZUNvbmNlcm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMud3JpdGVDb25jZXJuO1xuICAgIH1cbiAgICBnZXQgcmVhZFByZWZlcmVuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMucmVhZFByZWZlcmVuY2U7XG4gICAgfVxuICAgIGdldCBic29uT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5ic29uT3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byBNb25nb0RCIHVzaW5nIGEgdXJsXG4gICAgICpcbiAgICAgKiBAc2VlIGRvY3MubW9uZ29kYi5vcmcvbWFudWFsL3JlZmVyZW5jZS9jb25uZWN0aW9uLXN0cmluZy9cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uTG9jaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbkxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbkxvY2sgPSB0aGlzLl9jb25uZWN0KCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb25Mb2NrO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgLy8gcmVsZWFzZVxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uTG9jayA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdG9wb2xvZ3kgdG8gb3BlbiB0aGUgY29ubmVjdGlvbiwgbXVzdCBiZSBsb2NrZWQgdG8gYXZvaWQgdG9wb2xvZ3kgbGVha3MgaW4gY29uY3VycmVuY3kgc2NlbmFyaW8uXG4gICAgICogTG9ja2luZyBpcyBlbmZvcmNlZCBieSB0aGUgY29ubmVjdCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyBfY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudG9wb2xvZ3kgJiYgdGhpcy50b3BvbG9neS5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpc1trT3B0aW9uc107XG4gICAgICAgIGlmIChvcHRpb25zLnRscykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRsc0NBRmlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNhID8/PSBhd2FpdCBmc18xLnByb21pc2VzLnJlYWRGaWxlKG9wdGlvbnMudGxzQ0FGaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50bHNDUkxGaWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuY3JsID8/PSBhd2FpdCBmc18xLnByb21pc2VzLnJlYWRGaWxlKG9wdGlvbnMudGxzQ1JMRmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMudGxzQ2VydGlmaWNhdGVLZXlGaWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5rZXkgfHwgIW9wdGlvbnMuY2VydCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50cyA9IGF3YWl0IGZzXzEucHJvbWlzZXMucmVhZEZpbGUob3B0aW9ucy50bHNDZXJ0aWZpY2F0ZUtleUZpbGUpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmtleSA/Pz0gY29udGVudHM7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY2VydCA/Pz0gY29udGVudHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zcnZIb3N0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgaG9zdHMgPSBhd2FpdCAoMCwgY29ubmVjdGlvbl9zdHJpbmdfMS5yZXNvbHZlU1JWUmVjb3JkKShvcHRpb25zKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2luZGV4LCBob3N0XSBvZiBob3N0cy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhvc3RzW2luZGV4XSA9IGhvc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIHBlcmZvcm0gdmFsaWRhdGlvbiBvZiBob3N0cyBBRlRFUiBTUlYgcmVzb2x1dGlvbiwgdG8gY2hlY2sgdGhlIHJlYWwgaG9zdG5hbWUsXG4gICAgICAgIC8vIGJ1dCBCRUZPUkUgd2UgZXZlbiBhdHRlbXB0IGNvbm5lY3Rpbmcgd2l0aCBhIHBvdGVudGlhbGx5IG5vdCBhbGxvd2VkIGhvc3RuYW1lXG4gICAgICAgIGlmIChvcHRpb25zLmNyZWRlbnRpYWxzPy5tZWNoYW5pc20gPT09IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDKSB7XG4gICAgICAgICAgICBjb25zdCBhbGxvd2VkSG9zdHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzPy5tZWNoYW5pc21Qcm9wZXJ0aWVzPy5BTExPV0VEX0hPU1RTIHx8IG1vbmdvX2NyZWRlbnRpYWxzXzEuREVGQVVMVF9BTExPV0VEX0hPU1RTO1xuICAgICAgICAgICAgY29uc3QgaXNTZXJ2aWNlQXV0aCA9ICEhb3B0aW9ucy5jcmVkZW50aWFscz8ubWVjaGFuaXNtUHJvcGVydGllcz8uUFJPVklERVJfTkFNRTtcbiAgICAgICAgICAgIGlmICghaXNTZXJ2aWNlQXV0aCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9zdCBvZiBvcHRpb25zLmhvc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKDAsIHV0aWxzXzEuaG9zdE1hdGNoZXNXaWxkY2FyZHMpKGhvc3QudG9Ib3N0UG9ydCgpLmhvc3QsIGFsbG93ZWRIb3N0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEhvc3QgJyR7aG9zdH0nIGlzIG5vdCB2YWxpZCBmb3IgT0lEQyBhdXRoZW50aWNhdGlvbiB3aXRoIEFMTE9XRURfSE9TVFMgb2YgJyR7YWxsb3dlZEhvc3RzLmpvaW4oJywnKX0nYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b3BvbG9neSA9IG5ldyB0b3BvbG9neV8xLlRvcG9sb2d5KHRoaXMsIG9wdGlvbnMuaG9zdHMsIG9wdGlvbnMpO1xuICAgICAgICAvLyBFdmVudHMgY2FuIGJlIGVtaXR0ZWQgYmVmb3JlIGluaXRpYWxpemF0aW9uIGlzIGNvbXBsZXRlIHNvIHdlIGhhdmUgdG9cbiAgICAgICAgLy8gc2F2ZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSB0b3BvbG9neSBvbiB0aGUgY2xpZW50IEFTQVAgaWYgdGhlIGV2ZW50IGhhbmRsZXJzIG5lZWQgdG8gYWNjZXNzIGl0XG4gICAgICAgIHRoaXMudG9wb2xvZ3kub25jZSh0b3BvbG9neV8xLlRvcG9sb2d5Lk9QRU4sICgpID0+IHRoaXMuZW1pdCgnb3BlbicsIHRoaXMpKTtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBjb25zdGFudHNfMS5NT05HT19DTElFTlRfRVZFTlRTKSB7XG4gICAgICAgICAgICB0aGlzLnRvcG9sb2d5Lm9uKGV2ZW50LCAoLi4uYXJncykgPT4gdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9wb2xvZ3lDb25uZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCAoMCwgdXRpbF8xLnByb21pc2lmeSkoY2FsbGJhY2sgPT4gdGhpcy50b3BvbG9neT8uY29ubmVjdChvcHRpb25zLCBjYWxsYmFjaykpKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvcG9sb2d5Py5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5hdXRvRW5jcnlwdGVyKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmF1dG9FbmNyeXB0ZXI/LmluaXQoKTtcbiAgICAgICAgICAgIGF3YWl0IHRvcG9sb2d5Q29ubmVjdCgpO1xuICAgICAgICAgICAgYXdhaXQgb3B0aW9ucy5lbmNyeXB0ZXIuY29ubmVjdEludGVybmFsQ2xpZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0b3BvbG9neUNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGNsaWVudCBhbmQgaXRzIHVuZGVybHlpbmcgY29ubmVjdGlvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3JjZSAtIEZvcmNlIGNsb3NlLCBlbWl0dGluZyBubyBldmVudHNcbiAgICAgKi9cbiAgICBhc3luYyBjbG9zZShmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIC8vIFRoZXJlJ3Mgbm8gd2F5IHRvIHNldCBoYXNCZWVuQ2xvc2VkIGJhY2sgdG8gZmFsc2VcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucywgJ2hhc0JlZW5DbG9zZWQnLCB7XG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhY3RpdmVTZXNzaW9uRW5kcyA9IEFycmF5LmZyb20odGhpcy5zLmFjdGl2ZVNlc3Npb25zLCBzZXNzaW9uID0+IHNlc3Npb24uZW5kU2Vzc2lvbigpKTtcbiAgICAgICAgdGhpcy5zLmFjdGl2ZVNlc3Npb25zLmNsZWFyKCk7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGFjdGl2ZVNlc3Npb25FbmRzKTtcbiAgICAgICAgaWYgKHRoaXMudG9wb2xvZ3kgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIHdvdWxkIGF0dGVtcHQgdG8gc2VsZWN0IGEgc2VydmVyIGFuZCBnZXQgbm90aGluZyBiYWNrIHdlIHNob3J0IGNpcmN1aXRcbiAgICAgICAgLy8gdG8gYXZvaWQgdGhlIHNlcnZlciBzZWxlY3Rpb24gdGltZW91dC5cbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnJlYWRQcmVmZXJlbmNlU2VydmVyU2VsZWN0b3IpKHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnlQcmVmZXJyZWQpO1xuICAgICAgICBjb25zdCB0b3BvbG9neURlc2NyaXB0aW9uID0gdGhpcy50b3BvbG9neS5kZXNjcmlwdGlvbjtcbiAgICAgICAgY29uc3Qgc2VydmVyRGVzY3JpcHRpb25zID0gQXJyYXkuZnJvbSh0b3BvbG9neURlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgICAgICBjb25zdCBzZXJ2ZXJzID0gc2VsZWN0b3IodG9wb2xvZ3lEZXNjcmlwdGlvbiwgc2VydmVyRGVzY3JpcHRpb25zKTtcbiAgICAgICAgaWYgKHNlcnZlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBlbmRTZXNzaW9ucyA9IEFycmF5LmZyb20odGhpcy5zLnNlc3Npb25Qb29sLnNlc3Npb25zLCAoeyBpZCB9KSA9PiBpZCk7XG4gICAgICAgICAgICBpZiAoZW5kU2Vzc2lvbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcywgbmV3IHJ1bl9jb21tYW5kXzEuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uKHsgZW5kU2Vzc2lvbnMgfSwgeyByZWFkUHJlZmVyZW5jZTogcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeVByZWZlcnJlZCwgbm9SZXNwb25zZTogdHJ1ZSB9KSkuY2F0Y2goKCkgPT4gbnVsbCk7IC8vIG91dGNvbWUgZG9lcyBub3QgbWF0dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNsZWFyIG91dCByZWZlcmVuY2VzIHRvIG9sZCB0b3BvbG9neVxuICAgICAgICBjb25zdCB0b3BvbG9neSA9IHRoaXMudG9wb2xvZ3k7XG4gICAgICAgIHRoaXMudG9wb2xvZ3kgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRvcG9sb2d5LmNsb3NlKCk7XG4gICAgICAgIGNvbnN0IHsgZW5jcnlwdGVyIH0gPSB0aGlzW2tPcHRpb25zXTtcbiAgICAgICAgaWYgKGVuY3J5cHRlcikge1xuICAgICAgICAgICAgYXdhaXQgZW5jcnlwdGVyLmNsb3NlKHRoaXMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRGIgaW5zdGFuY2Ugc2hhcmluZyB0aGUgY3VycmVudCBzb2NrZXQgY29ubmVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGJOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlIHdlIHdhbnQgdG8gdXNlLiBJZiBub3QgcHJvdmlkZWQsIHVzZSBkYXRhYmFzZSBuYW1lIGZyb20gY29ubmVjdGlvbiBzdHJpbmcuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgRGIgY29uc3RydWN0aW9uXG4gICAgICovXG4gICAgZGIoZGJOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICAvLyBEZWZhdWx0IHRvIGRiIGZyb20gY29ubmVjdGlvbiBzdHJpbmcgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgIGlmICghZGJOYW1lKSB7XG4gICAgICAgICAgICBkYk5hbWUgPSB0aGlzLm9wdGlvbnMuZGJOYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvcHkgdGhlIG9wdGlvbnMgYW5kIGFkZCBvdXQgaW50ZXJuYWwgb3ZlcnJpZGUgb2YgdGhlIG5vdCBzaGFyZWQgZmxhZ1xuICAgICAgICBjb25zdCBmaW5hbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzW2tPcHRpb25zXSwgb3B0aW9ucyk7XG4gICAgICAgIC8vIFJldHVybiB0aGUgZGIgb2JqZWN0XG4gICAgICAgIGNvbnN0IGRiID0gbmV3IGRiXzEuRGIodGhpcywgZGJOYW1lLCBmaW5hbE9wdGlvbnMpO1xuICAgICAgICAvLyBSZXR1cm4gdGhlIGRhdGFiYXNlXG4gICAgICAgIHJldHVybiBkYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byBNb25nb0RCIHVzaW5nIGEgdXJsXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBwcm9ncmFtbWF0aWNhbGx5IHByb3ZpZGVkIG9wdGlvbnMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhlIFVSSSBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2UvY29ubmVjdGlvbi1zdHJpbmcvXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNvbm5lY3QodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyB0aGlzKHVybCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBjbGllbnQuY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENsaWVudFNlc3Npb24uIFdoZW4gdXNpbmcgdGhlIHJldHVybmVkIHNlc3Npb24gaW4gYW4gb3BlcmF0aW9uXG4gICAgICogYSBjb3JyZXNwb25kaW5nIFNlcnZlclNlc3Npb24gd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBBIENsaWVudFNlc3Npb24gaW5zdGFuY2UgbWF5IG9ubHkgYmUgcGFzc2VkIHRvIG9wZXJhdGlvbnMgYmVpbmcgcGVyZm9ybWVkIG9uIHRoZSBzYW1lXG4gICAgICogTW9uZ29DbGllbnQgaXQgd2FzIHN0YXJ0ZWQgZnJvbS5cbiAgICAgKi9cbiAgICBzdGFydFNlc3Npb24ob3B0aW9ucykge1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gbmV3IHNlc3Npb25zXzEuQ2xpZW50U2Vzc2lvbih0aGlzLCB0aGlzLnMuc2Vzc2lvblBvb2wsIHsgZXhwbGljaXQ6IHRydWUsIC4uLm9wdGlvbnMgfSwgdGhpc1trT3B0aW9uc10pO1xuICAgICAgICB0aGlzLnMuYWN0aXZlU2Vzc2lvbnMuYWRkKHNlc3Npb24pO1xuICAgICAgICBzZXNzaW9uLm9uY2UoJ2VuZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zLmFjdGl2ZVNlc3Npb25zLmRlbGV0ZShzZXNzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgICBhc3luYyB3aXRoU2Vzc2lvbihvcHRpb25zT3JFeGVjdXRvciwgZXhlY3V0b3IpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC8vIEFsd2F5cyBkZWZpbmUgYW4gb3duZXJcbiAgICAgICAgICAgIG93bmVyOiBTeW1ib2woKSxcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYW4gb2JqZWN0IGluaGVyaXQgdGhlIG9wdGlvbnNcbiAgICAgICAgICAgIC4uLih0eXBlb2Ygb3B0aW9uc09yRXhlY3V0b3IgPT09ICdvYmplY3QnID8gb3B0aW9uc09yRXhlY3V0b3IgOiB7fSlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2l0aFNlc3Npb25DYWxsYmFjayA9IHR5cGVvZiBvcHRpb25zT3JFeGVjdXRvciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnNPckV4ZWN1dG9yIDogZXhlY3V0b3I7XG4gICAgICAgIGlmICh3aXRoU2Vzc2lvbkNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgY2FsbGJhY2sgcGFyYW1ldGVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc3RhcnRTZXNzaW9uKG9wdGlvbnMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHdpdGhTZXNzaW9uQ2FsbGJhY2soc2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uZW5kU2Vzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBub3QgY29uY2VybmVkIHdpdGggZXJyb3JzIGZyb20gZW5kU2Vzc2lvbigpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IENoYW5nZSBTdHJlYW0sIHdhdGNoaW5nIGZvciBuZXcgY2hhbmdlcyAoaW5zZXJ0aW9ucywgdXBkYXRlcyxcbiAgICAgKiByZXBsYWNlbWVudHMsIGRlbGV0aW9ucywgYW5kIGludmFsaWRhdGlvbnMpIGluIHRoaXMgY2x1c3Rlci4gV2lsbCBpZ25vcmUgYWxsXG4gICAgICogY2hhbmdlcyB0byBzeXN0ZW0gY29sbGVjdGlvbnMsIGFzIHdlbGwgYXMgdGhlIGxvY2FsLCBhZG1pbiwgYW5kIGNvbmZpZyBkYXRhYmFzZXMuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIHdhdGNoKCkgYWNjZXB0cyB0d28gZ2VuZXJpYyBhcmd1bWVudHMgZm9yIGRpc3RpbmN0IHVzZSBjYXNlczpcbiAgICAgKiAtIFRoZSBmaXJzdCBpcyB0byBwcm92aWRlIHRoZSBzY2hlbWEgdGhhdCBtYXkgYmUgZGVmaW5lZCBmb3IgYWxsIHRoZSBkYXRhIHdpdGhpbiB0aGUgY3VycmVudCBjbHVzdGVyXG4gICAgICogLSBUaGUgc2Vjb25kIGlzIHRvIG92ZXJyaWRlIHRoZSBzaGFwZSBvZiB0aGUgY2hhbmdlIHN0cmVhbSBkb2N1bWVudCBlbnRpcmVseSwgaWYgaXQgaXMgbm90IHByb3ZpZGVkIHRoZSB0eXBlIHdpbGwgZGVmYXVsdCB0byBDaGFuZ2VTdHJlYW1Eb2N1bWVudCBvZiB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwaXBlbGluZSAtIEFuIGFycmF5IG9mIHtAbGluayBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvb3BlcmF0b3IvYWdncmVnYXRpb24tcGlwZWxpbmUvfGFnZ3JlZ2F0aW9uIHBpcGVsaW5lIHN0YWdlc30gdGhyb3VnaCB3aGljaCB0byBwYXNzIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnRzLiBUaGlzIGFsbG93cyBmb3IgZmlsdGVyaW5nICh1c2luZyAkbWF0Y2gpIGFuZCBtYW5pcHVsYXRpbmcgdGhlIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnRzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICogQHR5cGVQYXJhbSBUU2NoZW1hIC0gVHlwZSBvZiB0aGUgZGF0YSBiZWluZyBkZXRlY3RlZCBieSB0aGUgY2hhbmdlIHN0cmVhbVxuICAgICAqIEB0eXBlUGFyYW0gVENoYW5nZSAtIFR5cGUgb2YgdGhlIHdob2xlIGNoYW5nZSBzdHJlYW0gZG9jdW1lbnQgZW1pdHRlZFxuICAgICAqL1xuICAgIHdhdGNoKHBpcGVsaW5lID0gW10sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAvLyBBbGxvdyBvcHRpb25hbGx5IG5vdCBzcGVjaWZ5aW5nIGEgcGlwZWxpbmVcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBpcGVsaW5lKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHBpcGVsaW5lO1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNoYW5nZV9zdHJlYW1fMS5DaGFuZ2VTdHJlYW0odGhpcywgcGlwZWxpbmUsICgwLCB1dGlsc18xLnJlc29sdmVPcHRpb25zKSh0aGlzLCBvcHRpb25zKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NsaWVudCA9IE1vbmdvQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29fY2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client_auth_providers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongocr_1 = __webpack_require__(/*! ./cmap/auth/mongocr */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./cmap/auth/mongodb_aws */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst plain_1 = __webpack_require__(/*! ./cmap/auth/plain */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./cmap/auth/scram */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./cmap/auth/x509 */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([\n    [providers_1.AuthMechanism.MONGODB_AWS, () => new mongodb_aws_1.MongoDBAWS()],\n    [providers_1.AuthMechanism.MONGODB_CR, () => new mongocr_1.MongoCR()],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, () => new mongodb_oidc_1.MongoDBOIDC()],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]\n]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n    constructor() {\n        this.existingProviders = new Map();\n    }\n    /**\n     * Get or create an authentication provider based on the provided mechanism.\n     * We don't want to create all providers at once, as some providers may not be used.\n     * @param name - The name of the provider to get or create.\n     * @returns The provider.\n     * @throws MongoInvalidArgumentError if the mechanism is not supported.\n     * @internal\n     */\n    getOrCreateProvider(name) {\n        const authProvider = this.existingProviders.get(name);\n        if (authProvider) {\n            return authProvider;\n        }\n        const provider = AUTH_PROVIDERS.get(name)?.();\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n        }\n        this.existingProviders.set(name, provider);\n        return provider;\n    }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;\n//# sourceMappingURL=mongo_client_auth_providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fY2xpZW50X2F1dGhfcHJvdmlkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxpQkFBaUIsbUJBQU8sQ0FBQyxnRkFBb0I7QUFDN0Msa0JBQWtCLG1CQUFPLENBQUMsa0ZBQXFCO0FBQy9DLHNCQUFzQixtQkFBTyxDQUFDLDBGQUF5QjtBQUN2RCx1QkFBdUIsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQW1CO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLHNGQUF1QjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQyw4RUFBbUI7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLDRFQUFrQjtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLE1BQU07QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanM/NTEzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29DbGllbnRBdXRoUHJvdmlkZXJzID0gdm9pZCAwO1xuY29uc3QgZ3NzYXBpXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvZ3NzYXBpXCIpO1xuY29uc3QgbW9uZ29jcl8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvY3JcIik7XG5jb25zdCBtb25nb2RiX2F3c18xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvZGJfYXdzXCIpO1xuY29uc3QgbW9uZ29kYl9vaWRjXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjXCIpO1xuY29uc3QgcGxhaW5fMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9wbGFpblwiKTtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL3Byb3ZpZGVyc1wiKTtcbmNvbnN0IHNjcmFtXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvc2NyYW1cIik7XG5jb25zdCB4NTA5XzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgveDUwOVwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IEFVVEhfUFJPVklERVJTID0gbmV3IE1hcChbXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9BV1MsICgpID0+IG5ldyBtb25nb2RiX2F3c18xLk1vbmdvREJBV1MoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9DUiwgKCkgPT4gbmV3IG1vbmdvY3JfMS5Nb25nb0NSKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfR1NTQVBJLCAoKSA9PiBuZXcgZ3NzYXBpXzEuR1NTQVBJKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQywgKCkgPT4gbmV3IG1vbmdvZGJfb2lkY18xLk1vbmdvREJPSURDKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfUExBSU4sICgpID0+IG5ldyBwbGFpbl8xLlBsYWluKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfU0NSQU1fU0hBMSwgKCkgPT4gbmV3IHNjcmFtXzEuU2NyYW1TSEExKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfU0NSQU1fU0hBMjU2LCAoKSA9PiBuZXcgc2NyYW1fMS5TY3JhbVNIQTI1NigpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1g1MDksICgpID0+IG5ldyB4NTA5XzEuWDUwOSgpXVxuXSk7XG4vKipcbiAqIENyZWF0ZSBhIHNldCBvZiBwcm92aWRlcnMgcGVyIGNsaWVudFxuICogdG8gYXZvaWQgc2hhcmluZyB0aGUgcHJvdmlkZXIncyBjYWNoZSBiZXR3ZWVuIGRpZmZlcmVudCBjbGllbnRzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIE1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXhpc3RpbmdQcm92aWRlcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBvciBjcmVhdGUgYW4gYXV0aGVudGljYXRpb24gcHJvdmlkZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG1lY2hhbmlzbS5cbiAgICAgKiBXZSBkb24ndCB3YW50IHRvIGNyZWF0ZSBhbGwgcHJvdmlkZXJzIGF0IG9uY2UsIGFzIHNvbWUgcHJvdmlkZXJzIG1heSBub3QgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm92aWRlciB0byBnZXQgb3IgY3JlYXRlLlxuICAgICAqIEByZXR1cm5zIFRoZSBwcm92aWRlci5cbiAgICAgKiBAdGhyb3dzIE1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IgaWYgdGhlIG1lY2hhbmlzbSBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldE9yQ3JlYXRlUHJvdmlkZXIobmFtZSkge1xuICAgICAgICBjb25zdCBhdXRoUHJvdmlkZXIgPSB0aGlzLmV4aXN0aW5nUHJvdmlkZXJzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGF1dGhQcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGF1dGhQcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm92aWRlciA9IEFVVEhfUFJPVklERVJTLmdldChuYW1lKT8uKCk7XG4gICAgICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYGF1dGhNZWNoYW5pc20gJHtuYW1lfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leGlzdGluZ1Byb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NsaWVudEF1dGhQcm92aWRlcnMgPSBNb25nb0NsaWVudEF1dGhQcm92aWRlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_logger.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoLogger = exports.defaultLogTransform = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.parseSeverityFromString = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\nexports.parseSeverityFromString = parseSeverityFromString;\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb) => {\n            const logLine = (0, util_1.inspect)(log, { compact: true, breakLength: Infinity });\n            stream.write(`${logLine}\\n`, 'utf-8', cb);\n            return;\n        })\n    };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = '';\n    if (typeof value === 'string') {\n        strToTruncate = value;\n    }\n    else if (typeof value === 'function') {\n        strToTruncate = value.name;\n    }\n    else {\n        try {\n            strToTruncate = bson_1.EJSON.stringify(value, options);\n        }\n        catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 &&\n        strToTruncate.length > maxDocumentLength &&\n        strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n            strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return '';\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n        ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n        : strToTruncate;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? '(redacted)';\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Starting server monitoring';\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Stopped server monitoring';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat started';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat succeeded';\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Starting topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Stopped topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Topology description changed';\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\nexports.defaultLogTransform = defaultLogTransform;\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                severities[component][severityLevel] =\n                    compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function () {\n                return {\n                    message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF)\n            return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity))\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog\n                .then(() => this.logDestination.write(logMessage))\n                .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        }\n        catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_types.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_types.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\n/**\n * Typescript type safe event emitter\n * @public\n */\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n    /** @internal */\n    emitAndLogHeartbeat(event, topologyId, serverConnectionId, ...args) {\n        this.emit(event, ...args);\n        if (this.component) {\n            const loggableHeartbeatEvent = {\n                topologyId: topologyId,\n                serverConnectionId: serverConnectionId ?? null,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(this.component, loggableHeartbeatEvent);\n        }\n    }\n    /** @internal */\n    emitAndLogCommand(monitorCommands, event, databaseName, connectionEstablished, ...args) {\n        if (monitorCommands) {\n            this.emit(event, ...args);\n        }\n        if (connectionEstablished) {\n            const loggableCommandEvent = {\n                databaseName: databaseName,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.COMMAND, loggableCommandEvent);\n        }\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\nclass CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcseUJBQXlCO0FBQ3JELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLHVCQUF1QixtQkFBTyxDQUFDLHdFQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fdHlwZXMuanM/MjlmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSBleHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgbW9uZ29fbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9tb25nb19sb2dnZXJcIik7XG4vKipcbiAqIFR5cGVzY3JpcHQgdHlwZSBzYWZlIGV2ZW50IGVtaXR0ZXJcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVHlwZWRFdmVudEVtaXR0ZXIgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBlbWl0QW5kTG9nKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudClcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKHRoaXMuY29tcG9uZW50LCBhcmdzWzBdKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2dIZWFydGJlYXQoZXZlbnQsIHRvcG9sb2d5SWQsIHNlcnZlckNvbm5lY3Rpb25JZCwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZ2dhYmxlSGVhcnRiZWF0RXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgdG9wb2xvZ3lJZDogdG9wb2xvZ3lJZCxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJDb25uZWN0aW9uSWQ6IHNlcnZlckNvbm5lY3Rpb25JZCA/PyBudWxsLFxuICAgICAgICAgICAgICAgIC4uLmFyZ3NbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyPy5kZWJ1Zyh0aGlzLmNvbXBvbmVudCwgbG9nZ2FibGVIZWFydGJlYXRFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2dDb21tYW5kKG1vbml0b3JDb21tYW5kcywgZXZlbnQsIGRhdGFiYXNlTmFtZSwgY29ubmVjdGlvbkVzdGFibGlzaGVkLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChtb25pdG9yQ29tbWFuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbm5lY3Rpb25Fc3RhYmxpc2hlZCkge1xuICAgICAgICAgICAgY29uc3QgbG9nZ2FibGVDb21tYW5kRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgZGF0YWJhc2VOYW1lOiBkYXRhYmFzZU5hbWUsXG4gICAgICAgICAgICAgICAgLi4uYXJnc1swXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKG1vbmdvX2xvZ2dlcl8xLk1vbmdvTG9nZ2FibGVDb21wb25lbnQuQ09NTUFORCwgbG9nZ2FibGVDb21tYW5kRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5UeXBlZEV2ZW50RW1pdHRlciA9IFR5cGVkRXZlbnRFbWl0dGVyO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIENhbmNlbGxhdGlvblRva2VuIGV4dGVuZHMgVHlwZWRFdmVudEVtaXR0ZXIge1xufVxuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IENhbmNlbGxhdGlvblRva2VuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29fdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/aggregate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/aggregate.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get commandName() {\n        return 'aggregate';\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9hZ2dyZWdhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsK0JBQStCO0FBQzVELGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDJFQUFrQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwyQkFBMkI7QUFDdEQseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxtQkFBbUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2FnZ3JlZ2F0ZS5qcz8zY2Y0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BZ2dyZWdhdGVPcGVyYXRpb24gPSBleHBvcnRzLkRCX0FHR1JFR0FURV9DT0xMRUNUSU9OID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCB3cml0ZV9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vd3JpdGVfY29uY2VyblwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuREJfQUdHUkVHQVRFX0NPTExFQ1RJT04gPSAxO1xuY29uc3QgTUlOX1dJUkVfVkVSU0lPTl8kT1VUX1JFQURfQ09OQ0VSTl9TVVBQT1JUID0gODtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEFnZ3JlZ2F0ZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgcGlwZWxpbmUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCB7IC4uLm9wdGlvbnMsIGRiTmFtZTogbnMuZGIgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgICAgICAvLyBDb3ZlcnMgd2hlbiBucy5jb2xsZWN0aW9uIGlzIG51bGwsIHVuZGVmaW5lZCBvciB0aGUgZW1wdHkgc3RyaW5nLCB1c2UgREJfQUdHUkVHQVRFX0NPTExFQ1RJT05cbiAgICAgICAgdGhpcy50YXJnZXQgPSBucy5jb2xsZWN0aW9uIHx8IGV4cG9ydHMuREJfQUdHUkVHQVRFX0NPTExFQ1RJT047XG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHdlIGhhdmUgYSB3cml0ZSBzdGFnZSwgb3ZlcnJpZGUgcmVhZCBwcmVmZXJlbmNlIGlmIHNvXG4gICAgICAgIHRoaXMuaGFzV3JpdGVTdGFnZSA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnM/Lm91dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMucGlwZWxpbmUgPSB0aGlzLnBpcGVsaW5lLmNvbmNhdCh7ICRvdXQ6IG9wdGlvbnMub3V0IH0pO1xuICAgICAgICAgICAgdGhpcy5oYXNXcml0ZVN0YWdlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaXBlbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmaW5hbFN0YWdlID0gcGlwZWxpbmVbcGlwZWxpbmUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoZmluYWxTdGFnZS4kb3V0IHx8IGZpbmFsU3RhZ2UuJG1lcmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNXcml0ZVN0YWdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNXcml0ZVN0YWdlKSB7XG4gICAgICAgICAgICB0aGlzLnRyeVNlY29uZGFyeVdyaXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4gJiYgdGhpcy53cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcImV4cGxhaW5cIiBjYW5ub3QgYmUgdXNlZCBvbiBhbiBhZ2dyZWdhdGUgY2FsbCB3aXRoIHdyaXRlQ29uY2VybicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zPy5jdXJzb3IgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy5jdXJzb3IgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDdXJzb3Igb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdhZ2dyZWdhdGUnO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGFzV3JpdGVTdGFnZTtcbiAgICB9XG4gICAgYWRkVG9QaXBlbGluZShzdGFnZSkge1xuICAgICAgICB0aGlzLnBpcGVsaW5lLnB1c2goc3RhZ2UpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzZXJ2ZXJXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpO1xuICAgICAgICBjb25zdCBjb21tYW5kID0geyBhZ2dyZWdhdGU6IHRoaXMudGFyZ2V0LCBwaXBlbGluZTogdGhpcy5waXBlbGluZSB9O1xuICAgICAgICBpZiAodGhpcy5oYXNXcml0ZVN0YWdlICYmIHNlcnZlcldpcmVWZXJzaW9uIDwgTUlOX1dJUkVfVkVSU0lPTl8kT1VUX1JFQURfQ09OQ0VSTl9TVVBQT1JUKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRDb25jZXJuID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UgJiYgdGhpcy53cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uYXBwbHkoY29tbWFuZCwgdGhpcy53cml0ZUNvbmNlcm4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29tbWFuZC5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPSBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWxsb3dEaXNrVXNlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYWxsb3dEaXNrVXNlID0gb3B0aW9ucy5hbGxvd0Rpc2tVc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGludCkge1xuICAgICAgICAgICAgY29tbWFuZC5oaW50ID0gb3B0aW9ucy5oaW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxldCkge1xuICAgICAgICAgICAgY29tbWFuZC5sZXQgPSBvcHRpb25zLmxldDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWFuZC5jdXJzb3IgPSBvcHRpb25zLmN1cnNvciB8fCB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmF0Y2hTaXplICYmICF0aGlzLmhhc1dyaXRlU3RhZ2UpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY3Vyc29yLmJhdGNoU2l6ZSA9IG9wdGlvbnMuYmF0Y2hTaXplO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWdncmVnYXRlT3BlcmF0aW9uID0gQWdncmVnYXRlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEFnZ3JlZ2F0ZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZ3JlZ2F0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/bulk_write.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        const result = await bulk.execute({ ...options, session });\n        return result;\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9idWxrX3dyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9idWxrX3dyaXRlLmpzPzYzZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQnVsa1dyaXRlT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wZXJhdGlvbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMub3BlcmF0aW9ucyA9IG9wZXJhdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdidWxrV3JpdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcGVyYXRpb25zID0gdGhpcy5vcGVyYXRpb25zO1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuYnNvbk9wdGlvbnMsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlIH07XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYnVsayBvcGVyYXRpb25cbiAgICAgICAgY29uc3QgYnVsayA9IG9wdGlvbnMub3JkZXJlZCA9PT0gZmFsc2VcbiAgICAgICAgICAgID8gY29sbC5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKG9wdGlvbnMpXG4gICAgICAgICAgICA6IGNvbGwuaW5pdGlhbGl6ZU9yZGVyZWRCdWxrT3Aob3B0aW9ucyk7XG4gICAgICAgIC8vIGZvciBlYWNoIG9wIGdvIHRocm91Z2ggYW5kIGFkZCB0byB0aGUgYnVsa1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wZXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ1bGsucmF3KG9wZXJhdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJ1bGtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnVsay5leGVjdXRlKHsgLi4ub3B0aW9ucywgc2Vzc2lvbiB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IEJ1bGtXcml0ZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShCdWxrV3JpdGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWxrX3dyaXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/collections.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/collections.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIscUJBQXFCLG1CQUFPLENBQUMscUVBQWU7QUFDNUMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSSwrRUFBK0U7QUFDbEg7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbGxlY3Rpb25zLmpzPzcyNzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbGxlY3Rpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb25cIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbGxlY3Rpb25zT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0Q29sbGVjdGlvbnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICAvLyBMZXQncyBnZXQgdGhlIGNvbGxlY3Rpb24gbmFtZXNcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgdGhpcy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7fSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiB0cnVlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWUgfSBvZiBkb2N1bWVudHMpIHtcbiAgICAgICAgICAgIGlmICghbmFtZS5pbmNsdWRlcygnJCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIGNvbGxlY3Rpb25zIHJlbW92aW5nIGFueSBpbGxlZ2FsIG9uZXNcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9ucy5wdXNoKG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbih0aGlzLmRiLCBuYW1lLCB0aGlzLmRiLnMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiB0aGUgY29sbGVjdGlvbiBvYmplY3RzXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLkNvbGxlY3Rpb25zT3BlcmF0aW9uID0gQ29sbGVjdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/command.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/command.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    async executeCommand(server, session, cmd) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return server.command(this.ns, cmd, options);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tYW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQywrREFBWTtBQUN0Qyx1QkFBdUIsbUJBQU8sQ0FBQyx5RUFBaUI7QUFDaEQsMkJBQTJCLG1CQUFPLENBQUMsMkZBQTBCO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDJFQUFrQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtCQUErQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tYW5kLmpzPzYwYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbW1hbmRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgZXhwbGFpbl8xID0gcmVxdWlyZShcIi4uL2V4cGxhaW5cIik7XG5jb25zdCByZWFkX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi9yZWFkX2NvbmNlcm5cIik7XG5jb25zdCBzZXJ2ZXJfc2VsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi93cml0ZV9jb25jZXJuXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb21tYW5kT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgLy8gTk9URTogdGhpcyB3YXMgZXhwbGljaXRseSBhZGRlZCBmb3IgdGhlIGFkZC9yZW1vdmUgdXNlciBvcGVyYXRpb25zLCBpdCdzIGxpa2VseVxuICAgICAgICAvLyAgICAgICBzb21ldGhpbmcgd2UnZCB3YW50IHRvIHJlY29uc2lkZXIuIFBlcmhhcHMgdGhvc2UgY29tbWFuZHMgY2FuIHVzZSBgQWRtaW5gXG4gICAgICAgIC8vICAgICAgIGFzIGEgcGFyZW50P1xuICAgICAgICBjb25zdCBkYk5hbWVPdmVycmlkZSA9IG9wdGlvbnM/LmRiTmFtZSB8fCBvcHRpb25zPy5hdXRoZGI7XG4gICAgICAgIGlmIChkYk5hbWVPdmVycmlkZSkge1xuICAgICAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoZGJOYW1lT3ZlcnJpZGUsICckY21kJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5zID0gcGFyZW50XG4gICAgICAgICAgICAgICAgPyBwYXJlbnQucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24oJyRjbWQnKVxuICAgICAgICAgICAgICAgIDogbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhZENvbmNlcm4gPSByZWFkX2NvbmNlcm5fMS5SZWFkQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy53cml0ZUNvbmNlcm4gPSB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFKSkge1xuICAgICAgICAgICAgdGhpcy5leHBsYWluID0gZXhwbGFpbl8xLkV4cGxhaW4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucz8uZXhwbGFpbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBPcHRpb24gXCJleHBsYWluXCIgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGNvbW1hbmRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlXcml0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGxhaW4gPT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpIHtcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgbWFraW5nIHRoaXMgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuYnNvbk9wdGlvbnMsXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2VydmVyV2lyZVZlcnNpb24gPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKTtcbiAgICAgICAgY29uc3QgaW5UcmFuc2FjdGlvbiA9IHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24uaW5UcmFuc2FjdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5yZWFkQ29uY2VybiAmJiAoMCwgdXRpbHNfMS5jb21tYW5kU3VwcG9ydHNSZWFkQ29uY2VybikoY21kKSAmJiAhaW5UcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjbWQsIHsgcmVhZENvbmNlcm46IHRoaXMucmVhZENvbmNlcm4gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHJ5U2Vjb25kYXJ5V3JpdGUgJiYgc2VydmVyV2lyZVZlcnNpb24gPCBzZXJ2ZXJfc2VsZWN0aW9uXzEuTUlOX1NFQ09OREFSWV9XUklURV9XSVJFX1ZFUlNJT04pIHtcbiAgICAgICAgICAgIG9wdGlvbnMub21pdFJlYWRQcmVmZXJlbmNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy53cml0ZUNvbmNlcm4gJiYgdGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTikgJiYgIWluVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uYXBwbHkoY21kLCB0aGlzLndyaXRlQ29uY2Vybik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5jb2xsYXRpb24gPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAhdGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OKSkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjbWQsIHsgY29sbGF0aW9uOiBvcHRpb25zLmNvbGxhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUpICYmIHRoaXMuZXhwbGFpbikge1xuICAgICAgICAgICAgY21kID0gKDAsIHV0aWxzXzEuZGVjb3JhdGVXaXRoRXhwbGFpbikoY21kLCB0aGlzLmV4cGxhaW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZCh0aGlzLm5zLCBjbWQsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tbWFuZE9wZXJhdGlvbiA9IENvbW1hbmRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tYW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/common_functions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/common_functions.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.maybeAddIdToDocuments = exports.indexInformation = void 0;\nasync function indexInformation(db, name, options) {\n    if (options == null) {\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    // Get the list of indexes of the specified collection\n    const indexes = await db.collection(name).listIndexes(options).toArray();\n    if (full)\n        return indexes;\n    const info = {};\n    for (const index of indexes) {\n        info[index.name] = Object.entries(index.key);\n    }\n    return info;\n}\nexports.indexInformation = indexInformation;\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docOrDocs;\n    }\n    const transform = (doc) => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    };\n    return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments;\n//# sourceMappingURL=common_functions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tb25fZnVuY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLHdCQUF3QjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbW1vbl9mdW5jdGlvbnMuanM/ZWU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWF5YmVBZGRJZFRvRG9jdW1lbnRzID0gZXhwb3J0cy5pbmRleEluZm9ybWF0aW9uID0gdm9pZCAwO1xuYXN5bmMgZnVuY3Rpb24gaW5kZXhJbmZvcm1hdGlvbihkYiwgbmFtZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICAvLyBJZiB3ZSBzcGVjaWZpZWQgZnVsbCBpbmZvcm1hdGlvblxuICAgIGNvbnN0IGZ1bGwgPSBvcHRpb25zLmZ1bGwgPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9ucy5mdWxsO1xuICAgIC8vIEdldCB0aGUgbGlzdCBvZiBpbmRleGVzIG9mIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvblxuICAgIGNvbnN0IGluZGV4ZXMgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKG5hbWUpLmxpc3RJbmRleGVzKG9wdGlvbnMpLnRvQXJyYXkoKTtcbiAgICBpZiAoZnVsbClcbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgY29uc3QgaW5mbyA9IHt9O1xuICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlcykge1xuICAgICAgICBpbmZvW2luZGV4Lm5hbWVdID0gT2JqZWN0LmVudHJpZXMoaW5kZXgua2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnRzLmluZGV4SW5mb3JtYXRpb24gPSBpbmRleEluZm9ybWF0aW9uO1xuZnVuY3Rpb24gbWF5YmVBZGRJZFRvRG9jdW1lbnRzKGNvbGwsIGRvY09yRG9jcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGZvcmNlU2VydmVyT2JqZWN0SWQgPSB0eXBlb2Ygb3B0aW9ucy5mb3JjZVNlcnZlck9iamVjdElkID09PSAnYm9vbGVhbidcbiAgICAgICAgPyBvcHRpb25zLmZvcmNlU2VydmVyT2JqZWN0SWRcbiAgICAgICAgOiBjb2xsLnMuZGIub3B0aW9ucz8uZm9yY2VTZXJ2ZXJPYmplY3RJZDtcbiAgICAvLyBubyBuZWVkIHRvIG1vZGlmeSB0aGUgZG9jcyBpZiBzZXJ2ZXIgc2V0cyB0aGUgT2JqZWN0SWRcbiAgICBpZiAoZm9yY2VTZXJ2ZXJPYmplY3RJZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZG9jT3JEb2NzO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2Zvcm0gPSAoZG9jKSA9PiB7XG4gICAgICAgIGlmIChkb2MuX2lkID09IG51bGwpIHtcbiAgICAgICAgICAgIGRvYy5faWQgPSBjb2xsLnMucGtGYWN0b3J5LmNyZWF0ZVBrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9O1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRvY09yRG9jcykgPyBkb2NPckRvY3MubWFwKHRyYW5zZm9ybSkgOiB0cmFuc2Zvcm0oZG9jT3JEb2NzKTtcbn1cbmV4cG9ydHMubWF5YmVBZGRJZFRvRG9jdW1lbnRzID0gbWF5YmVBZGRJZFRvRG9jdW1lbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uX2Z1bmN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLEtBQUssd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50LmpzP2NlYzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvdW50T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ291bnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobmFtZXNwYWNlLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBzOiB7IG5hbWVzcGFjZTogbmFtZXNwYWNlIH0gfSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbk5hbWUgPSBuYW1lc3BhY2UuY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5xdWVyeSA9IGZpbHRlcjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NvdW50JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY21kID0ge1xuICAgICAgICAgICAgY291bnQ6IHRoaXMuY29sbGVjdGlvbk5hbWUsXG4gICAgICAgICAgICBxdWVyeTogdGhpcy5xdWVyeVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubGltaXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubGltaXQgPSBvcHRpb25zLmxpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lwID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLnNraXAgPSBvcHRpb25zLnNraXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGludCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbWQuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA/IHJlc3VsdC5uIDogMDtcbiAgICB9XG59XG5leHBvcnRzLkNvdW50T3BlcmF0aW9uID0gQ291bnRPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoQ291bnRPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEVdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count_documents.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count_documents.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = __webpack_require__(/*! ./aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\n/** @internal */\nclass CountDocumentsOperation extends aggregate_1.AggregateOperation {\n    constructor(collection, query, options) {\n        const pipeline = [];\n        pipeline.push({ $match: query });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        super(collection.s.namespace, pipeline, options);\n    }\n    async execute(server, session) {\n        const result = await super.execute(server, session);\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        const response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n            return 0;\n        }\n        const docs = response.cursor.firstBatch;\n        return docs.length ? docs[0].n : 0;\n    }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation;\n//# sourceMappingURL=count_documents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudF9kb2N1bWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQSw0QkFBNEIscUJBQXFCO0FBQ2pEO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0Esd0JBQXdCLFVBQVUsYUFBYSxhQUFhO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnRfZG9jdW1lbnRzLmpzP2E5MDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvdW50RG9jdW1lbnRzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgYWdncmVnYXRlXzEgPSByZXF1aXJlKFwiLi9hZ2dyZWdhdGVcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb3VudERvY3VtZW50c09wZXJhdGlvbiBleHRlbmRzIGFnZ3JlZ2F0ZV8xLkFnZ3JlZ2F0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBbXTtcbiAgICAgICAgcGlwZWxpbmUucHVzaCh7ICRtYXRjaDogcXVlcnkgfSk7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lwID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcGlwZWxpbmUucHVzaCh7ICRza2lwOiBvcHRpb25zLnNraXAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcGlwZWxpbmUucHVzaCh7ICRsaW1pdDogb3B0aW9ucy5saW1pdCB9KTtcbiAgICAgICAgfVxuICAgICAgICBwaXBlbGluZS5wdXNoKHsgJGdyb3VwOiB7IF9pZDogMSwgbjogeyAkc3VtOiAxIH0gfSB9KTtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgcGlwZWxpbmUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIC8vIE5PVEU6IFdlJ3JlIGF2b2lkaW5nIGNyZWF0aW5nIGEgY3Vyc29yIGhlcmUgdG8gcmVkdWNlIHRoZSBjYWxsc3RhY2suXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzdWx0O1xuICAgICAgICBpZiAocmVzcG9uc2UuY3Vyc29yID09IG51bGwgfHwgcmVzcG9uc2UuY3Vyc29yLmZpcnN0QmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZG9jcyA9IHJlc3BvbnNlLmN1cnNvci5maXJzdEJhdGNoO1xuICAgICAgICByZXR1cm4gZG9jcy5sZW5ndGggPyBkb2NzWzBdLm4gOiAwO1xuICAgIH1cbn1cbmV4cG9ydHMuQ291bnREb2N1bWVudHNPcGVyYXRpb24gPSBDb3VudERvY3VtZW50c09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50X2RvY3VtZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/create_collection.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/create_collection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'create';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = new indexes_1.CreateIndexOperation(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jcmVhdGVfY29sbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMseUdBQWlDO0FBQzdELHFCQUFxQixtQkFBTyxDQUFDLHFFQUFlO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxnQkFBZ0IsR0FBRyxLQUFLO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsb0JBQW9CLHlDQUF5Qyw0Q0FBNEM7QUFDdEs7QUFDQTtBQUNBLDhFQUE4RSxLQUFLO0FBQ25GLGdGQUFnRixLQUFLO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixRQUFRO0FBQ3ZDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsb0JBQW9CLElBQUk7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jb2xsZWN0aW9uLmpzPzQ3MTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jbWFwL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzXCIpO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IGluZGV4ZXNfMSA9IHJlcXVpcmUoXCIuL2luZGV4ZXNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbmNvbnN0IElMTEVHQUxfQ09NTUFORF9GSUVMRFMgPSBuZXcgU2V0KFtcbiAgICAndycsXG4gICAgJ3d0aW1lb3V0JyxcbiAgICAnaicsXG4gICAgJ2ZzeW5jJyxcbiAgICAnYXV0b0luZGV4SWQnLFxuICAgICdwa0ZhY3RvcnknLFxuICAgICdyYXcnLFxuICAgICdyZWFkUHJlZmVyZW5jZScsXG4gICAgJ3Nlc3Npb24nLFxuICAgICdyZWFkQ29uY2VybicsXG4gICAgJ3dyaXRlQ29uY2VybicsXG4gICAgJ3JhdycsXG4gICAgJ2ZpZWxkc0FzUmF3JyxcbiAgICAndXNlQmlnSW50NjQnLFxuICAgICdwcm9tb3RlTG9uZ3MnLFxuICAgICdwcm9tb3RlVmFsdWVzJyxcbiAgICAncHJvbW90ZUJ1ZmZlcnMnLFxuICAgICdic29uUmVnRXhwJyxcbiAgICAnc2VyaWFsaXplRnVuY3Rpb25zJyxcbiAgICAnaWdub3JlVW5kZWZpbmVkJyxcbiAgICAnZW5hYmxlVXRmOFZhbGlkYXRpb24nXG5dKTtcbi8qIEBpbnRlcm5hbCAqL1xuY29uc3QgSU5WQUxJRF9RRV9WRVJTSU9OID0gJ0RyaXZlciBzdXBwb3J0IG9mIFF1ZXJ5YWJsZSBFbmNyeXB0aW9uIGlzIGluY29tcGF0aWJsZSB3aXRoIHNlcnZlci4gVXBncmFkZSBzZXJ2ZXIgdG8gdXNlIFF1ZXJ5YWJsZSBFbmNyeXB0aW9uLic7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdjcmVhdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZEZpZWxkcyA9IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzID8/XG4gICAgICAgICAgICBkYi5jbGllbnQub3B0aW9ucy5hdXRvRW5jcnlwdGlvbj8uZW5jcnlwdGVkRmllbGRzTWFwPy5bYCR7ZGIuZGF0YWJhc2VOYW1lfS4ke25hbWV9YF07XG4gICAgICAgIGlmIChlbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgIC8vIENyZWF0aW5nIGEgUUUgY29sbGVjdGlvbiByZXF1aXJlZCBtaW4gc2VydmVyIG9mIDcuMC4wXG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtNTM1Myk6IEdldCB3aXJlIHZlcnNpb24gaW5mb3JtYXRpb24gZnJvbSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgaWYgKCFzZXJ2ZXIubG9hZEJhbGFuY2VkICYmXG4gICAgICAgICAgICAgICAgc2VydmVyLmRlc2NyaXB0aW9uLm1heFdpcmVWZXJzaW9uIDwgY29uc3RhbnRzXzEuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihgJHtJTlZBTElEX1FFX1ZFUlNJT059IFRoZSBtaW5pbXVtIHNlcnZlciB2ZXJzaW9uIHJlcXVpcmVkIGlzICR7Y29uc3RhbnRzXzEuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhdXhpbGxpYXJ5IGNvbGxlY3Rpb25zIGZvciBxdWVyeWFibGUgZW5jcnlwdGlvbiBzdXBwb3J0LlxuICAgICAgICAgICAgY29uc3QgZXNjQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lc2NDb2xsZWN0aW9uID8/IGBlbnhjb2xfLiR7bmFtZX0uZXNjYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVjb2NDb2xsZWN0aW9uID8/IGBlbnhjb2xfLiR7bmFtZX0uZWNvY2A7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb25OYW1lIG9mIFtlc2NDb2xsZWN0aW9uLCBlY29jQ29sbGVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVPcCA9IG5ldyBDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uKGRiLCBjb2xsZWN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyZWRJbmRleDoge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB7IF9pZDogMSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhd2FpdCBjcmVhdGVPcC5leGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIGVuY3J5cHRlZEZpZWxkcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGwgPSBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSByZXF1aXJlZCBpbmRleCBmb3IgcXVlcnlhYmxlIGVuY3J5cHRpb24gc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUluZGV4T3AgPSBuZXcgaW5kZXhlc18xLkNyZWF0ZUluZGV4T3BlcmF0aW9uKGRiLCBuYW1lLCB7IF9fc2FmZUNvbnRlbnRfXzogMSB9LCB7fSk7XG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVJbmRleE9wLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbDtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjbWQgPSB7IGNyZWF0ZTogbmFtZSB9O1xuICAgICAgICBmb3IgKGNvbnN0IG4gaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnNbbl0gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zW25dICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgIUlMTEVHQUxfQ09NTUFORF9GSUVMRFMuaGFzKG4pKSB7XG4gICAgICAgICAgICAgICAgY21kW25dID0gb3B0aW9uc1tuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBvdGhlcndpc2UganVzdCBleGVjdXRlIHRoZSBjb21tYW5kXG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbihkYiwgbmFtZSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlX2NvbGxlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/delete.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/delete.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'delete';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsdUJBQXVCO0FBQ2hILGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxxRUFBcUUsc0JBQXNCO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kZWxldGUuanM/ZjM0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZURlbGV0ZVN0YXRlbWVudCA9IGV4cG9ydHMuRGVsZXRlTWFueU9wZXJhdGlvbiA9IGV4cG9ydHMuRGVsZXRlT25lT3BlcmF0aW9uID0gZXhwb3J0cy5EZWxldGVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRGVsZXRlT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBzdGF0ZW1lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5zdGF0ZW1lbnRzID0gc3RhdGVtZW50cztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2RlbGV0ZSc7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICBpZiAoc3VwZXIuY2FuUmV0cnlXcml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZW1lbnRzLmV2ZXJ5KG9wID0+IChvcC5saW1pdCAhPSBudWxsID8gb3AubGltaXQgPiAwIDogdHJ1ZSkpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRlbGV0ZTogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgZGVsZXRlczogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5sZXQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubGV0ID0gb3B0aW9ucy5sZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuYWNrbm93bGVkZ2VkV3JpdGUgPSB0aGlzLndyaXRlQ29uY2VybiAmJiB0aGlzLndyaXRlQ29uY2Vybi53ID09PSAwO1xuICAgICAgICBpZiAodW5hY2tub3dsZWRnZWRXcml0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVtZW50cy5maW5kKChvKSA9PiBvLmhpbnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM1NDEpOiBmaXggZXJyb3IgZm9yIGhpbnQgd2l0aCB1bmFja25vd2xlZGdlZCB3cml0ZXNcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihgaGludCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdW5hY2tub3dsZWRnZWQgd3JpdGVzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVPcGVyYXRpb24gPSBEZWxldGVPcGVyYXRpb247XG5jbGFzcyBEZWxldGVPbmVPcGVyYXRpb24gZXh0ZW5kcyBEZWxldGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZURlbGV0ZVN0YXRlbWVudChmaWx0ZXIsIHsgLi4ub3B0aW9ucywgbGltaXQ6IDEgfSldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSk7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4pXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgZGVsZXRlZENvdW50OiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVsZXRlT25lT3BlcmF0aW9uID0gRGVsZXRlT25lT3BlcmF0aW9uO1xuY2xhc3MgRGVsZXRlTWFueU9wZXJhdGlvbiBleHRlbmRzIERlbGV0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIFttYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgb3B0aW9ucyldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSk7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4pXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgZGVsZXRlZENvdW50OiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVsZXRlTWFueU9wZXJhdGlvbiA9IERlbGV0ZU1hbnlPcGVyYXRpb247XG5mdW5jdGlvbiBtYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9wID0ge1xuICAgICAgICBxOiBmaWx0ZXIsXG4gICAgICAgIGxpbWl0OiB0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmxpbWl0IDogMFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uKSB7XG4gICAgICAgIG9wLmNvbGxhdGlvbiA9IG9wdGlvbnMuY29sbGF0aW9uO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgIG9wLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgfVxuICAgIHJldHVybiBvcDtcbn1cbmV4cG9ydHMubWFrZURlbGV0ZVN0YXRlbWVudCA9IG1ha2VEZWxldGVTdGF0ZW1lbnQ7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGVsZXRlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERlbGV0ZU9uZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEZWxldGVNYW55T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGV0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/distinct.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/distinct.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    get commandName() {\n        return 'distinct';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcz84ODU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EaXN0aW5jdE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKipcbiAqIFJldHVybiBhIGxpc3Qgb2YgZGlzdGluY3QgdmFsdWVzIGZvciB0aGUgZ2l2ZW4ga2V5IGFjcm9zcyBhIGNvbGxlY3Rpb24uXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgRGlzdGluY3RPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgRGlzdGluY3Qgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb24gLSBDb2xsZWN0aW9uIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBrZXkgLSBGaWVsZCBvZiB0aGUgZG9jdW1lbnQgdG8gZmluZCBkaXN0aW5jdCB2YWx1ZXMgZm9yLlxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeSBmb3IgZmlsdGVyaW5nIHRoZSBzZXQgb2YgZG9jdW1lbnRzIHRvIHdoaWNoIHdlIGFwcGx5IHRoZSBkaXN0aW5jdCBmaWx0ZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncy4gU2VlIENvbGxlY3Rpb24ucHJvdG90eXBlLmRpc3RpbmN0IGZvciBhIGxpc3Qgb2Ygb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBrZXksIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZGlzdGluY3QnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleTtcbiAgICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAvLyBEaXN0aW5jdCBjb21tYW5kXG4gICAgICAgIGNvbnN0IGNtZCA9IHtcbiAgICAgICAgICAgIGRpc3RpbmN0OiBjb2xsLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQWRkIG1heFRpbWVNUyBpZiBkZWZpbmVkXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb21tZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG8gd2UgaGF2ZSBhIHJlYWRDb25jZXJuIHNwZWNpZmllZFxuICAgICAgICAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhSZWFkQ29uY2VybikoY21kLCBjb2xsLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSGF2ZSB3ZSBzcGVjaWZpZWQgY29sbGF0aW9uXG4gICAgICAgICgwLCB1dGlsc18xLmRlY29yYXRlV2l0aENvbGxhdGlvbikoY21kLCBjb2xsLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5leHBsYWluID8gcmVzdWx0IDogcmVzdWx0LnZhbHVlcztcbiAgICB9XG59XG5leHBvcnRzLkRpc3RpbmN0T3BlcmF0aW9uID0gRGlzdGluY3RPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGlzdGluY3RPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/drop.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/drop.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    get commandName() {\n        return 'drop';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, { drop: this.name });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dropDatabase';\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropDatabase: 1 });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLCtCQUErQjtBQUMvRCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLGdCQUFnQixHQUFHLEtBQUs7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE1BQU0sSUFBSSxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsS0FBSztBQUNuRixnRkFBZ0YsS0FBSztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlCQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kcm9wLmpzPzI0ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRyb3BEYXRhYmFzZU9wZXJhdGlvbiA9IGV4cG9ydHMuRHJvcENvbGxlY3Rpb25PcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcENvbGxlY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3AnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZEZpZWxkc01hcCA9IGRiLmNsaWVudC5vcHRpb25zLmF1dG9FbmNyeXB0aW9uPy5lbmNyeXB0ZWRGaWVsZHNNYXA7XG4gICAgICAgIGxldCBlbmNyeXB0ZWRGaWVsZHMgPSBvcHRpb25zLmVuY3J5cHRlZEZpZWxkcyA/PyBlbmNyeXB0ZWRGaWVsZHNNYXA/LltgJHtkYi5kYXRhYmFzZU5hbWV9LiR7bmFtZX1gXTtcbiAgICAgICAgaWYgKCFlbmNyeXB0ZWRGaWVsZHMgJiYgZW5jcnlwdGVkRmllbGRzTWFwKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgTW9uZ29DbGllbnQgd2FzIGNvbmZpZ3VyZWQgd2l0aCBhbiBlbmNyeXB0ZWRGaWVsZHNNYXAsXG4gICAgICAgICAgICAvLyBhbmQgbm8gZW5jcnlwdGVkRmllbGRzIGNvbmZpZyB3YXMgYXZhaWxhYmxlIGluIGl0IG9yIGV4cGxpY2l0bHlcbiAgICAgICAgICAgIC8vIHBhc3NlZCBhcyBhbiBhcmd1bWVudCwgdGhlIHNwZWMgdGVsbHMgdXMgdG8gbG9vayBvbmUgdXAgdXNpbmdcbiAgICAgICAgICAgIC8vIGxpc3RDb2xsZWN0aW9ucygpLlxuICAgICAgICAgICAgY29uc3QgbGlzdENvbGxlY3Rpb25zUmVzdWx0ID0gYXdhaXQgZGJcbiAgICAgICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZSB9LCB7IG5hbWVPbmx5OiBmYWxzZSB9KVxuICAgICAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgICAgICBlbmNyeXB0ZWRGaWVsZHMgPSBsaXN0Q29sbGVjdGlvbnNSZXN1bHQ/LlswXT8ub3B0aW9ucz8uZW5jcnlwdGVkRmllbGRzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVzY0NvbGxlY3Rpb24gPSBlbmNyeXB0ZWRGaWVsZHMuZXNjQ29sbGVjdGlvbiB8fCBgZW54Y29sXy4ke25hbWV9LmVzY2A7XG4gICAgICAgICAgICBjb25zdCBlY29jQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lY29jQ29sbGVjdGlvbiB8fCBgZW54Y29sXy4ke25hbWV9LmVjb2NgO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb2xsZWN0aW9uTmFtZSBvZiBbZXNjQ29sbGVjdGlvbiwgZWNvY0NvbGxlY3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgLy8gRHJvcCBhdXhpbGxpYXJ5IGNvbGxlY3Rpb25zLCBpZ25vcmluZyBwb3RlbnRpYWwgTmFtZXNwYWNlTm90Rm91bmQgZXJyb3JzLlxuICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BPcCA9IG5ldyBEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbihkYiwgY29sbGVjdGlvbk5hbWUpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGRyb3BPcC5leGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLmNvZGUgIT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5OYW1lc3BhY2VOb3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IGRyb3A6IHRoaXMubmFtZSB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wQ29sbGVjdGlvbk9wZXJhdGlvbiA9IERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcERhdGFiYXNlT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BEYXRhYmFzZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBkcm9wRGF0YWJhc2U6IDEgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuRHJvcERhdGFiYXNlT3BlcmF0aW9uID0gRHJvcERhdGFiYXNlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERyb3BEYXRhYmFzZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3AuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUNBQXVDO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZXN0aW1hdGVkX2RvY3VtZW50X2NvdW50LmpzP2U4ZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uY29sbGVjdGlvbk5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdjb3VudCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgY291bnQ6IHRoaXMuY29sbGVjdGlvbk5hbWUgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IHRoaXMub3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U/Lm4gfHwgMDtcbiAgICB9XG59XG5leHBvcnRzLkVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24gPSBFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzdGltYXRlZF9kb2N1bWVudF9jb3VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/execute_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * Allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided.\n *\n * The expectation is that this function:\n * - Connects the MongoClient if it has not already been connected\n * - Creates a session if none is provided and cleans up the session it creates\n * - Selects a server based on readPreference or various factors\n * - Retries an operation if it fails for certain errors, see {@link retryOperation}\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param client - The MongoClient to execute this operation with\n * @param operation - The operation to execute\n */\nasync function executeOperation(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    if (client.topology == null) {\n        // Auto connect on operation\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n        try {\n            await client.connect();\n        }\n        finally {\n            delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n        }\n    }\n    const { topology } = client;\n    if (topology == null) {\n        throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    const server = await topology.selectServerAsync(selector, {\n        session,\n        operationName: operation.commandName\n    });\n    if (session == null) {\n        // No session also means it is not retryable, early exit\n        return operation.execute(server, undefined);\n    }\n    if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n        // non-retryable operation, early exit\n        try {\n            return await operation.execute(server, session);\n        }\n        finally {\n            if (session?.owner != null && session.owner === owner) {\n                await session.endSession().catch(() => null);\n            }\n        }\n    }\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const willRetry = (hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite);\n    if (hasWriteAspect && willRetryWrite) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (operationError) {\n        if (willRetry && operationError instanceof error_1.MongoError) {\n            return await retryOperation(operation, operationError, {\n                session,\n                topology,\n                selector,\n                previousServer: server.description\n            });\n        }\n        throw operationError;\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession().catch(() => null);\n        }\n    }\n}\nexports.executeOperation = executeOperation;\nasync function retryOperation(operation, originalError, { session, topology, selector, previousServer }) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n        throw new error_1.MongoServerError({\n            message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            originalError\n        });\n    }\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n        throw originalError;\n    }\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n        throw originalError;\n    }\n    if (originalError instanceof error_1.MongoNetworkError &&\n        session.isPinned &&\n        !session.inTransaction() &&\n        operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n        // If we have a cursor and the initial command fails with a network error,\n        // we can retry it on another connection. So we need to check it back in, clear the\n        // pool for the service id, and retry again.\n        session.unpin({ force: true, forceClear: true });\n    }\n    // select a new server, and attempt to retry the operation\n    const server = await topology.selectServerAsync(selector, {\n        session,\n        operationName: operation.commandName,\n        previousServer\n    });\n    if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (retryError) {\n        if (retryError instanceof error_1.MongoError &&\n            retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n            throw originalError;\n        }\n        throw retryError;\n    }\n}\n//# sourceMappingURL=execute_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsMEJBQTBCLG1CQUFPLENBQUMsK0VBQW9CO0FBQ3RELDJCQUEyQixtQkFBTyxDQUFDLDJGQUEwQjtBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHdCQUF3QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBHQUEwRyxvQkFBb0I7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLDBEQUEwRCw2Q0FBNkM7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrQkFBK0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uLmpzP2E3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4ZWN1dGVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuY29uc3Qgc2VydmVyX3NlbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL3NkYW0vc2VydmVyX3NlbGVjdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbmNvbnN0IE1NQVB2MV9SRVRSWV9XUklURVNfRVJST1JfQ09ERSA9IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5JbGxlZ2FsT3BlcmF0aW9uO1xuY29uc3QgTU1BUHYxX1JFVFJZX1dSSVRFU19FUlJPUl9NRVNTQUdFID0gJ1RoaXMgTW9uZ29EQiBkZXBsb3ltZW50IGRvZXMgbm90IHN1cHBvcnQgcmV0cnlhYmxlIHdyaXRlcy4gUGxlYXNlIGFkZCByZXRyeVdyaXRlcz1mYWxzZSB0byB5b3VyIGNvbm5lY3Rpb24gc3RyaW5nLic7XG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aCBwcm92aWRlZCBhcmd1bWVudHMuXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBAcmVtYXJrc1xuICogQWxsb3dzIGZvciBhIHNpbmdsZSBwb2ludCBvZiBlbnRyeSB0byBwcm92aWRlIGZlYXR1cmVzIHN1Y2ggYXMgaW1wbGljaXQgc2Vzc2lvbnMsIHdoaWNoXG4gKiBhcmUgcmVxdWlyZWQgYnkgdGhlIERyaXZlciBTZXNzaW9ucyBzcGVjaWZpY2F0aW9uIGluIHRoZSBldmVudCB0aGF0IGEgQ2xpZW50U2Vzc2lvbiBpc1xuICogbm90IHByb3ZpZGVkLlxuICpcbiAqIFRoZSBleHBlY3RhdGlvbiBpcyB0aGF0IHRoaXMgZnVuY3Rpb246XG4gKiAtIENvbm5lY3RzIHRoZSBNb25nb0NsaWVudCBpZiBpdCBoYXMgbm90IGFscmVhZHkgYmVlbiBjb25uZWN0ZWRcbiAqIC0gQ3JlYXRlcyBhIHNlc3Npb24gaWYgbm9uZSBpcyBwcm92aWRlZCBhbmQgY2xlYW5zIHVwIHRoZSBzZXNzaW9uIGl0IGNyZWF0ZXNcbiAqIC0gU2VsZWN0cyBhIHNlcnZlciBiYXNlZCBvbiByZWFkUHJlZmVyZW5jZSBvciB2YXJpb3VzIGZhY3RvcnNcbiAqIC0gUmV0cmllcyBhbiBvcGVyYXRpb24gaWYgaXQgZmFpbHMgZm9yIGNlcnRhaW4gZXJyb3JzLCBzZWUge0BsaW5rIHJldHJ5T3BlcmF0aW9ufVxuICpcbiAqIEB0eXBlUGFyYW0gVCAtIFRoZSBvcGVyYXRpb24ncyB0eXBlXG4gKiBAdHlwZVBhcmFtIFRSZXN1bHQgLSBUaGUgdHlwZSBvZiB0aGUgb3BlcmF0aW9uJ3MgcmVzdWx0LCBjYWxjdWxhdGVkIGZyb20gVFxuICpcbiAqIEBwYXJhbSBjbGllbnQgLSBUaGUgTW9uZ29DbGllbnQgdG8gZXhlY3V0ZSB0aGlzIG9wZXJhdGlvbiB3aXRoXG4gKiBAcGFyYW0gb3BlcmF0aW9uIC0gVGhlIG9wZXJhdGlvbiB0byBleGVjdXRlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVPcGVyYXRpb24oY2xpZW50LCBvcGVyYXRpb24pIHtcbiAgICBpZiAoIShvcGVyYXRpb24gaW5zdGFuY2VvZiBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbikpIHtcbiAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBFeHRlbmQgTW9uZ29SdW50aW1lRXJyb3JcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ1RoaXMgbWV0aG9kIHJlcXVpcmVzIGEgdmFsaWQgb3BlcmF0aW9uIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIGlmIChjbGllbnQudG9wb2xvZ3kgPT0gbnVsbCkge1xuICAgICAgICAvLyBBdXRvIGNvbm5lY3Qgb24gb3BlcmF0aW9uXG4gICAgICAgIGlmIChjbGllbnQucy5oYXNCZWVuQ2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb05vdENvbm5lY3RlZEVycm9yKCdDbGllbnQgbXVzdCBiZSBjb25uZWN0ZWQgYmVmb3JlIHJ1bm5pbmcgb3BlcmF0aW9ucycpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWVudC5zLm9wdGlvbnNbU3ltYm9sLmZvcignQEBtZGIuc2tpcFBpbmdPbkNvbm5lY3QnKV0gPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50LmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGRlbGV0ZSBjbGllbnQucy5vcHRpb25zW1N5bWJvbC5mb3IoJ0BAbWRiLnNraXBQaW5nT25Db25uZWN0JyldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsgdG9wb2xvZ3kgfSA9IGNsaWVudDtcbiAgICBpZiAodG9wb2xvZ3kgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignY2xpZW50LmNvbm5lY3QgZGlkIG5vdCBjcmVhdGUgYSB0b3BvbG9neSBidXQgYWxzbyBkaWQgbm90IHRocm93Jyk7XG4gICAgfVxuICAgIC8vIFRoZSBkcml2ZXIgc2Vzc2lvbnMgc3BlYyBtYW5kYXRlcyB0aGF0IHdlIGltcGxpY2l0bHkgY3JlYXRlIHNlc3Npb25zIGZvciBvcGVyYXRpb25zXG4gICAgLy8gdGhhdCBhcmUgbm90IGV4cGxpY2l0bHkgcHJvdmlkZWQgd2l0aCBhIHNlc3Npb24uXG4gICAgbGV0IHNlc3Npb24gPSBvcGVyYXRpb24uc2Vzc2lvbjtcbiAgICBsZXQgb3duZXI7XG4gICAgaWYgKHNlc3Npb24gPT0gbnVsbCkge1xuICAgICAgICBvd25lciA9IFN5bWJvbCgpO1xuICAgICAgICBzZXNzaW9uID0gY2xpZW50LnN0YXJ0U2Vzc2lvbih7IG93bmVyLCBleHBsaWNpdDogZmFsc2UgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlc3Npb24uaGFzRW5kZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29FeHBpcmVkU2Vzc2lvbkVycm9yKCdVc2Ugb2YgZXhwaXJlZCBzZXNzaW9ucyBpcyBub3QgcGVybWl0dGVkJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlc3Npb24uc25hcHNob3RFbmFibGVkICYmICF0b3BvbG9neS5jYXBhYmlsaXRpZXMuc3VwcG9ydHNTbmFwc2hvdFJlYWRzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKCdTbmFwc2hvdCByZWFkcyByZXF1aXJlIE1vbmdvREIgNS4wIG9yIGxhdGVyJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlc3Npb24uY2xpZW50ICE9PSBjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignQ2xpZW50U2Vzc2lvbiBtdXN0IGJlIGZyb20gdGhlIHNhbWUgTW9uZ29DbGllbnQnKTtcbiAgICB9XG4gICAgY29uc3QgcmVhZFByZWZlcmVuY2UgPSBvcGVyYXRpb24ucmVhZFByZWZlcmVuY2UgPz8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICBjb25zdCBpblRyYW5zYWN0aW9uID0gISFzZXNzaW9uPy5pblRyYW5zYWN0aW9uKCk7XG4gICAgaWYgKGluVHJhbnNhY3Rpb24gJiYgIXJlYWRQcmVmZXJlbmNlLmVxdWFscyhyZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1RyYW5zYWN0aW9uRXJyb3IoYFJlYWQgcHJlZmVyZW5jZSBpbiBhIHRyYW5zYWN0aW9uIG11c3QgYmUgcHJpbWFyeSwgbm90OiAke3JlYWRQcmVmZXJlbmNlLm1vZGV9YCk7XG4gICAgfVxuICAgIGlmIChzZXNzaW9uPy5pc1Bpbm5lZCAmJiBzZXNzaW9uLnRyYW5zYWN0aW9uLmlzQ29tbWl0dGVkICYmICFvcGVyYXRpb24uYnlwYXNzUGlubmluZ0NoZWNrKSB7XG4gICAgICAgIHNlc3Npb24udW5waW4oKTtcbiAgICB9XG4gICAgbGV0IHNlbGVjdG9yO1xuICAgIGlmIChvcGVyYXRpb24uaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5NVVNUX1NFTEVDVF9TQU1FX1NFUlZFUikpIHtcbiAgICAgICAgLy8gR2V0TW9yZSBhbmQgS2lsbEN1cnNvciBvcGVyYXRpb25zIG11c3QgYWx3YXlzIHNlbGVjdCB0aGUgc2FtZSBzZXJ2ZXIsIGJ1dCBydW4gdGhyb3VnaFxuICAgICAgICAvLyBzZXJ2ZXIgc2VsZWN0aW9uIHRvIHBvdGVudGlhbGx5IGZvcmNlIG1vbml0b3IgY2hlY2tzIGlmIHRoZSBzZXJ2ZXIgaXNcbiAgICAgICAgLy8gaW4gYW4gdW5rbm93biBzdGF0ZS5cbiAgICAgICAgc2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnNhbWVTZXJ2ZXJTZWxlY3Rvcikob3BlcmF0aW9uLnNlcnZlcj8uZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcGVyYXRpb24udHJ5U2Vjb25kYXJ5V3JpdGUpIHtcbiAgICAgICAgLy8gSWYgb3BlcmF0aW9uIHNob3VsZCB0cnkgdG8gd3JpdGUgdG8gc2Vjb25kYXJ5IHVzZSB0aGUgY3VzdG9tIHNlcnZlciBzZWxlY3RvclxuICAgICAgICAvLyBvdGhlcndpc2UgcHJvdmlkZSB0aGUgcmVhZCBwcmVmZXJlbmNlLlxuICAgICAgICBzZWxlY3RvciA9ICgwLCBzZXJ2ZXJfc2VsZWN0aW9uXzEuc2Vjb25kYXJ5V3JpdGFibGVTZXJ2ZXJTZWxlY3RvcikodG9wb2xvZ3kuY29tbW9uV2lyZVZlcnNpb24sIHJlYWRQcmVmZXJlbmNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNlbGVjdG9yID0gcmVhZFByZWZlcmVuY2U7XG4gICAgfVxuICAgIGNvbnN0IHNlcnZlciA9IGF3YWl0IHRvcG9sb2d5LnNlbGVjdFNlcnZlckFzeW5jKHNlbGVjdG9yLCB7XG4gICAgICAgIHNlc3Npb24sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5jb21tYW5kTmFtZVxuICAgIH0pO1xuICAgIGlmIChzZXNzaW9uID09IG51bGwpIHtcbiAgICAgICAgLy8gTm8gc2Vzc2lvbiBhbHNvIG1lYW5zIGl0IGlzIG5vdCByZXRyeWFibGUsIGVhcmx5IGV4aXRcbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbi5leGVjdXRlKHNlcnZlciwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgaWYgKCFvcGVyYXRpb24uaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUpKSB7XG4gICAgICAgIC8vIG5vbi1yZXRyeWFibGUgb3BlcmF0aW9uLCBlYXJseSBleGl0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgb3BlcmF0aW9uLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uPy5vd25lciAhPSBudWxsICYmIHNlc3Npb24ub3duZXIgPT09IG93bmVyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2Vzc2lvbi5lbmRTZXNzaW9uKCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2lsbFJldHJ5UmVhZCA9IHRvcG9sb2d5LnMub3B0aW9ucy5yZXRyeVJlYWRzICYmICFpblRyYW5zYWN0aW9uICYmIG9wZXJhdGlvbi5jYW5SZXRyeVJlYWQ7XG4gICAgY29uc3Qgd2lsbFJldHJ5V3JpdGUgPSB0b3BvbG9neS5zLm9wdGlvbnMucmV0cnlXcml0ZXMgJiZcbiAgICAgICAgIWluVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuc3VwcG9ydHNSZXRyeWFibGVXcml0ZXMpKHNlcnZlcikgJiZcbiAgICAgICAgb3BlcmF0aW9uLmNhblJldHJ5V3JpdGU7XG4gICAgY29uc3QgaGFzUmVhZEFzcGVjdCA9IG9wZXJhdGlvbi5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OKTtcbiAgICBjb25zdCBoYXNXcml0ZUFzcGVjdCA9IG9wZXJhdGlvbi5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTik7XG4gICAgY29uc3Qgd2lsbFJldHJ5ID0gKGhhc1JlYWRBc3BlY3QgJiYgd2lsbFJldHJ5UmVhZCkgfHwgKGhhc1dyaXRlQXNwZWN0ICYmIHdpbGxSZXRyeVdyaXRlKTtcbiAgICBpZiAoaGFzV3JpdGVBc3BlY3QgJiYgd2lsbFJldHJ5V3JpdGUpIHtcbiAgICAgICAgb3BlcmF0aW9uLm9wdGlvbnMud2lsbFJldHJ5V3JpdGUgPSB0cnVlO1xuICAgICAgICBzZXNzaW9uLmluY3JlbWVudFRyYW5zYWN0aW9uTnVtYmVyKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBvcGVyYXRpb24uZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgIH1cbiAgICBjYXRjaCAob3BlcmF0aW9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHdpbGxSZXRyeSAmJiBvcGVyYXRpb25FcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29FcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJldHJ5T3BlcmF0aW9uKG9wZXJhdGlvbiwgb3BlcmF0aW9uRXJyb3IsIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgICAgIHRvcG9sb2d5LFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzU2VydmVyOiBzZXJ2ZXIuZGVzY3JpcHRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG9wZXJhdGlvbkVycm9yO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHNlc3Npb24/Lm93bmVyICE9IG51bGwgJiYgc2Vzc2lvbi5vd25lciA9PT0gb3duZXIpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uZW5kU2Vzc2lvbigpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5leGVjdXRlT3BlcmF0aW9uID0gZXhlY3V0ZU9wZXJhdGlvbjtcbmFzeW5jIGZ1bmN0aW9uIHJldHJ5T3BlcmF0aW9uKG9wZXJhdGlvbiwgb3JpZ2luYWxFcnJvciwgeyBzZXNzaW9uLCB0b3BvbG9neSwgc2VsZWN0b3IsIHByZXZpb3VzU2VydmVyIH0pIHtcbiAgICBjb25zdCBpc1dyaXRlT3BlcmF0aW9uID0gb3BlcmF0aW9uLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKTtcbiAgICBjb25zdCBpc1JlYWRPcGVyYXRpb24gPSBvcGVyYXRpb24uaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTik7XG4gICAgaWYgKGlzV3JpdGVPcGVyYXRpb24gJiYgb3JpZ2luYWxFcnJvci5jb2RlID09PSBNTUFQdjFfUkVUUllfV1JJVEVTX0VSUk9SX0NPREUpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBNTUFQdjFfUkVUUllfV1JJVEVTX0VSUk9SX01FU1NBR0UsXG4gICAgICAgICAgICBlcnJtc2c6IE1NQVB2MV9SRVRSWV9XUklURVNfRVJST1JfTUVTU0FHRSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3JcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc1dyaXRlT3BlcmF0aW9uICYmICEoMCwgZXJyb3JfMS5pc1JldHJ5YWJsZVdyaXRlRXJyb3IpKG9yaWdpbmFsRXJyb3IpKSB7XG4gICAgICAgIHRocm93IG9yaWdpbmFsRXJyb3I7XG4gICAgfVxuICAgIGlmIChpc1JlYWRPcGVyYXRpb24gJiYgISgwLCBlcnJvcl8xLmlzUmV0cnlhYmxlUmVhZEVycm9yKShvcmlnaW5hbEVycm9yKSkge1xuICAgICAgICB0aHJvdyBvcmlnaW5hbEVycm9yO1xuICAgIH1cbiAgICBpZiAob3JpZ2luYWxFcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3IgJiZcbiAgICAgICAgc2Vzc2lvbi5pc1Bpbm5lZCAmJlxuICAgICAgICAhc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkgJiZcbiAgICAgICAgb3BlcmF0aW9uLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HKSkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgY3Vyc29yIGFuZCB0aGUgaW5pdGlhbCBjb21tYW5kIGZhaWxzIHdpdGggYSBuZXR3b3JrIGVycm9yLFxuICAgICAgICAvLyB3ZSBjYW4gcmV0cnkgaXQgb24gYW5vdGhlciBjb25uZWN0aW9uLiBTbyB3ZSBuZWVkIHRvIGNoZWNrIGl0IGJhY2sgaW4sIGNsZWFyIHRoZVxuICAgICAgICAvLyBwb29sIGZvciB0aGUgc2VydmljZSBpZCwgYW5kIHJldHJ5IGFnYWluLlxuICAgICAgICBzZXNzaW9uLnVucGluKHsgZm9yY2U6IHRydWUsIGZvcmNlQ2xlYXI6IHRydWUgfSk7XG4gICAgfVxuICAgIC8vIHNlbGVjdCBhIG5ldyBzZXJ2ZXIsIGFuZCBhdHRlbXB0IHRvIHJldHJ5IHRoZSBvcGVyYXRpb25cbiAgICBjb25zdCBzZXJ2ZXIgPSBhd2FpdCB0b3BvbG9neS5zZWxlY3RTZXJ2ZXJBc3luYyhzZWxlY3Rvciwge1xuICAgICAgICBzZXNzaW9uLFxuICAgICAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb24uY29tbWFuZE5hbWUsXG4gICAgICAgIHByZXZpb3VzU2VydmVyXG4gICAgfSk7XG4gICAgaWYgKGlzV3JpdGVPcGVyYXRpb24gJiYgISgwLCB1dGlsc18xLnN1cHBvcnRzUmV0cnlhYmxlV3JpdGVzKShzZXJ2ZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ1NlbGVjdGVkIHNlcnZlciBkb2VzIG5vdCBzdXBwb3J0IHJldHJ5YWJsZSB3cml0ZXMnKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG9wZXJhdGlvbi5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgfVxuICAgIGNhdGNoIChyZXRyeUVycm9yKSB7XG4gICAgICAgIGlmIChyZXRyeUVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb0Vycm9yICYmXG4gICAgICAgICAgICByZXRyeUVycm9yLmhhc0Vycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuTm9Xcml0ZXNQZXJmb3JtZWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBvcmlnaW5hbEVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHJldHJ5RXJyb3I7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZV9vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(collection, ns, filter = {}, options = {}) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    get commandName() {\n        return 'find';\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return server.command(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session\n        });\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    get commandName() {\n        return 'findAndModify';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        }\n        catch (err) {\n            return err;\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : result.value ?? null;\n    }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/get_more.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/get_more.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetMoreOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'getMore';\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            ...this.options\n        };\n        return server.command(this.ns, getMoreCmd, commandOptions);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9nZXRfbW9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2dldF9tb3JlLmpzPzk5ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdldE1vcmVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgR2V0TW9yZU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgY3Vyc29ySWQsIHNlcnZlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmN1cnNvcklkID0gY3Vyc29ySWQ7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZ2V0TW9yZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsdGhvdWdoIHRoZXJlIGlzIGEgc2VydmVyIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnZXQgbW9yZSBvcGVyYXRpb24sIHRoZSBzaWduYXR1cmVcbiAgICAgKiBmb3IgZXhlY3V0ZSBwYXNzZXMgYSBzZXJ2ZXIgc28gd2Ugd2lsbCBqdXN0IHVzZSB0aGF0IG9uZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgX3Nlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdHZXRtb3JlIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJzb3JJZCA9PSBudWxsIHx8IHRoaXMuY3Vyc29ySWQuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdVbmFibGUgdG8gaXRlcmF0ZSBjdXJzb3Igd2l0aCBubyBpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLm5zLmNvbGxlY3Rpb247XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGdldE1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRNb3JlQ21kID0ge1xuICAgICAgICAgICAgZ2V0TW9yZTogdGhpcy5jdXJzb3JJZCxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5iYXRjaFNpemUgPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuYmF0Y2hTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQubWF4VGltZU1TID0gdGhpcy5vcHRpb25zLm1heEF3YWl0VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCAmJiAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSA+PSA5KSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYW5kT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJldHVybkZpZWxkU2VsZWN0b3I6IG51bGwsXG4gICAgICAgICAgICBkb2N1bWVudHNSZXR1cm5lZEluOiAnbmV4dEJhdGNoJyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmQodGhpcy5ucywgZ2V0TW9yZUNtZCwgY29tbWFuZE9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuR2V0TW9yZU9wZXJhdGlvbiA9IEdldE1vcmVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoR2V0TW9yZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0Lk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRfbW9yZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/indexes.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/indexes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return { ...options, key };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(_server, session) {\n        const coll = this.collection;\n        const options = this.options;\n        return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            full: true,\n            ...options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map(userIndex => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n            const validIndexOptions = Object.fromEntries(Object.entries({ ...userIndex }).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName)));\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    get commandName() {\n        return 'createIndexes';\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n    constructor(parent, collectionName, indexSpec, options) {\n        super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n    }\n    async execute(server, session) {\n        const indexNames = await super.execute(server, session);\n        return indexNames[0];\n    }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n    constructor(db, collectionName, indexSpec, options) {\n        super(db, collectionName, indexSpec, options);\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.db = db;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const indexName = this.indexes[0].name;\n        const indexes = await this.db\n            .collection(this.collectionName)\n            .listIndexes({ session })\n            .toArray()\n            .catch(error => {\n            if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound)\n                return [];\n            throw error;\n        });\n        if (indexName && indexes.some(index => index.name === indexName))\n            return indexName;\n        return super.execute(server, session);\n    }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    get commandName() {\n        return 'dropIndexes';\n    }\n    async execute(server, session) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n    constructor(collection, indexes, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.indexes = indexes;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const indexes = this.indexes;\n        const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        // Let's check for the index names\n        if (!Array.isArray(indexes))\n            return info[indexes] != null;\n        // All keys found return true\n        return indexes.every(indexName => info[indexName] != null);\n    }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n    constructor(db, name, options) {\n        super(options);\n        this.options = options ?? {};\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        return (0, common_functions_1.indexInformation)(db, name, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pbmRleGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQyxHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLDBCQUEwQixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLDhCQUE4QixHQUFHLHdCQUF3QjtBQUN0UCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQywwQkFBMEIsbUJBQU8sQ0FBQywrRUFBb0I7QUFDdEQsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsMkJBQTJCLG1CQUFPLENBQUMsMkZBQW9CO0FBQ3ZELG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsY0FBYztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFNBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQ0FBb0M7QUFDdEYsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5kZXhlcy5qcz81ODg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbmRleEluZm9ybWF0aW9uT3BlcmF0aW9uID0gZXhwb3J0cy5JbmRleEV4aXN0c09wZXJhdGlvbiA9IGV4cG9ydHMuTGlzdEluZGV4ZXNPcGVyYXRpb24gPSBleHBvcnRzLkRyb3BJbmRleE9wZXJhdGlvbiA9IGV4cG9ydHMuRW5zdXJlSW5kZXhPcGVyYXRpb24gPSBleHBvcnRzLkNyZWF0ZUluZGV4T3BlcmF0aW9uID0gZXhwb3J0cy5DcmVhdGVJbmRleGVzT3BlcmF0aW9uID0gZXhwb3J0cy5JbmRleGVzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3QgY29tbW9uX2Z1bmN0aW9uc18xID0gcmVxdWlyZShcIi4vY29tbW9uX2Z1bmN0aW9uc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuY29uc3QgVkFMSURfSU5ERVhfT1BUSU9OUyA9IG5ldyBTZXQoW1xuICAgICdiYWNrZ3JvdW5kJyxcbiAgICAndW5pcXVlJyxcbiAgICAnbmFtZScsXG4gICAgJ3BhcnRpYWxGaWx0ZXJFeHByZXNzaW9uJyxcbiAgICAnc3BhcnNlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnZXhwaXJlQWZ0ZXJTZWNvbmRzJyxcbiAgICAnc3RvcmFnZUVuZ2luZScsXG4gICAgJ2NvbGxhdGlvbicsXG4gICAgJ3ZlcnNpb24nLFxuICAgIC8vIHRleHQgaW5kZXhlc1xuICAgICd3ZWlnaHRzJyxcbiAgICAnZGVmYXVsdF9sYW5ndWFnZScsXG4gICAgJ2xhbmd1YWdlX292ZXJyaWRlJyxcbiAgICAndGV4dEluZGV4VmVyc2lvbicsXG4gICAgLy8gMmQtc3BoZXJlIGluZGV4ZXNcbiAgICAnMmRzcGhlcmVJbmRleFZlcnNpb24nLFxuICAgIC8vIDJkIGluZGV4ZXNcbiAgICAnYml0cycsXG4gICAgJ21pbicsXG4gICAgJ21heCcsXG4gICAgLy8gZ2VvSGF5c3RhY2sgSW5kZXhlc1xuICAgICdidWNrZXRTaXplJyxcbiAgICAvLyB3aWxkY2FyZCBpbmRleGVzXG4gICAgJ3dpbGRjYXJkUHJvamVjdGlvbidcbl0pO1xuZnVuY3Rpb24gaXNJbmRleERpcmVjdGlvbih4KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgeCA9PT0gJ251bWJlcicgfHwgeCA9PT0gJzJkJyB8fCB4ID09PSAnMmRzcGhlcmUnIHx8IHggPT09ICd0ZXh0JyB8fCB4ID09PSAnZ2VvSGF5c3RhY2snKTtcbn1cbmZ1bmN0aW9uIGlzU2luZ2xlSW5kZXhUdXBsZSh0KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodCkgJiYgdC5sZW5ndGggPT09IDIgJiYgaXNJbmRleERpcmVjdGlvbih0WzFdKTtcbn1cbmZ1bmN0aW9uIG1ha2VJbmRleFNwZWMoaW5kZXhTcGVjLCBvcHRpb25zKSB7XG4gICAgY29uc3Qga2V5ID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGluZGV4U3BlY3MgPSAhQXJyYXkuaXNBcnJheShpbmRleFNwZWMpIHx8IGlzU2luZ2xlSW5kZXhUdXBsZShpbmRleFNwZWMpID8gW2luZGV4U3BlY10gOiBpbmRleFNwZWM7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGFycmF5IGFuZCBoYW5kbGUgZGlmZmVyZW50IHR5cGVzXG4gICAgZm9yIChjb25zdCBzcGVjIG9mIGluZGV4U3BlY3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzcGVjID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAga2V5LnNldChzcGVjLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNwZWMpKSB7XG4gICAgICAgICAgICBrZXkuc2V0KHNwZWNbMF0sIHNwZWNbMV0gPz8gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3BlYyBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbcHJvcGVydHksIHZhbHVlXSBvZiBzcGVjKSB7XG4gICAgICAgICAgICAgICAga2V5LnNldChwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCgwLCB1dGlsc18xLmlzT2JqZWN0KShzcGVjKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbcHJvcGVydHksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzcGVjKSkge1xuICAgICAgICAgICAgICAgIGtleS5zZXQocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyAuLi5vcHRpb25zLCBrZXkgfTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEluZGV4ZXNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RJbmRleGVzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShfc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiAoMCwgY29tbW9uX2Z1bmN0aW9uc18xLmluZGV4SW5mb3JtYXRpb24pKGNvbGwucy5kYiwgY29sbC5jb2xsZWN0aW9uTmFtZSwge1xuICAgICAgICAgICAgZnVsbDogdHJ1ZSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5JbmRleGVzT3BlcmF0aW9uID0gSW5kZXhlc09wZXJhdGlvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENyZWF0ZUluZGV4ZXNPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBjb2xsZWN0aW9uTmFtZSwgaW5kZXhlcywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbk5hbWU7XG4gICAgICAgIHRoaXMuaW5kZXhlcyA9IGluZGV4ZXMubWFwKHVzZXJJbmRleCA9PiB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhlIGtleSBpcyBhIE1hcCB0byBwcmVzZXJ2ZSBpbmRleCBrZXkgb3JkZXJpbmdcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHVzZXJJbmRleC5rZXkgaW5zdGFuY2VvZiBNYXAgPyB1c2VySW5kZXgua2V5IDogbmV3IE1hcChPYmplY3QuZW50cmllcyh1c2VySW5kZXgua2V5KSk7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdXNlckluZGV4Lm5hbWUgIT0gbnVsbCA/IHVzZXJJbmRleC5uYW1lIDogQXJyYXkuZnJvbShrZXkpLmZsYXQoKS5qb2luKCdfJyk7XG4gICAgICAgICAgICBjb25zdCB2YWxpZEluZGV4T3B0aW9ucyA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyh7IC4uLnVzZXJJbmRleCB9KS5maWx0ZXIoKFtvcHRpb25OYW1lXSkgPT4gVkFMSURfSU5ERVhfT1BUSU9OUy5oYXMob3B0aW9uTmFtZSkpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4udmFsaWRJbmRleE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY3JlYXRlSW5kZXhlcyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLmluZGV4ZXM7XG4gICAgICAgIGNvbnN0IHNlcnZlcldpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgY3JlYXRlSW5kZXhlczogdGhpcy5jb2xsZWN0aW9uTmFtZSwgaW5kZXhlcyB9O1xuICAgICAgICBpZiAob3B0aW9ucy5jb21taXRRdW9ydW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHNlcnZlcldpcmVWZXJzaW9uIDwgOSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKCdPcHRpb24gYGNvbW1pdFF1b3J1bWAgZm9yIGBjcmVhdGVJbmRleGVzYCBub3Qgc3VwcG9ydGVkIG9uIHNlcnZlcnMgPCA0LjQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNtZC5jb21taXRRdW9ydW0gPSBvcHRpb25zLmNvbW1pdFF1b3J1bTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb2xsYXRpb24gaXMgc2V0IG9uIGVhY2ggaW5kZXgsIGl0IHNob3VsZCBub3QgYmUgZGVmaW5lZCBhdCB0aGUgcm9vdFxuICAgICAgICB0aGlzLm9wdGlvbnMuY29sbGF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIGNvbnN0IGluZGV4TmFtZXMgPSBpbmRleGVzLm1hcChpbmRleCA9PiBpbmRleC5uYW1lIHx8ICcnKTtcbiAgICAgICAgcmV0dXJuIGluZGV4TmFtZXM7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVJbmRleGVzT3BlcmF0aW9uID0gQ3JlYXRlSW5kZXhlc09wZXJhdGlvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENyZWF0ZUluZGV4T3BlcmF0aW9uIGV4dGVuZHMgQ3JlYXRlSW5kZXhlc09wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBjb2xsZWN0aW9uTmFtZSwgaW5kZXhTcGVjLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCwgY29sbGVjdGlvbk5hbWUsIFttYWtlSW5kZXhTcGVjKGluZGV4U3BlYywgb3B0aW9ucyldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgaW5kZXhOYW1lcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgcmV0dXJuIGluZGV4TmFtZXNbMF07XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVJbmRleE9wZXJhdGlvbiA9IENyZWF0ZUluZGV4T3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRW5zdXJlSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBDcmVhdGVJbmRleE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIGNvbGxlY3Rpb25OYW1lLCBpbmRleFNwZWMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIGNvbGxlY3Rpb25OYW1lLCBpbmRleFNwZWMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlYWRQcmVmZXJlbmNlID0gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbk5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0SW5kZXhlcyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGluZGV4TmFtZSA9IHRoaXMuaW5kZXhlc1swXS5uYW1lO1xuICAgICAgICBjb25zdCBpbmRleGVzID0gYXdhaXQgdGhpcy5kYlxuICAgICAgICAgICAgLmNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uTmFtZSlcbiAgICAgICAgICAgIC5saXN0SW5kZXhlcyh7IHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KClcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLk5hbWVzcGFjZU5vdEZvdW5kKVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGluZGV4TmFtZSAmJiBpbmRleGVzLnNvbWUoaW5kZXggPT4gaW5kZXgubmFtZSA9PT0gaW5kZXhOYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBpbmRleE5hbWU7XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgfVxufVxuZXhwb3J0cy5FbnN1cmVJbmRleE9wZXJhdGlvbiA9IEVuc3VyZUluZGV4T3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcEluZGV4T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGluZGV4TmFtZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5pbmRleE5hbWUgPSBpbmRleE5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkcm9wSW5kZXhlcyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgZHJvcEluZGV4ZXM6IHRoaXMuY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZSwgaW5kZXg6IHRoaXMuaW5kZXhOYW1lIH07XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wSW5kZXhPcGVyYXRpb24gPSBEcm9wSW5kZXhPcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBMaXN0SW5kZXhlc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbk5hbWVzcGFjZSA9IGNvbGxlY3Rpb24ucy5uYW1lc3BhY2U7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0SW5kZXhlcyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlcldpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGNvbnN0IGN1cnNvciA9IHRoaXMub3B0aW9ucy5iYXRjaFNpemUgPyB7IGJhdGNoU2l6ZTogdGhpcy5vcHRpb25zLmJhdGNoU2l6ZSB9IDoge307XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IGxpc3RJbmRleGVzOiB0aGlzLmNvbGxlY3Rpb25OYW1lc3BhY2UuY29sbGVjdGlvbiwgY3Vyc29yIH07XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoc2VydmVyV2lyZVZlcnNpb24gPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RJbmRleGVzT3BlcmF0aW9uID0gTGlzdEluZGV4ZXNPcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJbmRleEV4aXN0c09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBpbmRleGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmluZGV4ZXMgPSBpbmRleGVzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdEluZGV4ZXMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBpbmRleGVzID0gdGhpcy5pbmRleGVzO1xuICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgKDAsIGNvbW1vbl9mdW5jdGlvbnNfMS5pbmRleEluZm9ybWF0aW9uKShjb2xsLnMuZGIsIGNvbGwuY29sbGVjdGlvbk5hbWUsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgLy8gTGV0J3MgY2hlY2sgZm9yIHRoZSBpbmRleCBuYW1lc1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5kZXhlcykpXG4gICAgICAgICAgICByZXR1cm4gaW5mb1tpbmRleGVzXSAhPSBudWxsO1xuICAgICAgICAvLyBBbGwga2V5cyBmb3VuZCByZXR1cm4gdHJ1ZVxuICAgICAgICByZXR1cm4gaW5kZXhlcy5ldmVyeShpbmRleE5hbWUgPT4gaW5mb1tpbmRleE5hbWVdICE9IG51bGwpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5kZXhFeGlzdHNPcGVyYXRpb24gPSBJbmRleEV4aXN0c09wZXJhdGlvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEluZGV4SW5mb3JtYXRpb25PcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RJbmRleGVzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICByZXR1cm4gKDAsIGNvbW1vbl9mdW5jdGlvbnNfMS5pbmRleEluZm9ybWF0aW9uKShkYiwgbmFtZSwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5kZXhJbmZvcm1hdGlvbk9wZXJhdGlvbiA9IEluZGV4SW5mb3JtYXRpb25PcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoTGlzdEluZGV4ZXNPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDcmVhdGVJbmRleGVzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENyZWF0ZUluZGV4T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEVuc3VyZUluZGV4T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERyb3BJbmRleE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/insert.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/insert.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, common_functions_1.maybeAddIdToDocuments)(collection, [doc], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(document => ({\n            insertOne: { document }\n        })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pbnNlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsdUJBQXVCO0FBQ2xGLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDJFQUFrQjtBQUNsRCxxQkFBcUIsbUJBQU8sQ0FBQywrRUFBYztBQUMzQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQywyQkFBMkIsbUJBQU8sQ0FBQywyRkFBb0I7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5zZXJ0LmpzPzBkZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkluc2VydE1hbnlPcGVyYXRpb24gPSBleHBvcnRzLkluc2VydE9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi93cml0ZV9jb25jZXJuXCIpO1xuY29uc3QgYnVsa193cml0ZV8xID0gcmVxdWlyZShcIi4vYnVsa193cml0ZVwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBjb21tb25fZnVuY3Rpb25zXzEgPSByZXF1aXJlKFwiLi9jb21tb25fZnVuY3Rpb25zXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJbnNlcnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIGRvY3VtZW50cywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIGNoZWNrS2V5czogb3B0aW9ucy5jaGVja0tleXMgPz8gZmFsc2UgfTtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmRvY3VtZW50cyA9IGRvY3VtZW50cztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IG9yZGVyZWQgPSB0eXBlb2Ygb3B0aW9ucy5vcmRlcmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm9yZGVyZWQgOiB0cnVlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgaW5zZXJ0OiB0aGlzLm5zLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkb2N1bWVudHM6IHRoaXMuZG9jdW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID0gb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gSW5zZXJ0T3BlcmF0aW9uO1xuY2xhc3MgSW5zZXJ0T25lT3BlcmF0aW9uIGV4dGVuZHMgSW5zZXJ0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2MsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgKDAsIGNvbW1vbl9mdW5jdGlvbnNfMS5tYXliZUFkZElkVG9Eb2N1bWVudHMpKGNvbGxlY3Rpb24sIFtkb2NdLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKHJlcy5jb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMpO1xuICAgICAgICBpZiAocmVzLndyaXRlRXJyb3JzKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBhIFdyaXRlRXJyb3IgYnV0IHdlIGNhbid0IGNoYW5nZSBpdCBub3cgYmVjYXVzZSBvZiBlcnJvciBoaWVyYXJjaHlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB0aGlzLndyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgIGluc2VydGVkSWQ6IHRoaXMuZG9jdW1lbnRzWzBdLl9pZFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T25lT3BlcmF0aW9uID0gSW5zZXJ0T25lT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSW5zZXJ0TWFueU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2NzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZG9jcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IFwiZG9jc1wiIG11c3QgYmUgYW4gYXJyYXkgb2YgZG9jdW1lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5kb2NzID0gZG9jcztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4udGhpcy5ic29uT3B0aW9ucywgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UgfTtcbiAgICAgICAgY29uc3Qgd3JpdGVDb25jZXJuID0gd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgY29uc3QgYnVsa1dyaXRlT3BlcmF0aW9uID0gbmV3IGJ1bGtfd3JpdGVfMS5CdWxrV3JpdGVPcGVyYXRpb24oY29sbCwgdGhpcy5kb2NzLm1hcChkb2N1bWVudCA9PiAoe1xuICAgICAgICAgICAgaW5zZXJ0T25lOiB7IGRvY3VtZW50IH1cbiAgICAgICAgfSkpLCBvcHRpb25zKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGJ1bGtXcml0ZU9wZXJhdGlvbi5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFja25vd2xlZGdlZDogd3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgICAgIGluc2VydGVkQ291bnQ6IHJlcy5pbnNlcnRlZENvdW50LFxuICAgICAgICAgICAgICAgIGluc2VydGVkSWRzOiByZXMuaW5zZXJ0ZWRJZHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIubWVzc2FnZSA9PT0gJ09wZXJhdGlvbiBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGFuIG9wZXJhdGlvbiBrZXknKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignQ29sbGVjdGlvbi5pbnNlcnRNYW55KCkgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGFycmF5IHRoYXQgaGFzIG51bGwvdW5kZWZpbmVkIHZhbHVlcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5JbnNlcnRNYW55T3BlcmF0aW9uID0gSW5zZXJ0TWFueU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShJbnNlcnRPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoSW5zZXJ0T25lT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEluc2VydE1hbnlPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnNlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/is_capped.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/is_capped.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pc19jYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJCQUEyQixJQUFJLGdGQUFnRjtBQUM5STtBQUNBO0FBQ0EsMERBQTBELGdCQUFnQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2lzX2NhcHBlZC5qcz8xMDA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Jc0NhcHBlZE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIElzQ2FwcGVkT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0Q29sbGVjdGlvbnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBbY29sbGVjdGlvbl0gPSBhd2FpdCBjb2xsLnMuZGJcbiAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lOiBjb2xsLmNvbGxlY3Rpb25OYW1lIH0sIHsgLi4udGhpcy5vcHRpb25zLCBuYW1lT25seTogZmFsc2UsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLCBzZXNzaW9uIH0pXG4gICAgICAgICAgICAudG9BcnJheSgpO1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsIHx8IGNvbGxlY3Rpb24ub3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKGBjb2xsZWN0aW9uICR7Y29sbC5uYW1lc3BhY2V9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWNvbGxlY3Rpb24ub3B0aW9ucz8uY2FwcGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuSXNDYXBwZWRPcGVyYXRpb24gPSBJc0NhcHBlZE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzX2NhcHBlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'killCursors';\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.command(this.ns, killCursorsCommand, { session });\n        }\n        catch {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9raWxsX2N1cnNvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLFNBQVM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9raWxsX2N1cnNvcnMuanM/ZWVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2lsbEN1cnNvcnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG5jbGFzcyBLaWxsQ3Vyc29yc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihjdXJzb3JJZCwgbnMsIHNlcnZlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmN1cnNvcklkID0gY3Vyc29ySWQ7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAna2lsbEN1cnNvcnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBpZiAoc2VydmVyICE9PSB0aGlzLnNlcnZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0tpbGxjdXJzb3IgbXVzdCBydW4gb24gdGhlIHNhbWUgc2VydmVyIG9wZXJhdGlvbiBiZWdhbiBvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtpbGxDdXJzb3JzID0gdGhpcy5ucy5jb2xsZWN0aW9uO1xuICAgICAgICBpZiAoa2lsbEN1cnNvcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQ3Vyc29ycyBzaG91bGQgaGF2ZSBhZG9wdGVkIHRoZSBuYW1lc3BhY2UgcmV0dXJuZWQgYnkgTW9uZ29EQlxuICAgICAgICAgICAgLy8gd2hpY2ggc2hvdWxkIGFsd2F5cyBkZWZpbmVkIGEgY29sbGVjdGlvbiBuYW1lIChldmVuIGEgcHNldWRvIG9uZSwgZXguIGRiLmFnZ3JlZ2F0ZSgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0EgY29sbGVjdGlvbiBuYW1lIG11c3QgYmUgZGV0ZXJtaW5lZCBiZWZvcmUga2lsbEN1cnNvcnMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBraWxsQ3Vyc29yc0NvbW1hbmQgPSB7XG4gICAgICAgICAgICBraWxsQ3Vyc29ycyxcbiAgICAgICAgICAgIGN1cnNvcnM6IFt0aGlzLmN1cnNvcklkXVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2VydmVyLmNvbW1hbmQodGhpcy5ucywga2lsbEN1cnNvcnNDb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgLy8gVGhlIGRyaXZlciBzaG91bGQgbmV2ZXIgZW1pdCBlcnJvcnMgZnJvbSBraWxsQ3Vyc29ycywgdGhpcyBpcyBzcGVjLWVkIGJlaGF2aW9yXG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLktpbGxDdXJzb3JzT3BlcmF0aW9uID0gS2lsbEN1cnNvcnNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoS2lsbEN1cnNvcnNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVJdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtpbGxfY3Vyc29ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_collections.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_collections.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDRCQUE0QixJQUFJO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9jb2xsZWN0aW9ucy5qcz8wMjg1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMubmFtZU9ubHkgPSAhIXRoaXMub3B0aW9ucy5uYW1lT25seTtcbiAgICAgICAgdGhpcy5hdXRob3JpemVkQ29sbGVjdGlvbnMgPSAhIXRoaXMub3B0aW9ucy5hdXRob3JpemVkQ29sbGVjdGlvbnM7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmJhdGNoU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuYmF0Y2hTaXplID0gdGhpcy5vcHRpb25zLmJhdGNoU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgdGhpcy5nZW5lcmF0ZUNvbW1hbmQoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikpKTtcbiAgICB9XG4gICAgLyogVGhpcyBpcyBoZXJlIGZvciB0aGUgcHVycG9zZSBvZiB1bml0IHRlc3RpbmcgdGhlIGZpbmFsIGNvbW1hbmQgdGhhdCBnZXRzIHNlbnQuICovXG4gICAgZ2VuZXJhdGVDb21tYW5kKHdpcmVWZXJzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBsaXN0Q29sbGVjdGlvbnM6IDEsXG4gICAgICAgICAgICBmaWx0ZXI6IHRoaXMuZmlsdGVyLFxuICAgICAgICAgICAgY3Vyc29yOiB0aGlzLmJhdGNoU2l6ZSA/IHsgYmF0Y2hTaXplOiB0aGlzLmJhdGNoU2l6ZSB9IDoge30sXG4gICAgICAgICAgICBuYW1lT25seTogdGhpcy5uYW1lT25seSxcbiAgICAgICAgICAgIGF1dGhvcml6ZWRDb2xsZWN0aW9uczogdGhpcy5hdXRob3JpemVkQ29sbGVjdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh3aXJlVmVyc2lvbiA+PSA5ICYmIHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uID0gTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9jb2xsZWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_databases.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_databases.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'listDatabases';\n    }\n    async execute(server, session) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlcy5qcz84Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0RGF0YWJhc2VzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIExpc3REYXRhYmFzZXNPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdERhdGFiYXNlcyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgbGlzdERhdGFiYXNlczogMSB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5uYW1lT25seSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjbWQubmFtZU9ubHkgPSB0aGlzLm9wdGlvbnMubmFtZU9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgICAgICAgIGNtZC5maWx0ZXIgPSB0aGlzLm9wdGlvbnMuZmlsdGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmF1dGhvcml6ZWREYXRhYmFzZXMgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY21kLmF1dGhvcml6ZWREYXRhYmFzZXMgPSB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpID49IDkgJiYgdGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdERhdGFiYXNlc09wZXJhdGlvbiA9IExpc3REYXRhYmFzZXNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoTGlzdERhdGFiYXNlc09wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9kYXRhYmFzZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/operation.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/operation.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects;\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcseUJBQXlCLEdBQUcsY0FBYztBQUNsRSxlQUFlLG1CQUFPLENBQUMseURBQVM7QUFDaEMsMEJBQTBCLG1CQUFPLENBQUMsK0VBQW9CO0FBQ3RELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL29wZXJhdGlvbi5qcz9hMjE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZpbmVBc3BlY3RzID0gZXhwb3J0cy5BYnN0cmFjdE9wZXJhdGlvbiA9IGV4cG9ydHMuQXNwZWN0ID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCByZWFkX3ByZWZlcmVuY2VfMSA9IHJlcXVpcmUoXCIuLi9yZWFkX3ByZWZlcmVuY2VcIik7XG5leHBvcnRzLkFzcGVjdCA9IHtcbiAgICBSRUFEX09QRVJBVElPTjogU3ltYm9sKCdSRUFEX09QRVJBVElPTicpLFxuICAgIFdSSVRFX09QRVJBVElPTjogU3ltYm9sKCdXUklURV9PUEVSQVRJT04nKSxcbiAgICBSRVRSWUFCTEU6IFN5bWJvbCgnUkVUUllBQkxFJyksXG4gICAgRVhQTEFJTkFCTEU6IFN5bWJvbCgnRVhQTEFJTkFCTEUnKSxcbiAgICBTS0lQX0NPTExBVElPTjogU3ltYm9sKCdTS0lQX0NPTExBVElPTicpLFxuICAgIENVUlNPUl9DUkVBVElORzogU3ltYm9sKCdDVVJTT1JfQ1JFQVRJTkcnKSxcbiAgICBNVVNUX1NFTEVDVF9TQU1FX1NFUlZFUjogU3ltYm9sKCdNVVNUX1NFTEVDVF9TQU1FX1NFUlZFUicpXG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qga1Nlc3Npb24gPSBTeW1ib2woJ3Nlc3Npb24nKTtcbi8qKlxuICogVGhpcyBjbGFzcyBhY3RzIGFzIGEgcGFyZW50IGNsYXNzIGZvciBhbnkgb3BlcmF0aW9uIGFuZCBpcyByZXNwb25zaWJsZSBmb3Igc2V0dGluZyB0aGlzLm9wdGlvbnMsXG4gKiBhcyB3ZWxsIGFzIHNldHRpbmcgYW5kIGdldHRpbmcgYSBzZXNzaW9uLlxuICogQWRkaXRpb25hbGx5LCB0aGlzIGNsYXNzIGltcGxlbWVudHMgYGhhc0FzcGVjdGAsIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBhbiBvcGVyYXRpb24gaGFzXG4gKiBhIHNwZWNpZmljIGFzcGVjdC5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMucmVhZFByZWZlcmVuY2UgPSB0aGlzLmhhc0FzcGVjdChleHBvcnRzLkFzcGVjdC5XUklURV9PUEVSQVRJT04pXG4gICAgICAgICAgICA/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnlcbiAgICAgICAgICAgIDogcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UuZnJvbU9wdGlvbnMob3B0aW9ucykgPz8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICAgICAgLy8gUHVsbCB0aGUgQlNPTiBzZXJpYWxpemUgb3B0aW9ucyBmcm9tIHRoZSBhbHJlYWR5LXJlc29sdmVkIG9wdGlvbnNcbiAgICAgICAgdGhpcy5ic29uT3B0aW9ucyA9ICgwLCBic29uXzEucmVzb2x2ZUJTT05PcHRpb25zKShvcHRpb25zKTtcbiAgICAgICAgdGhpc1trU2Vzc2lvbl0gPSBvcHRpb25zLnNlc3Npb24gIT0gbnVsbCA/IG9wdGlvbnMuc2Vzc2lvbiA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ieXBhc3NQaW5uaW5nQ2hlY2sgPSAhIW9wdGlvbnMuYnlwYXNzUGlubmluZ0NoZWNrO1xuICAgICAgICB0aGlzLnRyeVNlY29uZGFyeVdyaXRlID0gZmFsc2U7XG4gICAgfVxuICAgIGhhc0FzcGVjdChhc3BlY3QpIHtcbiAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChjdG9yLmFzcGVjdHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdG9yLmFzcGVjdHMuaGFzKGFzcGVjdCk7XG4gICAgfVxuICAgIGdldCBzZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trU2Vzc2lvbl07XG4gICAgfVxuICAgIGNsZWFyU2Vzc2lvbigpIHtcbiAgICAgICAgdGhpc1trU2Vzc2lvbl0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVJlYWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlXcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5BYnN0cmFjdE9wZXJhdGlvbiA9IEFic3RyYWN0T3BlcmF0aW9uO1xuZnVuY3Rpb24gZGVmaW5lQXNwZWN0cyhvcGVyYXRpb24sIGFzcGVjdHMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXNwZWN0cykgJiYgIShhc3BlY3RzIGluc3RhbmNlb2YgU2V0KSkge1xuICAgICAgICBhc3BlY3RzID0gW2FzcGVjdHNdO1xuICAgIH1cbiAgICBhc3BlY3RzID0gbmV3IFNldChhc3BlY3RzKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3BlcmF0aW9uLCAnYXNwZWN0cycsIHtcbiAgICAgICAgdmFsdWU6IGFzcGVjdHMsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBhc3BlY3RzO1xufVxuZXhwb3J0cy5kZWZpbmVBc3BlY3RzID0gZGVmaW5lQXNwZWN0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/options_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/options_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcHRpb25zX29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkJBQTJCLElBQUksZ0ZBQWdGO0FBQzlJO0FBQ0E7QUFDQSwwREFBMEQsZ0JBQWdCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3B0aW9uc19vcGVyYXRpb24uanM/NTdmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3B0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIE9wdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IFtjb2xsZWN0aW9uXSA9IGF3YWl0IGNvbGwucy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWU6IGNvbGwuY29sbGVjdGlvbk5hbWUgfSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiBmYWxzZSwgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsIHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgY29sbGVjdGlvbi5vcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYGNvbGxlY3Rpb24gJHtjb2xsLm5hbWVzcGFjZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24ub3B0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLk9wdGlvbnNPcGVyYXRpb24gPSBPcHRpb25zT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3B0aW9uc19vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/profiling_level.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, { profile: -1 });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGFBQWE7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRyxJQUFJO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3Byb2ZpbGluZ19sZXZlbC5qcz9kODg3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncHJvZmlsZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGRvYyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBwcm9maWxlOiAtMSB9KTtcbiAgICAgICAgaWYgKGRvYy5vayA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3Qgd2FzID0gZG9jLndhcztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuICdvZmYnO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Nsb3dfb25seSc7XG4gICAgICAgICAgICBpZiAod2FzID09PSAyKVxuICAgICAgICAgICAgICAgIHJldHVybiAnYWxsJztcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoYElsbGVnYWwgcHJvZmlsaW5nIGxldmVsIHZhbHVlICR7d2FzfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcignRXJyb3Igd2l0aCBwcm9maWxlIGNvbW1hbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSBQcm9maWxpbmdMZXZlbE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2ZpbGluZ19sZXZlbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/remove_user.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/remove_user.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    get commandName() {\n        return 'dropUser';\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropUser: this.username });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcz80YTFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZW1vdmVVc2VyT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUmVtb3ZlVXNlck9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgdXNlcm5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkcm9wVXNlcic7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBkcm9wVXNlcjogdGhpcy51c2VybmFtZSB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5SZW1vdmVVc2VyT3BlcmF0aW9uID0gUmVtb3ZlVXNlck9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShSZW1vdmVVc2VyT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlX3VzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/rename.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/rename.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'renameCollection';\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLHFCQUFxQixtQkFBTyxDQUFDLHFFQUFlO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbmFtZS5qcz80ZWVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZW5hbWVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBSZW5hbWVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmV3TmFtZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uZXdOYW1lID0gbmV3TmFtZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3JlbmFtZUNvbGxlY3Rpb24nO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICAvLyBCdWlsZCB0aGUgY29tbWFuZFxuICAgICAgICBjb25zdCByZW5hbWVDb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uLm5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgdG9Db2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uLnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKHRoaXMubmV3TmFtZSkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgZHJvcFRhcmdldCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMuZHJvcFRhcmdldCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRpb25zLmRyb3BUYXJnZXQgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHJlbmFtZUNvbGxlY3Rpb246IHJlbmFtZUNvbGxlY3Rpb24sXG4gICAgICAgICAgICB0bzogdG9Db2xsZWN0aW9uLFxuICAgICAgICAgICAgZHJvcFRhcmdldDogZHJvcFRhcmdldFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgICAgICByZXR1cm4gbmV3IGNvbGxlY3Rpb25fMS5Db2xsZWN0aW9uKHRoaXMuY29sbGVjdGlvbi5zLmRiLCB0aGlzLm5ld05hbWUsIHRoaXMuY29sbGVjdGlvbi5zLm9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVuYW1lT3BlcmF0aW9uID0gUmVuYW1lT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKFJlbmFtZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmFtZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/run_command.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/run_command.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9ydW5fY29tbWFuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRywyQkFBMkI7QUFDOUQsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9ydW5fY29tbWFuZC5qcz80ZjA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24gPSBleHBvcnRzLlJ1bkNvbW1hbmRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBSdW5Db21tYW5kT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgY29tbWFuZCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IHBhcmVudC5zLm5hbWVzcGFjZS53aXRoQ29sbGVjdGlvbignJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncnVuQ29tbWFuZCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmQodGhpcy5ucywgdGhpcy5jb21tYW5kLCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5SdW5Db21tYW5kT3BlcmF0aW9uID0gUnVuQ29tbWFuZE9wZXJhdGlvbjtcbmNsYXNzIFJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncnVuQ29tbWFuZCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmQodGhpcy5ucywgdGhpcy5jb21tYW5kLCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5SdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24gPSBSdW5BZG1pbkNvbW1hbmRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5fY29tbWFuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    get commandName() {\n        return 'createSearchIndexes';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.command(namespace, command, { session });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9jcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFNBQVM7QUFDeEU7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvY3JlYXRlLmpzPzY1NmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGRlc2NyaXB0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9ucyA9IGRlc2NyaXB0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NyZWF0ZVNlYXJjaEluZGV4ZXMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGNyZWF0ZVNlYXJjaEluZGV4ZXM6IG5hbWVzcGFjZS5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgaW5kZXhlczogdGhpcy5kZXNjcmlwdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIGNvbnN0IGluZGV4ZXNDcmVhdGVkID0gcmVzPy5pbmRleGVzQ3JlYXRlZCA/PyBbXTtcbiAgICAgICAgcmV0dXJuIGluZGV4ZXNDcmVhdGVkLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiA9IENyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    get commandName() {\n        return 'dropSearchIndex';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.command(namespace, command, { session });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9kcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw4RUFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxTQUFTO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2Ryb3AuanM/ZjFhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHJvcFNlYXJjaEluZGV4T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkcm9wU2VhcmNoSW5kZXgnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRyb3BTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb21tYW5kLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kKG5hbWVzcGFjZSwgY29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgaXNOYW1lc3BhY2VOb3RGb3VuZEVycm9yID0gZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLk5hbWVzcGFjZU5vdEZvdW5kO1xuICAgICAgICAgICAgaWYgKCFpc05hbWVzcGFjZU5vdEZvdW5kRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRHJvcFNlYXJjaEluZGV4T3BlcmF0aW9uID0gRHJvcFNlYXJjaEluZGV4T3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    get commandName() {\n        return 'updateSearchIndex';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.command(namespace, command, { session });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxTQUFTO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL3VwZGF0ZS5qcz84NzNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5hbWUsIGRlZmluaXRpb24pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3VwZGF0ZVNlYXJjaEluZGV4JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5jb2xsZWN0aW9uLmZ1bGxOYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICB1cGRhdGVTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZWZpbml0aW9uOiB0aGlzLmRlZmluaXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5leHBvcnRzLlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uID0gVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZXRfcHJvZmlsaW5nX2xldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQyxHQUFHLHNCQUFzQjtBQUMzRCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQztBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsa0RBQWtEO0FBQzdJO0FBQ0E7QUFDQSxzREFBc0QsdUJBQXVCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NldF9wcm9maWxpbmdfbGV2ZWwuanM/OGM2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSBleHBvcnRzLlByb2ZpbGluZ0xldmVsID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3QgbGV2ZWxWYWx1ZXMgPSBuZXcgU2V0KFsnb2ZmJywgJ3Nsb3dfb25seScsICdhbGwnXSk7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCA9IE9iamVjdC5mcmVlemUoe1xuICAgIG9mZjogJ29mZicsXG4gICAgc2xvd09ubHk6ICdzbG93X29ubHknLFxuICAgIGFsbDogJ2FsbCdcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIGxldmVsLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLm9mZjpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLnNsb3dPbmx5OlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwuYWxsOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncHJvZmlsZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5sZXZlbDtcbiAgICAgICAgaWYgKCFsZXZlbFZhbHVlcy5oYXMobGV2ZWwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBQcm9maWxpbmcgbGV2ZWwgbXVzdCBiZSBvbmUgb2YgXCIkeygwLCB1dGlsc18xLmVudW1Ub1N0cmluZykoZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCl9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IERldGVybWluZSBlcnJvciB0byBwdXQgaGVyZVxuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgcHJvZmlsZTogdGhpcy5wcm9maWxlIH0pO1xuICAgICAgICByZXR1cm4gbGV2ZWw7XG4gICAgfVxufVxuZXhwb3J0cy5TZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IFNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0X3Byb2ZpbGluZ19sZXZlbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/stats.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/stats.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dbStats';\n    }\n    async execute(server, session) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcz9jYjNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYlN0YXRzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRGJTdGF0c09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkYlN0YXRzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHsgZGJTdGF0czogdHJ1ZSB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNjYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuc2NhbGUgPSB0aGlzLm9wdGlvbnMuc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgfVxufVxuZXhwb3J0cy5EYlN0YXRzT3BlcmF0aW9uID0gRGJTdGF0c09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEYlN0YXRzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/update.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/update.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'update';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsdUJBQXVCO0FBQzlJLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSwwQkFBMEI7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSx5QkFBeUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRiwwQkFBMEI7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdXBkYXRlLmpzPzJiNjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1ha2VVcGRhdGVTdGF0ZW1lbnQgPSBleHBvcnRzLlJlcGxhY2VPbmVPcGVyYXRpb24gPSBleHBvcnRzLlVwZGF0ZU1hbnlPcGVyYXRpb24gPSBleHBvcnRzLlVwZGF0ZU9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuVXBkYXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogVXBkYXRlT3BlcmF0aW9uIGlzIHVzZWQgaW4gYnVsayB3cml0ZSwgd2hpbGUgVXBkYXRlT25lT3BlcmF0aW9uIGFuZCBVcGRhdGVNYW55T3BlcmF0aW9uIGFyZSBvbmx5IHVzZWQgaW4gdGhlIGNvbGxlY3Rpb25zIEFQSVxuICovXG5jbGFzcyBVcGRhdGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIHN0YXRlbWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndXBkYXRlJztcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIGlmIChzdXBlci5jYW5SZXRyeVdyaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZlcnkob3AgPT4gb3AubXVsdGkgPT0gbnVsbCB8fCBvcC5tdWx0aSA9PT0gZmFsc2UpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHVwZGF0ZTogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgdXBkYXRlczogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID0gb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgICAgICBjb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1bmFja25vd2xlZGdlZFdyaXRlID0gdGhpcy53cml0ZUNvbmNlcm4gJiYgdGhpcy53cml0ZUNvbmNlcm4udyA9PT0gMDtcbiAgICAgICAgaWYgKHVuYWNrbm93bGVkZ2VkV3JpdGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlbWVudHMuZmluZCgobykgPT4gby5oaW50KSkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNTQxKTogZml4IGVycm9yIGZvciBoaW50IHdpdGggdW5hY2tub3dsZWRnZWQgd3JpdGVzXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoYGhpbnQgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHVuYWNrbm93bGVkZ2VkIHdyaXRlc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuVXBkYXRlT3BlcmF0aW9uID0gVXBkYXRlT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVXBkYXRlT25lT3BlcmF0aW9uIGV4dGVuZHMgVXBkYXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZVVwZGF0ZVN0YXRlbWVudChmaWx0ZXIsIHVwZGF0ZSwgeyAuLi5vcHRpb25zLCBtdWx0aTogZmFsc2UgfSldLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMS5oYXNBdG9taWNPcGVyYXRvcnMpKHVwZGF0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1VwZGF0ZSBkb2N1bWVudCByZXF1aXJlcyBhdG9taWMgb3BlcmF0b3JzJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICBpZiAodGhpcy5leHBsYWluICE9IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgbW9kaWZpZWRDb3VudDogcmVzLm5Nb2RpZmllZCA/PyByZXMubixcbiAgICAgICAgICAgIHVwc2VydGVkSWQ6IEFycmF5LmlzQXJyYXkocmVzLnVwc2VydGVkKSAmJiByZXMudXBzZXJ0ZWQubGVuZ3RoID4gMCA/IHJlcy51cHNlcnRlZFswXS5faWQgOiBudWxsLFxuICAgICAgICAgICAgdXBzZXJ0ZWRDb3VudDogQXJyYXkuaXNBcnJheShyZXMudXBzZXJ0ZWQpICYmIHJlcy51cHNlcnRlZC5sZW5ndGggPyByZXMudXBzZXJ0ZWQubGVuZ3RoIDogMCxcbiAgICAgICAgICAgIG1hdGNoZWRDb3VudDogQXJyYXkuaXNBcnJheShyZXMudXBzZXJ0ZWQpICYmIHJlcy51cHNlcnRlZC5sZW5ndGggPiAwID8gMCA6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5VcGRhdGVPbmVPcGVyYXRpb24gPSBVcGRhdGVPbmVPcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBVcGRhdGVNYW55T3BlcmF0aW9uIGV4dGVuZHMgVXBkYXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZVVwZGF0ZVN0YXRlbWVudChmaWx0ZXIsIHVwZGF0ZSwgeyAuLi5vcHRpb25zLCBtdWx0aTogdHJ1ZSB9KV0sIG9wdGlvbnMpO1xuICAgICAgICBpZiAoISgwLCB1dGlsc18xLmhhc0F0b21pY09wZXJhdG9ycykodXBkYXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignVXBkYXRlIGRvY3VtZW50IHJlcXVpcmVzIGF0b21pYyBvcGVyYXRvcnMnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlci5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4gIT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBtb2RpZmllZENvdW50OiByZXMubk1vZGlmaWVkID8/IHJlcy5uLFxuICAgICAgICAgICAgdXBzZXJ0ZWRJZDogQXJyYXkuaXNBcnJheShyZXMudXBzZXJ0ZWQpICYmIHJlcy51cHNlcnRlZC5sZW5ndGggPiAwID8gcmVzLnVwc2VydGVkWzBdLl9pZCA6IG51bGwsXG4gICAgICAgICAgICB1cHNlcnRlZENvdW50OiBBcnJheS5pc0FycmF5KHJlcy51cHNlcnRlZCkgJiYgcmVzLnVwc2VydGVkLmxlbmd0aCA/IHJlcy51cHNlcnRlZC5sZW5ndGggOiAwLFxuICAgICAgICAgICAgbWF0Y2hlZENvdW50OiBBcnJheS5pc0FycmF5KHJlcy51cHNlcnRlZCkgJiYgcmVzLnVwc2VydGVkLmxlbmd0aCA+IDAgPyAwIDogcmVzLm5cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlVwZGF0ZU1hbnlPcGVyYXRpb24gPSBVcGRhdGVNYW55T3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUmVwbGFjZU9uZU9wZXJhdGlvbiBleHRlbmRzIFVwZGF0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCByZXBsYWNlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZVVwZGF0ZVN0YXRlbWVudChmaWx0ZXIsIHJlcGxhY2VtZW50LCB7IC4uLm9wdGlvbnMsIG11bHRpOiBmYWxzZSB9KV0sIG9wdGlvbnMpO1xuICAgICAgICBpZiAoKDAsIHV0aWxzXzEuaGFzQXRvbWljT3BlcmF0b3JzKShyZXBsYWNlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1JlcGxhY2VtZW50IGRvY3VtZW50IG11c3Qgbm90IGNvbnRhaW4gYXRvbWljIG9wZXJhdG9ycycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbiAhPSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgaWYgKHJlcy5jb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMpO1xuICAgICAgICBpZiAocmVzLndyaXRlRXJyb3JzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMud3JpdGVFcnJvcnNbMF0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB0aGlzLndyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgIG1vZGlmaWVkQ291bnQ6IHJlcy5uTW9kaWZpZWQgPz8gcmVzLm4sXG4gICAgICAgICAgICB1cHNlcnRlZElkOiBBcnJheS5pc0FycmF5KHJlcy51cHNlcnRlZCkgJiYgcmVzLnVwc2VydGVkLmxlbmd0aCA+IDAgPyByZXMudXBzZXJ0ZWRbMF0uX2lkIDogbnVsbCxcbiAgICAgICAgICAgIHVwc2VydGVkQ291bnQ6IEFycmF5LmlzQXJyYXkocmVzLnVwc2VydGVkKSAmJiByZXMudXBzZXJ0ZWQubGVuZ3RoID8gcmVzLnVwc2VydGVkLmxlbmd0aCA6IDAsXG4gICAgICAgICAgICBtYXRjaGVkQ291bnQ6IEFycmF5LmlzQXJyYXkocmVzLnVwc2VydGVkKSAmJiByZXMudXBzZXJ0ZWQubGVuZ3RoID4gMCA/IDAgOiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVwbGFjZU9uZU9wZXJhdGlvbiA9IFJlcGxhY2VPbmVPcGVyYXRpb247XG5mdW5jdGlvbiBtYWtlVXBkYXRlU3RhdGVtZW50KGZpbHRlciwgdXBkYXRlLCBvcHRpb25zKSB7XG4gICAgaWYgKGZpbHRlciA9PSBudWxsIHx8IHR5cGVvZiBmaWx0ZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1NlbGVjdG9yIG11c3QgYmUgYSB2YWxpZCBKYXZhU2NyaXB0IG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlID09IG51bGwgfHwgdHlwZW9mIHVwZGF0ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignRG9jdW1lbnQgbXVzdCBiZSBhIHZhbGlkIEphdmFTY3JpcHQgb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IG9wID0geyBxOiBmaWx0ZXIsIHU6IHVwZGF0ZSB9O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy51cHNlcnQgPT09ICdib29sZWFuJykge1xuICAgICAgICBvcC51cHNlcnQgPSBvcHRpb25zLnVwc2VydDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubXVsdGkpIHtcbiAgICAgICAgb3AubXVsdGkgPSBvcHRpb25zLm11bHRpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgIG9wLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmFycmF5RmlsdGVycykge1xuICAgICAgICBvcC5hcnJheUZpbHRlcnMgPSBvcHRpb25zLmFycmF5RmlsdGVycztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uKSB7XG4gICAgICAgIG9wLmNvbGxhdGlvbiA9IG9wdGlvbnMuY29sbGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gb3A7XG59XG5leHBvcnRzLm1ha2VVcGRhdGVTdGF0ZW1lbnQgPSBtYWtlVXBkYXRlU3RhdGVtZW50O1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKFVwZGF0ZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKFVwZGF0ZU9uZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShVcGRhdGVNYW55T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShSZXBsYWNlT25lT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTlxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/validate_collection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'validate';\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLGVBQWU7QUFDdEc7QUFDQSx1RkFBdUYsZUFBZTtBQUN0RztBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uLmpzP2IzNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFkbWluLCBjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucykge1xuICAgICAgICAvLyBEZWNvcmF0ZSBjb21tYW5kIHdpdGggZXh0cmEgb3B0aW9uc1xuICAgICAgICBjb25zdCBjb21tYW5kID0geyB2YWxpZGF0ZTogY29sbGVjdGlvbk5hbWUgfTtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywga2V5c1tpXSkgJiYga2V5c1tpXSAhPT0gJ3Nlc3Npb24nKSB7XG4gICAgICAgICAgICAgICAgY29tbWFuZFtrZXlzW2ldXSA9IG9wdGlvbnNba2V5c1tpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoYWRtaW4ucy5kYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uTmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3ZhbGlkYXRlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSB0aGlzLmNvbGxlY3Rpb25OYW1lO1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHRoaXMuY29tbWFuZCk7XG4gICAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgdHlwZW9mIGRvYy5yZXN1bHQgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcignRXJyb3Igd2l0aCB2YWxpZGF0aW9uIGRhdGEnKTtcbiAgICAgICAgaWYgKGRvYy5yZXN1bHQgIT0gbnVsbCAmJiBkb2MucmVzdWx0Lm1hdGNoKC9leGNlcHRpb258Y29ycnVwdC8pICE9IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKGBJbnZhbGlkIGNvbGxlY3Rpb24gJHtjb2xsZWN0aW9uTmFtZX1gKTtcbiAgICAgICAgaWYgKGRvYy52YWxpZCAhPSBudWxsICYmICFkb2MudmFsaWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKGBJbnZhbGlkIGNvbGxlY3Rpb24gJHtjb2xsZWN0aW9uTmFtZX1gKTtcbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9XG59XG5leHBvcnRzLlZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiA9IFZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlX2NvbGxlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_concern.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/read_concern.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9jb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHdCQUF3QjtBQUM5QztBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZWFkX2NvbmNlcm4uanM/Yjg3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVhZENvbmNlcm4gPSBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwgPSB2b2lkIDA7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgbG9jYWw6ICdsb2NhbCcsXG4gICAgbWFqb3JpdHk6ICdtYWpvcml0eScsXG4gICAgbGluZWFyaXphYmxlOiAnbGluZWFyaXphYmxlJyxcbiAgICBhdmFpbGFibGU6ICdhdmFpbGFibGUnLFxuICAgIHNuYXBzaG90OiAnc25hcHNob3QnXG59KTtcbi8qKlxuICogVGhlIE1vbmdvREIgUmVhZENvbmNlcm4sIHdoaWNoIGFsbG93cyBmb3IgY29udHJvbCBvZiB0aGUgY29uc2lzdGVuY3kgYW5kIGlzb2xhdGlvbiBwcm9wZXJ0aWVzXG4gKiBvZiB0aGUgZGF0YSByZWFkIGZyb20gcmVwbGljYSBzZXRzIGFuZCByZXBsaWNhIHNldCBzaGFyZHMuXG4gKiBAcHVibGljXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2UvcmVhZC1jb25jZXJuL2luZGV4Lmh0bWxcbiAqL1xuY2xhc3MgUmVhZENvbmNlcm4ge1xuICAgIC8qKiBDb25zdHJ1Y3RzIGEgUmVhZENvbmNlcm4gZnJvbSB0aGUgcmVhZCBjb25jZXJuIGxldmVsLiovXG4gICAgY29uc3RydWN0b3IobGV2ZWwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3BlYyB0ZXN0IGV4aXN0cyB0aGF0IGFsbG93cyBsZXZlbCB0byBiZSBhbnkgc3RyaW5nLlxuICAgICAgICAgKiBcImludmFsaWQgcmVhZENvbmNlcm4gd2l0aCBvdXQgc3RhZ2VcIlxuICAgICAgICAgKiBAc2VlIC4vdGVzdC9zcGVjL2NydWQvdjIvYWdncmVnYXRlLW91dC1yZWFkQ29uY2Vybi5qc29uXG4gICAgICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vbmdvZGIvc3BlY2lmaWNhdGlvbnMvYmxvYi9tYXN0ZXIvc291cmNlL3JlYWQtd3JpdGUtY29uY2Vybi9yZWFkLXdyaXRlLWNvbmNlcm4ucnN0I3Vua25vd24tbGV2ZWxzLWFuZC1hZGRpdGlvbmFsLW9wdGlvbnMtZm9yLXN0cmluZy1iYXNlZC1yZWFkY29uY2VybnNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGV2ZWwgPSBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWxbbGV2ZWxdID8/IGxldmVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBSZWFkQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgd3JpdGUgY29uY2Vybi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVhZENvbmNlcm4pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZENvbmNlcm4gfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBpZiAocmVhZENvbmNlcm4gaW5zdGFuY2VvZiBSZWFkQ29uY2Vybikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWFkQ29uY2VybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiByZWFkQ29uY2VybiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKHJlYWRDb25jZXJuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdsZXZlbCcgaW4gcmVhZENvbmNlcm4gJiYgcmVhZENvbmNlcm4ubGV2ZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKHJlYWRDb25jZXJuLmxldmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5sZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihvcHRpb25zLmxldmVsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTUFKT1JJVFkoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwubWFqb3JpdHk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgQVZBSUxBQkxFKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLmF2YWlsYWJsZTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBMSU5FQVJJWkFCTEUoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwubGluZWFyaXphYmxlO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IFNOQVBTSE9UKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLnNuYXBzaG90O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7IGxldmVsOiB0aGlzLmxldmVsIH07XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkQ29uY2VybiA9IFJlYWRDb25jZXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZF9jb25jZXJuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_preference.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/read_preference.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;\n//# sourceMappingURL=read_preference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9wcmVmZXJlbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLDBCQUEwQjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQztBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixxQkFBcUI7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsRUFBRTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3JlYWRfcHJlZmVyZW5jZS5qcz8wMmI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFkUHJlZmVyZW5jZSA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgcHJpbWFyeTogJ3ByaW1hcnknLFxuICAgIHByaW1hcnlQcmVmZXJyZWQ6ICdwcmltYXJ5UHJlZmVycmVkJyxcbiAgICBzZWNvbmRhcnk6ICdzZWNvbmRhcnknLFxuICAgIHNlY29uZGFyeVByZWZlcnJlZDogJ3NlY29uZGFyeVByZWZlcnJlZCcsXG4gICAgbmVhcmVzdDogJ25lYXJlc3QnXG59KTtcbi8qKlxuICogVGhlICoqUmVhZFByZWZlcmVuY2UqKiBjbGFzcyBpcyBhIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIE1vbmdvREIgUmVhZFByZWZlcmVuY2UgYW5kIGlzXG4gKiB1c2VkIHRvIGNvbnN0cnVjdCBjb25uZWN0aW9ucy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL2NvcmUvcmVhZC1wcmVmZXJlbmNlL1xuICovXG5jbGFzcyBSZWFkUHJlZmVyZW5jZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG1vZGUgLSBBIHN0cmluZyBkZXNjcmliaW5nIHRoZSByZWFkIHByZWZlcmVuY2UgbW9kZSAocHJpbWFyeXxwcmltYXJ5UHJlZmVycmVkfHNlY29uZGFyeXxzZWNvbmRhcnlQcmVmZXJyZWR8bmVhcmVzdClcbiAgICAgKiBAcGFyYW0gdGFncyAtIEEgdGFnIHNldCB1c2VkIHRvIHRhcmdldCByZWFkcyB0byBtZW1iZXJzIHdpdGggdGhlIHNwZWNpZmllZCB0YWcocykuIHRhZ1NldCBpcyBub3QgYXZhaWxhYmxlIGlmIHVzaW5nIHJlYWQgcHJlZmVyZW5jZSBtb2RlIHByaW1hcnkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBZGRpdGlvbmFsIHJlYWQgcHJlZmVyZW5jZSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kZSwgdGFncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoIVJlYWRQcmVmZXJlbmNlLmlzVmFsaWQobW9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgcmVhZCBwcmVmZXJlbmNlIG1vZGUgJHtKU09OLnN0cmluZ2lmeShtb2RlKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmIHR5cGVvZiB0YWdzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh0YWdzKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHRhZ3M7XG4gICAgICAgICAgICB0YWdzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRhZ3MgJiYgIUFycmF5LmlzQXJyYXkodGFncykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1JlYWRQcmVmZXJlbmNlIHRhZ3MgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgICAgIHRoaXMudGFncyA9IHRhZ3M7XG4gICAgICAgIHRoaXMuaGVkZ2UgPSBvcHRpb25zPy5oZWRnZTtcbiAgICAgICAgdGhpcy5tYXhTdGFsZW5lc3NTZWNvbmRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1pbldpcmVWZXJzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4U3RhbGVuZXNzU2Vjb25kcyAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tYXhTdGFsZW5lc3NTZWNvbmRzIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdtYXhTdGFsZW5lc3NTZWNvbmRzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1heFN0YWxlbmVzc1NlY29uZHMgPSBvcHRpb25zLm1heFN0YWxlbmVzc1NlY29uZHM7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGUgbWluaW11bSByZXF1aXJlZCB3aXJlIHZlcnNpb24gaXMgNSBmb3IgdGhpcyByZWFkIHByZWZlcmVuY2UuIElmIHRoZSBleGlzdGluZ1xuICAgICAgICAgICAgLy8gICAgICAgdG9wb2xvZ3kgaGFzIGEgbG93ZXIgdmFsdWUgdGhlbiBhIE1vbmdvRXJyb3Igd2lsbCBiZSB0aHJvd24gZHVyaW5nIHNlcnZlciBzZWxlY3Rpb24uXG4gICAgICAgICAgICB0aGlzLm1pbldpcmVWZXJzaW9uID0gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBSZWFkUHJlZmVyZW5jZS5QUklNQVJZKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50YWdzICYmIEFycmF5LmlzQXJyYXkodGhpcy50YWdzKSAmJiB0aGlzLnRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1ByaW1hcnkgcmVhZCBwcmVmZXJlbmNlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIHRhZ3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1heFN0YWxlbmVzc1NlY29uZHMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdQcmltYXJ5IHJlYWQgcHJlZmVyZW5jZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBtYXhTdGFsZW5lc3NTZWNvbmRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5oZWRnZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1ByaW1hcnkgcmVhZCBwcmVmZXJlbmNlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIGhlZGdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU3VwcG9ydCB0aGUgZGVwcmVjYXRlZCBgcHJlZmVyZW5jZWAgcHJvcGVydHkgaW50cm9kdWNlZCBpbiB0aGUgcG9yY2VsYWluIGxheWVyXG4gICAgZ2V0IHByZWZlcmVuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFkUHJlZmVyZW5jZShtb2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgUmVhZFByZWZlcmVuY2UgZ2l2ZW4gYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHJlYWQgcHJlZmVyZW5jZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA/PyBvcHRpb25zLnNlc3Npb24/LnRyYW5zYWN0aW9uLm9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgICAgIGNvbnN0IHJlYWRQcmVmZXJlbmNlVGFncyA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2VUYWdzO1xuICAgICAgICBpZiAocmVhZFByZWZlcmVuY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVhZFByZWZlcmVuY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRQcmVmZXJlbmNlKHJlYWRQcmVmZXJlbmNlLCByZWFkUHJlZmVyZW5jZVRhZ3MsIHtcbiAgICAgICAgICAgICAgICBtYXhTdGFsZW5lc3NTZWNvbmRzOiBvcHRpb25zLm1heFN0YWxlbmVzc1NlY29uZHMsXG4gICAgICAgICAgICAgICAgaGVkZ2U6IG9wdGlvbnMuaGVkZ2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCEocmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiBSZWFkUHJlZmVyZW5jZSkgJiYgdHlwZW9mIHJlYWRQcmVmZXJlbmNlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgbW9kZSA9IHJlYWRQcmVmZXJlbmNlLm1vZGUgfHwgcmVhZFByZWZlcmVuY2UucHJlZmVyZW5jZTtcbiAgICAgICAgICAgIGlmIChtb2RlICYmIHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZFByZWZlcmVuY2UobW9kZSwgcmVhZFByZWZlcmVuY2UudGFncyA/PyByZWFkUHJlZmVyZW5jZVRhZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RhbGVuZXNzU2Vjb25kczogcmVhZFByZWZlcmVuY2UubWF4U3RhbGVuZXNzU2Vjb25kcyxcbiAgICAgICAgICAgICAgICAgICAgaGVkZ2U6IG9wdGlvbnMuaGVkZ2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhZFByZWZlcmVuY2VUYWdzKSB7XG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZS50YWdzID0gcmVhZFByZWZlcmVuY2VUYWdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWFkUHJlZmVyZW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSB3aXRoIGEgUmVhZFByZWZlcmVuY2UgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgdHJhbnNsYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICBjb25zdCByID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZTtcbiAgICAgICAgaWYgKHR5cGVvZiByID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IG5ldyBSZWFkUHJlZmVyZW5jZShyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyICYmICEociBpbnN0YW5jZW9mIFJlYWRQcmVmZXJlbmNlKSAmJiB0eXBlb2YgciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGUgPSByLm1vZGUgfHwgci5wcmVmZXJlbmNlO1xuICAgICAgICAgICAgaWYgKG1vZGUgJiYgdHlwZW9mIG1vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IG5ldyBSZWFkUHJlZmVyZW5jZShtb2RlLCByLnRhZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RhbGVuZXNzU2Vjb25kczogci5tYXhTdGFsZW5lc3NTZWNvbmRzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIShyIGluc3RhbmNlb2YgUmVhZFByZWZlcmVuY2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHJlYWQgcHJlZmVyZW5jZTogJHtyfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBpZiBhIG1vZGUgaXMgbGVnYWxcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlIC0gVGhlIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJlYWQgcHJlZmVyZW5jZSBtb2RlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc1ZhbGlkKG1vZGUpIHtcbiAgICAgICAgY29uc3QgVkFMSURfTU9ERVMgPSBuZXcgU2V0KFtcbiAgICAgICAgICAgIFJlYWRQcmVmZXJlbmNlLlBSSU1BUlksXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5QUklNQVJZX1BSRUZFUlJFRCxcbiAgICAgICAgICAgIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWSxcbiAgICAgICAgICAgIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQsXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5ORUFSRVNULFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIFZBTElEX01PREVTLmhhcyhtb2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgaWYgYSBtb2RlIGlzIGxlZ2FsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZSAtIFRoZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByZWFkIHByZWZlcmVuY2UgbW9kZS5cbiAgICAgKi9cbiAgICBpc1ZhbGlkKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIFJlYWRQcmVmZXJlbmNlLmlzVmFsaWQodHlwZW9mIG1vZGUgPT09ICdzdHJpbmcnID8gbW9kZSA6IHRoaXMubW9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoaXMgcmVhZFByZWZlcmVuY2UgbmVlZHMgdGhlIFwiU2Vjb25kYXJ5T2tcIiBiaXQgd2hlbiBzZW50IG92ZXIgdGhlIHdpcmVcbiAgICAgKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9tb25nb2RiLXdpcmUtcHJvdG9jb2wvI29wLXF1ZXJ5XG4gICAgICovXG4gICAgc2Vjb25kYXJ5T2soKSB7XG4gICAgICAgIGNvbnN0IE5FRURTX1NFQ09OREFSWU9LID0gbmV3IFNldChbXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5QUklNQVJZX1BSRUZFUlJFRCxcbiAgICAgICAgICAgIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWSxcbiAgICAgICAgICAgIFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQsXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5ORUFSRVNUXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gTkVFRFNfU0VDT05EQVJZT0suaGFzKHRoaXMubW9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSB0d28gUmVhZFByZWZlcmVuY2VzIGFyZSBlcXVpdmFsZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVhZFByZWZlcmVuY2UgLSBUaGUgcmVhZCBwcmVmZXJlbmNlIHdpdGggd2hpY2ggdG8gY2hlY2sgZXF1YWxpdHlcbiAgICAgKi9cbiAgICBlcXVhbHMocmVhZFByZWZlcmVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRQcmVmZXJlbmNlLm1vZGUgPT09IHRoaXMubW9kZTtcbiAgICB9XG4gICAgLyoqIFJldHVybiBKU09OIHJlcHJlc2VudGF0aW9uICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCByZWFkUHJlZmVyZW5jZSA9IHsgbW9kZTogdGhpcy5tb2RlIH07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudGFncykpXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZS50YWdzID0gdGhpcy50YWdzO1xuICAgICAgICBpZiAodGhpcy5tYXhTdGFsZW5lc3NTZWNvbmRzKVxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UubWF4U3RhbGVuZXNzU2Vjb25kcyA9IHRoaXMubWF4U3RhbGVuZXNzU2Vjb25kcztcbiAgICAgICAgaWYgKHRoaXMuaGVkZ2UpXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZS5oZWRnZSA9IHRoaXMuaGVkZ2U7XG4gICAgICAgIHJldHVybiByZWFkUHJlZmVyZW5jZTtcbiAgICB9XG59XG5SZWFkUHJlZmVyZW5jZS5QUklNQVJZID0gZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUucHJpbWFyeTtcblJlYWRQcmVmZXJlbmNlLlBSSU1BUllfUFJFRkVSUkVEID0gZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUucHJpbWFyeVByZWZlcnJlZDtcblJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWSA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnNlY29uZGFyeTtcblJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgPSBleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5zZWNvbmRhcnlQcmVmZXJyZWQ7XG5SZWFkUHJlZmVyZW5jZS5ORUFSRVNUID0gZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUubmVhcmVzdDtcblJlYWRQcmVmZXJlbmNlLnByaW1hcnkgPSBuZXcgUmVhZFByZWZlcmVuY2UoZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUucHJpbWFyeSk7XG5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5UHJlZmVycmVkID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnlQcmVmZXJyZWQpO1xuUmVhZFByZWZlcmVuY2Uuc2Vjb25kYXJ5ID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnNlY29uZGFyeSk7XG5SZWFkUHJlZmVyZW5jZS5zZWNvbmRhcnlQcmVmZXJyZWQgPSBuZXcgUmVhZFByZWZlcmVuY2UoZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUuc2Vjb25kYXJ5UHJlZmVycmVkKTtcblJlYWRQcmVmZXJlbmNlLm5lYXJlc3QgPSBuZXcgUmVhZFByZWZlcmVuY2UoZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUubmVhcmVzdCk7XG5leHBvcnRzLlJlYWRQcmVmZXJlbmNlID0gUmVhZFByZWZlcmVuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFkX3ByZWZlcmVuY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime;\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsdUJBQXVCLEdBQUcsa0JBQWtCLEdBQUcsb0JBQW9CLEdBQUcsdUJBQXVCLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcscUJBQXFCO0FBQ3JNLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0EscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9jb21tb24uanM/Y2M1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuX2FkdmFuY2VDbHVzdGVyVGltZSA9IGV4cG9ydHMuZHJhaW5UaW1lclF1ZXVlID0gZXhwb3J0cy5TZXJ2ZXJUeXBlID0gZXhwb3J0cy5Ub3BvbG9neVR5cGUgPSBleHBvcnRzLlNUQVRFX0NPTk5FQ1RFRCA9IGV4cG9ydHMuU1RBVEVfQ09OTkVDVElORyA9IGV4cG9ydHMuU1RBVEVfQ0xPU0VEID0gZXhwb3J0cy5TVEFURV9DTE9TSU5HID0gdm9pZCAwO1xuY29uc3QgdGltZXJzXzEgPSByZXF1aXJlKFwidGltZXJzXCIpO1xuLy8gc2hhcmVkIHN0YXRlIG5hbWVzXG5leHBvcnRzLlNUQVRFX0NMT1NJTkcgPSAnY2xvc2luZyc7XG5leHBvcnRzLlNUQVRFX0NMT1NFRCA9ICdjbG9zZWQnO1xuZXhwb3J0cy5TVEFURV9DT05ORUNUSU5HID0gJ2Nvbm5lY3RpbmcnO1xuZXhwb3J0cy5TVEFURV9DT05ORUNURUQgPSAnY29ubmVjdGVkJztcbi8qKlxuICogQW4gZW51bWVyYXRpb24gb2YgdG9wb2xvZ3kgdHlwZXMgd2Uga25vdyBhYm91dFxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlRvcG9sb2d5VHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIFNpbmdsZTogJ1NpbmdsZScsXG4gICAgUmVwbGljYVNldE5vUHJpbWFyeTogJ1JlcGxpY2FTZXROb1ByaW1hcnknLFxuICAgIFJlcGxpY2FTZXRXaXRoUHJpbWFyeTogJ1JlcGxpY2FTZXRXaXRoUHJpbWFyeScsXG4gICAgU2hhcmRlZDogJ1NoYXJkZWQnLFxuICAgIFVua25vd246ICdVbmtub3duJyxcbiAgICBMb2FkQmFsYW5jZWQ6ICdMb2FkQmFsYW5jZWQnXG59KTtcbi8qKlxuICogQW4gZW51bWVyYXRpb24gb2Ygc2VydmVyIHR5cGVzIHdlIGtub3cgYWJvdXRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5TZXJ2ZXJUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU3RhbmRhbG9uZTogJ1N0YW5kYWxvbmUnLFxuICAgIE1vbmdvczogJ01vbmdvcycsXG4gICAgUG9zc2libGVQcmltYXJ5OiAnUG9zc2libGVQcmltYXJ5JyxcbiAgICBSU1ByaW1hcnk6ICdSU1ByaW1hcnknLFxuICAgIFJTU2Vjb25kYXJ5OiAnUlNTZWNvbmRhcnknLFxuICAgIFJTQXJiaXRlcjogJ1JTQXJiaXRlcicsXG4gICAgUlNPdGhlcjogJ1JTT3RoZXInLFxuICAgIFJTR2hvc3Q6ICdSU0dob3N0JyxcbiAgICBVbmtub3duOiAnVW5rbm93bicsXG4gICAgTG9hZEJhbGFuY2VyOiAnTG9hZEJhbGFuY2VyJ1xufSk7XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBkcmFpblRpbWVyUXVldWUocXVldWUpIHtcbiAgICBxdWV1ZS5mb3JFYWNoKHRpbWVyc18xLmNsZWFyVGltZW91dCk7XG4gICAgcXVldWUuY2xlYXIoKTtcbn1cbmV4cG9ydHMuZHJhaW5UaW1lclF1ZXVlID0gZHJhaW5UaW1lclF1ZXVlO1xuLyoqIFNoYXJlZCBmdW5jdGlvbiB0byBkZXRlcm1pbmUgY2x1c3RlclRpbWUgZm9yIGEgZ2l2ZW4gdG9wb2xvZ3kgb3Igc2Vzc2lvbiAqL1xuZnVuY3Rpb24gX2FkdmFuY2VDbHVzdGVyVGltZShlbnRpdHksICRjbHVzdGVyVGltZSkge1xuICAgIGlmIChlbnRpdHkuY2x1c3RlclRpbWUgPT0gbnVsbCkge1xuICAgICAgICBlbnRpdHkuY2x1c3RlclRpbWUgPSAkY2x1c3RlclRpbWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoJGNsdXN0ZXJUaW1lLmNsdXN0ZXJUaW1lLmdyZWF0ZXJUaGFuKGVudGl0eS5jbHVzdGVyVGltZS5jbHVzdGVyVGltZSkpIHtcbiAgICAgICAgICAgIGVudGl0eS5jbHVzdGVyVGltZSA9ICRjbHVzdGVyVGltZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuX2FkdmFuY2VDbHVzdGVyVGltZSA9IF9hZHZhbmNlQ2x1c3RlclRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/events.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/events.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_OPENING;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_CLOSED;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_OPENING;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_CLOSED;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcscUNBQXFDLEdBQUcsbUNBQW1DLEdBQUcsMkJBQTJCLEdBQUcsNEJBQTRCLEdBQUcsdUNBQXVDLEdBQUcseUJBQXlCLEdBQUcsMEJBQTBCLEdBQUcscUNBQXFDO0FBQ3hULG9CQUFvQixtQkFBTyxDQUFDLG1FQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vZXZlbnRzLmpzP2Q3NDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudCA9IGV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50ID0gZXhwb3J0cy5Ub3BvbG9neUNsb3NlZEV2ZW50ID0gZXhwb3J0cy5Ub3BvbG9neU9wZW5pbmdFdmVudCA9IGV4cG9ydHMuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyQ2xvc2VkRXZlbnQgPSBleHBvcnRzLlNlcnZlck9wZW5pbmdFdmVudCA9IGV4cG9ydHMuU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBzZXJ2ZXIgZGVzY3JpcHRpb24gY2hhbmdlcywgYnV0IGRvZXMgTk9UIGluY2x1ZGUgY2hhbmdlcyB0byB0aGUgUlRULlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckRlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgYWRkcmVzcywgcHJldmlvdXNEZXNjcmlwdGlvbiwgbmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX0RFU0NSSVBUSU9OX0NIQU5HRUQ7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMucHJldmlvdXNEZXNjcmlwdGlvbiA9IHByZXZpb3VzRGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubmV3RGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckRlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50ID0gU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBzZXJ2ZXIgaXMgaW5pdGlhbGl6ZWQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyT3BlbmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgYWRkcmVzcykge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9PUEVOSU5HO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyT3BlbmluZ0V2ZW50ID0gU2VydmVyT3BlbmluZ0V2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gc2VydmVyIGlzIGNsb3NlZC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJDbG9zZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQsIGFkZHJlc3MpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfQ0xPU0VEO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyQ2xvc2VkRXZlbnQgPSBTZXJ2ZXJDbG9zZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRvcG9sb2d5IGRlc2NyaXB0aW9uIGNoYW5nZXMuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQsIHByZXZpb3VzRGVzY3JpcHRpb24sIG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRDtcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICAgICAgdGhpcy5wcmV2aW91c0Rlc2NyaXB0aW9uID0gcHJldmlvdXNEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5uZXdEZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCA9IFRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0b3BvbG9neSBpcyBpbml0aWFsaXplZC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBUb3BvbG9neU9wZW5pbmdFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5UT1BPTE9HWV9PUEVOSU5HO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9wb2xvZ3lPcGVuaW5nRXZlbnQgPSBUb3BvbG9neU9wZW5pbmdFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRvcG9sb2d5IGlzIGNsb3NlZC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBUb3BvbG9neUNsb3NlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlRPUE9MT0dZX0NMT1NFRDtcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICB9XG59XG5leHBvcnRzLlRvcG9sb2d5Q2xvc2VkRXZlbnQgPSBUb3BvbG9neUNsb3NlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHNlcnZlciBtb25pdG9y4oCZcyBoZWxsbyBjb21tYW5kIGlzIHN0YXJ0ZWQgLSBpbW1lZGlhdGVseSBiZWZvcmVcbiAqIHRoZSBoZWxsbyBjb21tYW5kIGlzIHNlcmlhbGl6ZWQgaW50byByYXcgQlNPTiBhbmQgd3JpdHRlbiB0byB0aGUgc29ja2V0LlxuICpcbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uSWQsIGF3YWl0ZWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfSEVBUlRCRUFUX1NUQVJURUQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLmF3YWl0ZWQgPSBhd2FpdGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50ID0gU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHNlcnZlciBtb25pdG9y4oCZcyBoZWxsbyBzdWNjZWVkcy5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgZHVyYXRpb24sIHJlcGx5LCBhd2FpdGVkKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX0hFQVJUQkVBVF9TVUNDRUVERUQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMucmVwbHkgPSByZXBseSA/PyB7fTtcbiAgICAgICAgdGhpcy5hd2FpdGVkID0gYXdhaXRlZDtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50ID0gU2VydmVySGVhcnRiZWF0U3VjY2VlZGVkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgc2VydmVyIG1vbml0b3LigJlzIGhlbGxvIGZhaWxzLCBlaXRoZXIgd2l0aCBhbiDigJxvazogMOKAnSBvciBhIHNvY2tldCBleGNlcHRpb24uXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uSWQsIGR1cmF0aW9uLCBmYWlsdXJlLCBhd2FpdGVkKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX0hFQVJUQkVBVF9GQUlMRUQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuZmFpbHVyZSA9IGZhaWx1cmU7XG4gICAgICAgIHRoaXMuYXdhaXRlZCA9IGF3YWl0ZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRGYWlsZWRFdmVudCA9IFNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/monitor.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/monitor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst client_metadata_1 = __webpack_require__(/*! ../cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n    auto: 'auto',\n    poll: 'poll',\n    stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        /** @internal */\n        this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n        this[kServer] = server;\n        this.connection = null;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = {\n            id: '<monitor>',\n            generation: server.pool.generation,\n            cancellationToken,\n            hostAddress: server.description.hostAddress,\n            ...options,\n            // force BSON serialization options\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        };\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor[kCancellationToken].emit('cancel');\n    monitor.connection?.destroy();\n    monitor.connection = null;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null)\n        return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll)\n        return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream)\n        return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv)\n        return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start;\n    let awaited;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function onHeartbeatFailed(err) {\n        monitor.connection?.destroy();\n        monitor.connection = null;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    function onHeartbeatSucceeded(hello) {\n        if (!('isWritablePrimary' in hello)) {\n            // Provide hello-style response document.\n            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n        }\n        const duration = isAwaitable && monitor.rttPinger\n            ? monitor.rttPinger.roundTripTime\n            : (0, utils_1.calculateDurationInMs)(start);\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n        if (isAwaitable) {\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n            // We have not actually sent an outgoing handshake, but when we get the next response we\n            // want the duration to reflect the time since we last heard from the server\n            start = (0, utils_1.now)();\n        }\n        else {\n            monitor.rttPinger?.close();\n            monitor.rttPinger = undefined;\n            callback(undefined, hello);\n        }\n    }\n    const { connection } = monitor;\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({ heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS }, monitor.connectOptions));\n        }\n        // Record new start time before sending handshake\n        start = (0, utils_1.now)();\n        if (isAwaitable) {\n            awaited = true;\n            return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n                if (error)\n                    return onHeartbeatFailed(error);\n                return onHeartbeatSucceeded(hello);\n            });\n        }\n        awaited = false;\n        connection\n            .command((0, utils_1.ns)('admin.$cmd'), cmd, options)\n            .then(onHeartbeatSucceeded, onHeartbeatFailed);\n        return;\n    }\n    // connecting does an implicit `hello`\n    (async () => {\n        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n        // The start time is after socket creation but before the handshake\n        start = (0, utils_1.now)();\n        try {\n            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n            return connection;\n        }\n        catch (error) {\n            connection.destroy();\n            throw error;\n        }\n    })().then(connection => {\n        if (isInCloseState(monitor)) {\n            connection.destroy();\n            return;\n        }\n        monitor.connection = connection;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n        callback(undefined, connection.hello);\n    }, error => {\n        monitor.connection = null;\n        awaited = false;\n        onHeartbeatFailed(error);\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(cancellationToken, options) {\n        this.connection = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this.connection?.destroy();\n        this.connection = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = (0, utils_1.now)();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn?.destroy();\n            return;\n        }\n        if (rttPinger.connection == null) {\n            rttPinger.connection = conn;\n        }\n        rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n        rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger.connection;\n    if (connection == null) {\n        (0, connect_1.connect)(options).then(connection => {\n            measureAndReschedule(connection);\n        }, () => {\n            rttPinger.connection = undefined;\n            rttPinger[kRoundTripTime] = 0;\n        });\n        return;\n    }\n    const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n    connection.command((0, utils_1.ns)('admin.$cmd'), { [commandName]: 1 }, undefined).then(() => measureAndReschedule(), () => {\n        rttPinger.connection?.destroy();\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n    });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n//# sourceMappingURL=monitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Server = void 0;\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            this.monitor.on(event, (e) => this.emit(event, e));\n        }\n        this.monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy() {\n        if (this.s.state === common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close();\n        stateTransition(this, common_1.STATE_CLOSED);\n        this.emit('closed');\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */\n    async command(ns, cmd, options) {\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            throw new error_1.MongoServerClosedError();\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, {\n            wireProtocolCommand: false,\n            directConnection: this.topology.s.options.directConnection\n        });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        let conn = session?.pinnedConnection;\n        this.incrementOperationCount();\n        if (conn == null) {\n            try {\n                conn = await this.pool.checkOut();\n                if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n                    session?.pin(conn);\n                }\n            }\n            catch (checkoutError) {\n                this.decrementOperationCount();\n                if (!(checkoutError instanceof errors_1.PoolClearedError))\n                    this.handleError(checkoutError);\n                throw checkoutError;\n            }\n        }\n        try {\n            try {\n                return await conn.command(ns, cmd, finalOptions);\n            }\n            catch (commandError) {\n                throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n            }\n        }\n        catch (operationError) {\n            if (operationError instanceof error_1.MongoError &&\n                operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                await this.pool.reauthenticate(conn);\n                try {\n                    return await conn.command(ns, cmd, finalOptions);\n                }\n                catch (commandError) {\n                    throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n                }\n            }\n            else {\n                throw operationError;\n            }\n        }\n        finally {\n            this.decrementOperationCount();\n            if (session?.pinnedConnection !== conn) {\n                this.pool.checkIn(conn);\n            }\n        }\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Ensure that error is properly decorated and internal state is updated before throwing\n     * @internal\n     */\n    decorateCommandError(connection, cmd, options, error) {\n        if (typeof error !== 'object' || error == null || !('name' in error)) {\n            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n        }\n        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n            error = error.cause;\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return error;\n        }\n        if (connectionIsStale(this.pool, connection)) {\n            return error;\n        }\n        const session = options?.session;\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(this) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this)) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        this.handleError(error, connection);\n        return error;\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            (session.transaction.isCommitted && 'commitTransaction' in cmd) ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = bson_1.Long.isLong(currentTv.counter)\n        ? currentTv.counter\n        : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion;\n//# sourceMappingURL=server_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return function writableServer(topologyDescription, servers) {\n        return latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n    };\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return function sameServerSelector(topologyDescription, servers) {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return function readPreferenceServers(topologyDescription, servers, deprioritized = []) {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        if (topologyDescription.type === common_1.TopologyType.Sharded) {\n            const filtered = servers.filter(server => {\n                return !deprioritized.includes(server);\n            });\n            const selectable = filtered.length > 0 ? filtered : deprioritized;\n            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\n//# sourceMappingURL=server_selection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection_events.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = __webpack_require__(/*! .././utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nclass ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        this.selector = selector;\n        this.operation = operation;\n        this.topologyDescription = topologyDescription;\n    }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_STARTED;\n        this.message = 'Server selection started';\n    }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, error, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_FAILED;\n        this.message = 'Server selection failed';\n        this.failure = error;\n    }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, address, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n        this.message = 'Server selection succeeded';\n        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();\n        this.serverHost = host;\n        this.serverPort = port;\n    }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, remainingTimeMS, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n        this.message = 'Waiting for suitable server to become available';\n        this.remainingTimeMS = remainingTimeMS;\n    }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;\n//# sourceMappingURL=server_selection_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQ0FBcUMsR0FBRyxxQ0FBcUMsR0FBRyxrQ0FBa0MsR0FBRyxtQ0FBbUMsR0FBRyw0QkFBNEI7QUFDdkwsZ0JBQWdCLG1CQUFPLENBQUMsNkRBQVk7QUFDcEMsb0JBQW9CLG1CQUFPLENBQUMsbUVBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc2VydmVyX3NlbGVjdGlvbl9ldmVudHMuanM/YWQwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2FpdGluZ0ZvclN1aXRhYmxlU2VydmVyRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvblN1Y2NlZWRlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25FdmVudCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi91dGlsc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbi8qKlxuICogVGhlIGJhc2UgZXhwb3J0IGNsYXNzIGZvciBhbGwgbG9ncyBwdWJsaXNoZWQgZnJvbSBzZXJ2ZXIgc2VsZWN0aW9uXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBMb2cgVHlwZVxuICovXG5jbGFzcyBTZXJ2ZXJTZWxlY3Rpb25FdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICAgICAgdGhpcy50b3BvbG9neURlc2NyaXB0aW9uID0gdG9wb2xvZ3lEZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlclNlbGVjdGlvbkV2ZW50ID0gU2VydmVyU2VsZWN0aW9uRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIHNlcnZlciBzZWxlY3Rpb24gc3RhcnRzXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQgZXh0ZW5kcyBTZXJ2ZXJTZWxlY3Rpb25FdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbik7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX1NFTEVDVElPTl9TVEFSVEVEO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnU2VydmVyIHNlbGVjdGlvbiBzdGFydGVkJztcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlclNlbGVjdGlvblN0YXJ0ZWRFdmVudCA9IFNlcnZlclNlbGVjdGlvblN0YXJ0ZWRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gYSBzZXJ2ZXIgc2VsZWN0aW9uIGZhaWxzXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIGVycm9yLCBvcGVyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbik7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX1NFTEVDVElPTl9GQUlMRUQ7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdTZXJ2ZXIgc2VsZWN0aW9uIGZhaWxlZCc7XG4gICAgICAgIHRoaXMuZmFpbHVyZSA9IGVycm9yO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uRmFpbGVkRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBzdWNjZWVkc1xuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgZXh0ZW5kcyBTZXJ2ZXJTZWxlY3Rpb25FdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBhZGRyZXNzLCBvcGVyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbik7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX1NFTEVDVElPTl9TVUNDRUVERUQ7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdTZXJ2ZXIgc2VsZWN0aW9uIHN1Y2NlZWRlZCc7XG4gICAgICAgIGNvbnN0IHsgaG9zdCwgcG9ydCB9ID0gdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3RyaW5nKGFkZHJlc3MpLnRvSG9zdFBvcnQoKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJIb3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5zZXJ2ZXJQb3J0ID0gcG9ydDtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlclNlbGVjdGlvblN1Y2NlZWRlZEV2ZW50ID0gU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIHNlcnZlciBzZWxlY3Rpb24gaXMgd2FpdGluZyBmb3IgYSBzdWl0YWJsZSBzZXJ2ZXIgdG8gYmVjb21lIGF2YWlsYWJsZVxuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgV2FpdGluZ0ZvclN1aXRhYmxlU2VydmVyRXZlbnQgZXh0ZW5kcyBTZXJ2ZXJTZWxlY3Rpb25FdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCByZW1haW5pbmdUaW1lTVMsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5XQUlUSU5HX0ZPUl9TVUlUQUJMRV9TRVJWRVI7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdXYWl0aW5nIGZvciBzdWl0YWJsZSBzZXJ2ZXIgdG8gYmVjb21lIGF2YWlsYWJsZSc7XG4gICAgICAgIHRoaXMucmVtYWluaW5nVGltZU1TID0gcmVtYWluaW5nVGltZU1TO1xuICAgIH1cbn1cbmV4cG9ydHMuV2FpdGluZ0ZvclN1aXRhYmxlU2VydmVyRXZlbnQgPSBXYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlcl9zZWxlY3Rpb25fZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().catch(() => null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;\n//# sourceMappingURL=srv_polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zcnZfcG9sbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyx1QkFBdUI7QUFDM0MsWUFBWSxtQkFBTyxDQUFDLGdCQUFLO0FBQ3pCLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHNCQUFzQixtQkFBTyxDQUFDLHVFQUFnQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0IsUUFBUSxhQUFhO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3Nydl9wb2xsaW5nLmpzP2Y4NGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNydlBvbGxlciA9IGV4cG9ydHMuU3J2UG9sbGluZ0V2ZW50ID0gdm9pZCAwO1xuY29uc3QgZG5zID0gcmVxdWlyZShcImRuc1wiKTtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBtb25nb190eXBlc18xID0gcmVxdWlyZShcIi4uL21vbmdvX3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU3J2UG9sbGluZ0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzcnZSZWNvcmRzKSB7XG4gICAgICAgIHRoaXMuc3J2UmVjb3JkcyA9IHNydlJlY29yZHM7XG4gICAgfVxuICAgIGhvc3RuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQodGhpcy5zcnZSZWNvcmRzLm1hcChyID0+IHV0aWxzXzEuSG9zdEFkZHJlc3MuZnJvbVNydlJlY29yZChyKS50b1N0cmluZygpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5TcnZQb2xsaW5nRXZlbnQgPSBTcnZQb2xsaW5nRXZlbnQ7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBTcnZQb2xsZXIgZXh0ZW5kcyBtb25nb190eXBlc18xLlR5cGVkRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5zcnZIb3N0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignT3B0aW9ucyBmb3IgU3J2UG9sbGVyIG11c3QgZXhpc3QgYW5kIGluY2x1ZGUgc3J2SG9zdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3J2SG9zdCA9IG9wdGlvbnMuc3J2SG9zdDtcbiAgICAgICAgdGhpcy5zcnZNYXhIb3N0cyA9IG9wdGlvbnMuc3J2TWF4SG9zdHMgPz8gMDtcbiAgICAgICAgdGhpcy5zcnZTZXJ2aWNlTmFtZSA9IG9wdGlvbnMuc3J2U2VydmljZU5hbWUgPz8gJ21vbmdvZGInO1xuICAgICAgICB0aGlzLnJlc2NhblNydkludGVydmFsTVMgPSA2MDAwMDtcbiAgICAgICAgdGhpcy5oZWFydGJlYXRGcmVxdWVuY3lNUyA9IG9wdGlvbnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgPz8gMTAwMDA7XG4gICAgICAgIHRoaXMuaGFNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCBzcnZBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gYF8ke3RoaXMuc3J2U2VydmljZU5hbWV9Ll90Y3AuJHt0aGlzLnNydkhvc3R9YDtcbiAgICB9XG4gICAgZ2V0IGludGVydmFsTVMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhTW9kZSA/IHRoaXMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgOiB0aGlzLnJlc2NhblNydkludGVydmFsTVM7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGhpcy5fdGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRpb24gKz0gMTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETyhOT0RFLTQ5OTQpOiBpbXBsZW1lbnQgbmV3IGxvZ2dpbmcgbG9naWMgZm9yIFNydlBvbGxlciBmYWlsdXJlc1xuICAgIHNjaGVkdWxlKCkge1xuICAgICAgICBpZiAodGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGhpcy5fdGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGltZW91dCA9ICgwLCB0aW1lcnNfMS5zZXRUaW1lb3V0KSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsKCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgIH0sIHRoaXMuaW50ZXJ2YWxNUyk7XG4gICAgfVxuICAgIHN1Y2Nlc3Moc3J2UmVjb3Jkcykge1xuICAgICAgICB0aGlzLmhhTW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgIHRoaXMuZW1pdChTcnZQb2xsZXIuU1JWX1JFQ09SRF9ESVNDT1ZFUlksIG5ldyBTcnZQb2xsaW5nRXZlbnQoc3J2UmVjb3JkcykpO1xuICAgIH1cbiAgICBmYWlsdXJlKCkge1xuICAgICAgICB0aGlzLmhhTW9kZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICB9XG4gICAgYXN5bmMgX3BvbGwoKSB7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRpb24gPSB0aGlzLmdlbmVyYXRpb247XG4gICAgICAgIGxldCBzcnZSZWNvcmRzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3J2UmVjb3JkcyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlU3J2KHRoaXMuc3J2QWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGRuc0Vycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWx1cmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2VuZXJhdGlvbiAhPT0gdGhpcy5nZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmluYWxBZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2Ygc3J2UmVjb3Jkcykge1xuICAgICAgICAgICAgaWYgKCgwLCB1dGlsc18xLm1hdGNoZXNQYXJlbnREb21haW4pKHJlY29yZC5uYW1lLCB0aGlzLnNydkhvc3QpKSB7XG4gICAgICAgICAgICAgICAgZmluYWxBZGRyZXNzZXMucHVzaChyZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZmluYWxBZGRyZXNzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmZhaWx1cmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1Y2Nlc3MoZmluYWxBZGRyZXNzZXMpO1xuICAgIH1cbn1cbi8qKiBAZXZlbnQgKi9cblNydlBvbGxlci5TUlZfUkVDT1JEX0RJU0NPVkVSWSA9ICdzcnZSZWNvcmREaXNjb3ZlcnknO1xuZXhwb3J0cy5TcnZQb2xsZXIgPSBTcnZQb2xsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcnZfcG9sbGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst server_selection_events_1 = __webpack_require__(/*! ./server_selection_events */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        this.mongoLogger = client.mongoLogger;\n        this.component = 'topology';\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get serverApi() {\n        return this.s.options.serverApi;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error) => callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        const selectServerOptions = { operationName: 'ping', ...options };\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions, (err, server) => {\n            if (err) {\n                this.close();\n                return exitWithError(err);\n            }\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {}).then(() => {\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                }, exitWithError);\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    /** Close this topology */\n    close() {\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return;\n        }\n        for (const server of this.s.servers.values()) {\n            destroyServer(server, this);\n        }\n        this.s.servers.clear();\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n        (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        stateTransition(this, common_1.STATE_CLOSED);\n        // emit an event for close\n        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n        }\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n            }\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            topologyDescription: this.description,\n            mongoLogger: this.client.mongoLogger,\n            transaction,\n            callback,\n            timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS),\n            startTime: (0, utils_1.now)(),\n            operationName: options.operationName,\n            waitingLogged: false,\n            previousServer: options.previousServer\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n            }\n            waitQueueMember.callback(timeoutError);\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology) {\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy();\n    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.removeAllListeners(event);\n    }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeoutController.clear();\n        if (!waitQueueMember[kCancelled]) {\n            if (err) {\n                if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                    waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, err, waitQueueMember.operationName));\n                }\n            }\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            const previousServer = waitQueueMember.previousServer;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : [])\n                : serverDescriptions;\n        }\n        catch (e) {\n            waitQueueMember.timeoutController.clear();\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, e, waitQueueMember.operationName));\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            if (!waitQueueMember.waitingLogged) {\n                if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n                    topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0\n                        ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime)\n                        : -1, waitQueueMember.operationName));\n                }\n                waitQueueMember.waitingLogged = true;\n            }\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            const error = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, error, waitQueueMember.operationName));\n            }\n            waitQueueMember.callback(error);\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeoutController.clear();\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS90b3BvbG9neS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxnQkFBZ0I7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLGtCQUFNO0FBQzdCLDRCQUE0QixtQkFBTyxDQUFDLG1GQUFzQjtBQUMxRCxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBYztBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyx1QkFBdUIsbUJBQU8sQ0FBQyx5RUFBaUI7QUFDaEQsc0JBQXNCLG1CQUFPLENBQUMsdUVBQWdCO0FBQzlDLDBCQUEwQixtQkFBTyxDQUFDLCtFQUFvQjtBQUN0RCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBVTtBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBVTtBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBVTtBQUNuQyw2QkFBNkIsbUJBQU8sQ0FBQyx5RkFBc0I7QUFDM0QsMkJBQTJCLG1CQUFPLENBQUMscUZBQW9CO0FBQ3ZELGtDQUFrQyxtQkFBTyxDQUFDLG1HQUEyQjtBQUNyRSxzQkFBc0IsbUJBQU8sQ0FBQywyRUFBZTtBQUM3QywrQkFBK0IsbUJBQU8sQ0FBQyw2RkFBd0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRixxQkFBcUI7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsU0FBUyxJQUFJO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsa0NBQWtDO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMkJBQTJCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3RvcG9sb2d5LmpzPzRmMGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlckNhcGFiaWxpdGllcyA9IGV4cG9ydHMuVG9wb2xvZ3kgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGNvbm5lY3Rpb25fc3RyaW5nXzEgPSByZXF1aXJlKFwiLi4vY29ubmVjdGlvbl9zdHJpbmdcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgbW9uZ29fbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vbW9uZ29fbG9nZ2VyXCIpO1xuY29uc3QgbW9uZ29fdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9tb25nb190eXBlc1wiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcIi4vZXZlbnRzXCIpO1xuY29uc3Qgc2VydmVyXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXJcIik7XG5jb25zdCBzZXJ2ZXJfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL3NlcnZlcl9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IHNlcnZlcl9zZWxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3NlcnZlcl9zZWxlY3Rpb25cIik7XG5jb25zdCBzZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50c18xID0gcmVxdWlyZShcIi4vc2VydmVyX3NlbGVjdGlvbl9ldmVudHNcIik7XG5jb25zdCBzcnZfcG9sbGluZ18xID0gcmVxdWlyZShcIi4vc3J2X3BvbGxpbmdcIik7XG5jb25zdCB0b3BvbG9neV9kZXNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vdG9wb2xvZ3lfZGVzY3JpcHRpb25cIik7XG4vLyBHbG9iYWwgc3RhdGVcbmxldCBnbG9iYWxUb3BvbG9neUNvdW50ZXIgPSAwO1xuY29uc3Qgc3RhdGVUcmFuc2l0aW9uID0gKDAsIHV0aWxzXzEubWFrZVN0YXRlTWFjaGluZSkoe1xuICAgIFtjb21tb25fMS5TVEFURV9DTE9TRURdOiBbY29tbW9uXzEuU1RBVEVfQ0xPU0VELCBjb21tb25fMS5TVEFURV9DT05ORUNUSU5HXSxcbiAgICBbY29tbW9uXzEuU1RBVEVfQ09OTkVDVElOR106IFtjb21tb25fMS5TVEFURV9DT05ORUNUSU5HLCBjb21tb25fMS5TVEFURV9DTE9TSU5HLCBjb21tb25fMS5TVEFURV9DT05ORUNURUQsIGNvbW1vbl8xLlNUQVRFX0NMT1NFRF0sXG4gICAgW2NvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRF06IFtjb21tb25fMS5TVEFURV9DT05ORUNURUQsIGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcsIGNvbW1vbl8xLlNUQVRFX0NMT1NFRF0sXG4gICAgW2NvbW1vbl8xLlNUQVRFX0NMT1NJTkddOiBbY29tbW9uXzEuU1RBVEVfQ0xPU0lORywgY29tbW9uXzEuU1RBVEVfQ0xPU0VEXVxufSk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrQ2FuY2VsbGVkID0gU3ltYm9sKCdjYW5jZWxsZWQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtXYWl0UXVldWUgPSBTeW1ib2woJ3dhaXRRdWV1ZScpO1xuLyoqXG4gKiBBIGNvbnRhaW5lciBvZiBzZXJ2ZXIgaW5zdGFuY2VzIHJlcHJlc2VudGluZyBhIGNvbm5lY3Rpb24gdG8gYSBNb25nb0RCIHRvcG9sb2d5LlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRvcG9sb2d5IGV4dGVuZHMgbW9uZ29fdHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlZWRsaXN0IC0gYSBsaXN0IG9mIEhvc3RBZGRyZXNzIGluc3RhbmNlcyB0byBjb25uZWN0IHRvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBzZWVkcywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICAgICAgdGhpcy5zZWxlY3RTZXJ2ZXJBc3luYyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSgoc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB0aGlzLnNlbGVjdFNlcnZlcihzZWxlY3Rvciwgb3B0aW9ucywgY2FsbGJhY2spKTtcbiAgICAgICAgLy8gT3B0aW9ucyBzaG91bGQgb25seSBiZSB1bmRlZmluZWQgaW4gdGVzdHMsIE1vbmdvQ2xpZW50IHdpbGwgYWx3YXlzIGhhdmUgZGVmaW5lZCBvcHRpb25zXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHtcbiAgICAgICAgICAgIGhvc3RzOiBbdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3RyaW5nKCdsb2NhbGhvc3Q6MjcwMTcnKV0sXG4gICAgICAgICAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMoY29ubmVjdGlvbl9zdHJpbmdfMS5ERUZBVUxUX09QVElPTlMuZW50cmllcygpKSxcbiAgICAgICAgICAgIC4uLk9iamVjdC5mcm9tRW50cmllcyhjb25uZWN0aW9uX3N0cmluZ18xLkZFQVRVUkVfRkxBR1MuZW50cmllcygpKVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHNlZWRzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2VlZHMgPSBbdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3RyaW5nKHNlZWRzKV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc2VlZHMpKSB7XG4gICAgICAgICAgICBzZWVkcyA9IFtzZWVkc107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VlZGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzZWVkIG9mIHNlZWRzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc2VlZGxpc3QucHVzaCh1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TdHJpbmcoc2VlZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2VlZCBpbnN0YW5jZW9mIHV0aWxzXzEuSG9zdEFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICBzZWVkbGlzdC5wdXNoKHNlZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRklYTUUoTk9ERS0zNDgzKTogTWF5IG5lZWQgdG8gYmUgYSBNb25nb1BhcnNlRXJyb3JcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihgVG9wb2xvZ3kgY2Fubm90IGJlIGNvbnN0cnVjdGVkIGZyb20gJHtKU09OLnN0cmluZ2lmeShzZWVkKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3BvbG9neVR5cGUgPSB0b3BvbG9neVR5cGVGcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdG9wb2xvZ3lJZCA9IGdsb2JhbFRvcG9sb2d5Q291bnRlcisrO1xuICAgICAgICBjb25zdCBzZWxlY3RlZEhvc3RzID0gb3B0aW9ucy5zcnZNYXhIb3N0cyA9PSBudWxsIHx8XG4gICAgICAgICAgICBvcHRpb25zLnNydk1heEhvc3RzID09PSAwIHx8XG4gICAgICAgICAgICBvcHRpb25zLnNydk1heEhvc3RzID49IHNlZWRsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgPyBzZWVkbGlzdFxuICAgICAgICAgICAgOiAoMCwgdXRpbHNfMS5zaHVmZmxlKShzZWVkbGlzdCwgb3B0aW9ucy5zcnZNYXhIb3N0cyk7XG4gICAgICAgIGNvbnN0IHNlcnZlckRlc2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBob3N0QWRkcmVzcyBvZiBzZWxlY3RlZEhvc3RzKSB7XG4gICAgICAgICAgICBzZXJ2ZXJEZXNjcmlwdGlvbnMuc2V0KGhvc3RBZGRyZXNzLnRvU3RyaW5nKCksIG5ldyBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5TZXJ2ZXJEZXNjcmlwdGlvbihob3N0QWRkcmVzcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba1dhaXRRdWV1ZV0gPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgICAgIHRoaXMucyA9IHtcbiAgICAgICAgICAgIC8vIHRoZSBpZCBvZiB0aGlzIHRvcG9sb2d5XG4gICAgICAgICAgICBpZDogdG9wb2xvZ3lJZCxcbiAgICAgICAgICAgIC8vIHBhc3NlZCBpbiBvcHRpb25zXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgLy8gaW5pdGlhbCBzZWVkbGlzdCBvZiBzZXJ2ZXJzIHRvIGNvbm5lY3QgdG9cbiAgICAgICAgICAgIHNlZWRsaXN0LFxuICAgICAgICAgICAgLy8gaW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgc3RhdGU6IGNvbW1vbl8xLlNUQVRFX0NMT1NFRCxcbiAgICAgICAgICAgIC8vIHRoZSB0b3BvbG9neSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG5ldyB0b3BvbG9neV9kZXNjcmlwdGlvbl8xLlRvcG9sb2d5RGVzY3JpcHRpb24odG9wb2xvZ3lUeXBlLCBzZXJ2ZXJEZXNjcmlwdGlvbnMsIG9wdGlvbnMucmVwbGljYVNldCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucyksXG4gICAgICAgICAgICBzZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVM6IG9wdGlvbnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TLFxuICAgICAgICAgICAgaGVhcnRiZWF0RnJlcXVlbmN5TVM6IG9wdGlvbnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMsXG4gICAgICAgICAgICBtaW5IZWFydGJlYXRGcmVxdWVuY3lNUzogb3B0aW9ucy5taW5IZWFydGJlYXRGcmVxdWVuY3lNUyxcbiAgICAgICAgICAgIC8vIGEgbWFwIG9mIHNlcnZlciBpbnN0YW5jZXMgdG8gbm9ybWFsaXplZCBhZGRyZXNzZXNcbiAgICAgICAgICAgIHNlcnZlcnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBvcHRpb25zPy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgIGNsdXN0ZXJUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvLyB0aW1lciBtYW5hZ2VtZW50XG4gICAgICAgICAgICBjb25uZWN0aW9uVGltZXJzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICBkZXRlY3RTaGFyZGVkVG9wb2xvZ3k6IGV2ID0+IHRoaXMuZGV0ZWN0U2hhcmRlZFRvcG9sb2d5KGV2KSxcbiAgICAgICAgICAgIGRldGVjdFNydlJlY29yZHM6IGV2ID0+IHRoaXMuZGV0ZWN0U3J2UmVjb3JkcyhldilcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb25nb0xvZ2dlciA9IGNsaWVudC5tb25nb0xvZ2dlcjtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSAndG9wb2xvZ3knO1xuICAgICAgICBpZiAob3B0aW9ucy5zcnZIb3N0ICYmICFvcHRpb25zLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICAgICAgdGhpcy5zLnNydlBvbGxlciA9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zcnZQb2xsZXIgPz9cbiAgICAgICAgICAgICAgICAgICAgbmV3IHNydl9wb2xsaW5nXzEuU3J2UG9sbGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYXJ0YmVhdEZyZXF1ZW5jeU1TOiB0aGlzLnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcnZIb3N0OiBvcHRpb25zLnNydkhvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcnZNYXhIb3N0czogb3B0aW9ucy5zcnZNYXhIb3N0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNydlNlcnZpY2VOYW1lOiBvcHRpb25zLnNydlNlcnZpY2VOYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5vbihUb3BvbG9neS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VELCB0aGlzLnMuZGV0ZWN0U2hhcmRlZFRvcG9sb2d5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXRlY3RTaGFyZGVkVG9wb2xvZ3koZXZlbnQpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNUeXBlID0gZXZlbnQucHJldmlvdXNEZXNjcmlwdGlvbi50eXBlO1xuICAgICAgICBjb25zdCBuZXdUeXBlID0gZXZlbnQubmV3RGVzY3JpcHRpb24udHlwZTtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvblRvU2hhcmRlZCA9IHByZXZpb3VzVHlwZSAhPT0gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLlNoYXJkZWQgJiYgbmV3VHlwZSA9PT0gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLlNoYXJkZWQ7XG4gICAgICAgIGNvbnN0IHNydkxpc3RlbmVycyA9IHRoaXMucy5zcnZQb2xsZXI/Lmxpc3RlbmVycyhzcnZfcG9sbGluZ18xLlNydlBvbGxlci5TUlZfUkVDT1JEX0RJU0NPVkVSWSk7XG4gICAgICAgIGNvbnN0IGxpc3RlbmluZ1RvU3J2UG9sbGluZyA9ICEhc3J2TGlzdGVuZXJzPy5pbmNsdWRlcyh0aGlzLnMuZGV0ZWN0U3J2UmVjb3Jkcyk7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uVG9TaGFyZGVkICYmICFsaXN0ZW5pbmdUb1NydlBvbGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucy5zcnZQb2xsZXI/Lm9uKHNydl9wb2xsaW5nXzEuU3J2UG9sbGVyLlNSVl9SRUNPUkRfRElTQ09WRVJZLCB0aGlzLnMuZGV0ZWN0U3J2UmVjb3Jkcyk7XG4gICAgICAgICAgICB0aGlzLnMuc3J2UG9sbGVyPy5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRldGVjdFNydlJlY29yZHMoZXYpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnMuZGVzY3JpcHRpb24gPSB0aGlzLnMuZGVzY3JpcHRpb24udXBkYXRlRnJvbVNydlBvbGxpbmdFdmVudChldiwgdGhpcy5zLm9wdGlvbnMuc3J2TWF4SG9zdHMpO1xuICAgICAgICBpZiAodGhpcy5zLmRlc2NyaXB0aW9uID09PSBwcmV2aW91c1RvcG9sb2d5RGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgY2hhbmdlZCwgc28gcmV0dXJuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlU2VydmVycyh0aGlzKTtcbiAgICAgICAgdGhpcy5lbWl0QW5kTG9nKFRvcG9sb2d5LlRPUE9MT0dZX0RFU0NSSVBUSU9OX0NIQU5HRUQsIG5ldyBldmVudHNfMS5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50KHRoaXMucy5pZCwgcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uLCB0aGlzLnMuZGVzY3JpcHRpb24pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQSBgVG9wb2xvZ3lEZXNjcmlwdGlvbmAgZm9yIHRoaXMgdG9wb2xvZ3lcbiAgICAgKi9cbiAgICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMuZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGdldCBsb2FkQmFsYW5jZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMub3B0aW9ucy5sb2FkQmFsYW5jZWQ7XG4gICAgfVxuICAgIGdldCBzZXJ2ZXJBcGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMub3B0aW9ucy5zZXJ2ZXJBcGk7XG4gICAgfVxuICAgIGdldCBjYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VydmVyQ2FwYWJpbGl0aWVzKHRoaXMubGFzdEhlbGxvKCkpO1xuICAgIH1cbiAgICBjb25uZWN0KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIChjYWxsYmFjayA9IG9wdGlvbnMpLCAob3B0aW9ucyA9IHt9KTtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIGlmICh0aGlzLnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkcpO1xuICAgICAgICAvLyBlbWl0IFNEQU0gbW9uaXRvcmluZyBldmVudHNcbiAgICAgICAgdGhpcy5lbWl0QW5kTG9nKFRvcG9sb2d5LlRPUE9MT0dZX09QRU5JTkcsIG5ldyBldmVudHNfMS5Ub3BvbG9neU9wZW5pbmdFdmVudCh0aGlzLnMuaWQpKTtcbiAgICAgICAgLy8gZW1pdCBhbiBldmVudCBmb3IgdGhlIHRvcG9sb2d5IGNoYW5nZVxuICAgICAgICB0aGlzLmVtaXRBbmRMb2coVG9wb2xvZ3kuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCwgbmV3IGV2ZW50c18xLlRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQodGhpcy5zLmlkLCBuZXcgdG9wb2xvZ3lfZGVzY3JpcHRpb25fMS5Ub3BvbG9neURlc2NyaXB0aW9uKGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5Vbmtub3duKSwgLy8gaW5pdGlhbCBpcyBhbHdheXMgVW5rbm93blxuICAgICAgICB0aGlzLnMuZGVzY3JpcHRpb24pKTtcbiAgICAgICAgLy8gY29ubmVjdCBhbGwga25vd24gc2VydmVycywgdGhlbiBhdHRlbXB0IHNlcnZlciBzZWxlY3Rpb24gdG8gY29ubmVjdFxuICAgICAgICBjb25zdCBzZXJ2ZXJEZXNjcmlwdGlvbnMgPSBBcnJheS5mcm9tKHRoaXMucy5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKTtcbiAgICAgICAgdGhpcy5zLnNlcnZlcnMgPSBuZXcgTWFwKHNlcnZlckRlc2NyaXB0aW9ucy5tYXAoc2VydmVyRGVzY3JpcHRpb24gPT4gW1xuICAgICAgICAgICAgc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcyxcbiAgICAgICAgICAgIGNyZWF0ZUFuZENvbm5lY3RTZXJ2ZXIodGhpcywgc2VydmVyRGVzY3JpcHRpb24pXG4gICAgICAgIF0pKTtcbiAgICAgICAgLy8gSW4gbG9hZCBiYWxhbmNlciBtb2RlIHdlIG5lZWQgdG8gZmFrZSBhIHNlcnZlciBkZXNjcmlwdGlvbiBnZXR0aW5nXG4gICAgICAgIC8vIGVtaXR0ZWQgZnJvbSB0aGUgbW9uaXRvciwgc2luY2UgdGhlIG1vbml0b3IgZG9lc24ndCBleGlzdC5cbiAgICAgICAgaWYgKHRoaXMucy5vcHRpb25zLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBkZXNjcmlwdGlvbiBvZiBzZXJ2ZXJEZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEZXNjcmlwdGlvbiA9IG5ldyBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5TZXJ2ZXJEZXNjcmlwdGlvbihkZXNjcmlwdGlvbi5ob3N0QWRkcmVzcywgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRCYWxhbmNlZDogdGhpcy5zLm9wdGlvbnMubG9hZEJhbGFuY2VkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJVcGRhdGVIYW5kbGVyKG5ld0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGl0V2l0aEVycm9yID0gKGVycm9yKSA9PiBjYWxsYmFjayA/IGNhbGxiYWNrKGVycm9yKSA6IHRoaXMuZW1pdChUb3BvbG9neS5FUlJPUiwgZXJyb3IpO1xuICAgICAgICBjb25zdCByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPz8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICAgICAgY29uc3Qgc2VsZWN0U2VydmVyT3B0aW9ucyA9IHsgb3BlcmF0aW9uTmFtZTogJ3BpbmcnLCAuLi5vcHRpb25zIH07XG4gICAgICAgIHRoaXMuc2VsZWN0U2VydmVyKCgwLCBzZXJ2ZXJfc2VsZWN0aW9uXzEucmVhZFByZWZlcmVuY2VTZXJ2ZXJTZWxlY3RvcikocmVhZFByZWZlcmVuY2UpLCBzZWxlY3RTZXJ2ZXJPcHRpb25zLCAoZXJyLCBzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4aXRXaXRoRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNraXBQaW5nT25Db25uZWN0ID0gdGhpcy5zLm9wdGlvbnNbU3ltYm9sLmZvcignQEBtZGIuc2tpcFBpbmdPbkNvbm5lY3QnKV0gPT09IHRydWU7XG4gICAgICAgICAgICBpZiAoIXNraXBQaW5nT25Db25uZWN0ICYmIHNlcnZlciAmJiB0aGlzLnMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIuY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJ2FkbWluLiRjbWQnKSwgeyBwaW5nOiAxIH0sIHt9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChUb3BvbG9neS5PUEVOLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFRvcG9sb2d5LkNPTk5FQ1QsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaz8uKHVuZGVmaW5lZCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfSwgZXhpdFdpdGhFcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVG9wb2xvZ3kuT1BFTiwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVG9wb2xvZ3kuQ09OTkVDVCwgdGhpcyk7XG4gICAgICAgICAgICBjYWxsYmFjaz8uKHVuZGVmaW5lZCwgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQ2xvc2UgdGhpcyB0b3BvbG9neSAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5zLnN0YXRlID09PSBjb21tb25fMS5TVEFURV9DTE9TRUQgfHwgdGhpcy5zLnN0YXRlID09PSBjb21tb25fMS5TVEFURV9DTE9TSU5HKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgdGhpcy5zLnNlcnZlcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lTZXJ2ZXIoc2VydmVyLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnMuc2VydmVycy5jbGVhcigpO1xuICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ0xPU0lORyk7XG4gICAgICAgIGRyYWluV2FpdFF1ZXVlKHRoaXNba1dhaXRRdWV1ZV0sIG5ldyBlcnJvcl8xLk1vbmdvVG9wb2xvZ3lDbG9zZWRFcnJvcigpKTtcbiAgICAgICAgKDAsIGNvbW1vbl8xLmRyYWluVGltZXJRdWV1ZSkodGhpcy5zLmNvbm5lY3Rpb25UaW1lcnMpO1xuICAgICAgICBpZiAodGhpcy5zLnNydlBvbGxlcikge1xuICAgICAgICAgICAgdGhpcy5zLnNydlBvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnMuc3J2UG9sbGVyLnJlbW92ZUxpc3RlbmVyKHNydl9wb2xsaW5nXzEuU3J2UG9sbGVyLlNSVl9SRUNPUkRfRElTQ09WRVJZLCB0aGlzLnMuZGV0ZWN0U3J2UmVjb3Jkcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihUb3BvbG9neS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VELCB0aGlzLnMuZGV0ZWN0U2hhcmRlZFRvcG9sb2d5KTtcbiAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NMT1NFRCk7XG4gICAgICAgIC8vIGVtaXQgYW4gZXZlbnQgZm9yIGNsb3NlXG4gICAgICAgIHRoaXMuZW1pdEFuZExvZyhUb3BvbG9neS5UT1BPTE9HWV9DTE9TRUQsIG5ldyBldmVudHNfMS5Ub3BvbG9neUNsb3NlZEV2ZW50KHRoaXMucy5pZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGEgc2VydmVyIGFjY29yZGluZyB0byB0aGUgc2VsZWN0aW9uIHByZWRpY2F0ZSBwcm92aWRlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIC0gQW4gb3B0aW9uYWwgc2VsZWN0b3IgdG8gc2VsZWN0IHNlcnZlcnMgYnksIGRlZmF1bHRzIHRvIGEgcmFuZG9tIHNlbGVjdGlvbiB3aXRoaW4gYSBsYXRlbmN5IHdpbmRvd1xuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgcmVsYXRlZCB0byBzZXJ2ZXIgc2VsZWN0aW9uXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHVzZWQgdG8gaW5kaWNhdGUgc3VjY2VzcyBvciBmYWlsdXJlXG4gICAgICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYSBgU2VydmVyYCBtZWV0aW5nIHRoZSBjcml0ZXJpYSBvZiB0aGUgcHJlZGljYXRlIHByb3ZpZGVkXG4gICAgICovXG4gICAgc2VsZWN0U2VydmVyKHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgc2VydmVyU2VsZWN0b3I7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc2VydmVyU2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnJlYWRQcmVmZXJlbmNlU2VydmVyU2VsZWN0b3IpKHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21TdHJpbmcoc2VsZWN0b3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCByZWFkUHJlZmVyZW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkUHJlZmVyZW5jZSA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UudHJhbnNsYXRlKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgfHwgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VydmVyU2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnJlYWRQcmVmZXJlbmNlU2VydmVyU2VsZWN0b3IpKHJlYWRQcmVmZXJlbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlcnZlclNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucyA9IHsgc2VydmVyU2VsZWN0aW9uVGltZW91dE1TOiB0aGlzLnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TLCAuLi5vcHRpb25zIH07XG4gICAgICAgIGlmICh0aGlzLmNsaWVudC5tb25nb0xvZ2dlcj8ud2lsbExvZyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LlNFUlZFUl9TRUxFQ1RJT04sIG1vbmdvX2xvZ2dlcl8xLlNldmVyaXR5TGV2ZWwuREVCVUcpKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudC5tb25nb0xvZ2dlcj8uZGVidWcobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBuZXcgc2VydmVyX3NlbGVjdGlvbl9ldmVudHNfMS5TZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQoc2VsZWN0b3IsIHRoaXMuZGVzY3JpcHRpb24sIG9wdGlvbnMub3BlcmF0aW9uTmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzU2hhcmRlZCA9IHRoaXMuZGVzY3JpcHRpb24udHlwZSA9PT0gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLlNoYXJkZWQ7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zLnNlc3Npb247XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gc2Vzc2lvbiAmJiBzZXNzaW9uLnRyYW5zYWN0aW9uO1xuICAgICAgICBpZiAoaXNTaGFyZGVkICYmIHRyYW5zYWN0aW9uICYmIHRyYW5zYWN0aW9uLnNlcnZlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xpZW50Lm1vbmdvTG9nZ2VyPy53aWxsTG9nKG1vbmdvX2xvZ2dlcl8xLk1vbmdvTG9nZ2FibGVDb21wb25lbnQuU0VSVkVSX1NFTEVDVElPTiwgbW9uZ29fbG9nZ2VyXzEuU2V2ZXJpdHlMZXZlbC5ERUJVRykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5tb25nb0xvZ2dlcj8uZGVidWcobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBuZXcgc2VydmVyX3NlbGVjdGlvbl9ldmVudHNfMS5TZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudChzZWxlY3RvciwgdGhpcy5kZXNjcmlwdGlvbiwgdHJhbnNhY3Rpb24uc2VydmVyLnBvb2wuYWRkcmVzcywgb3B0aW9ucy5vcGVyYXRpb25OYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIHRyYW5zYWN0aW9uLnNlcnZlcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2FpdFF1ZXVlTWVtYmVyID0ge1xuICAgICAgICAgICAgc2VydmVyU2VsZWN0b3IsXG4gICAgICAgICAgICB0b3BvbG9neURlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbW9uZ29Mb2dnZXI6IHRoaXMuY2xpZW50Lm1vbmdvTG9nZ2VyLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHRpbWVvdXRDb250cm9sbGVyOiBuZXcgdXRpbHNfMS5UaW1lb3V0Q29udHJvbGxlcihvcHRpb25zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyksXG4gICAgICAgICAgICBzdGFydFRpbWU6ICgwLCB1dGlsc18xLm5vdykoKSxcbiAgICAgICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wdGlvbnMub3BlcmF0aW9uTmFtZSxcbiAgICAgICAgICAgIHdhaXRpbmdMb2dnZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJldmlvdXNTZXJ2ZXI6IG9wdGlvbnMucHJldmlvdXNTZXJ2ZXJcbiAgICAgICAgfTtcbiAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLnRpbWVvdXRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHtcbiAgICAgICAgICAgIHdhaXRRdWV1ZU1lbWJlcltrQ2FuY2VsbGVkXSA9IHRydWU7XG4gICAgICAgICAgICB3YWl0UXVldWVNZW1iZXIudGltZW91dENvbnRyb2xsZXIuY2xlYXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRFcnJvciA9IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyU2VsZWN0aW9uRXJyb3IoYFNlcnZlciBzZWxlY3Rpb24gdGltZWQgb3V0IGFmdGVyICR7b3B0aW9ucy5zZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVN9IG1zYCwgdGhpcy5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAodGhpcy5jbGllbnQubW9uZ29Mb2dnZXI/LndpbGxMb2cobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBtb25nb19sb2dnZXJfMS5TZXZlcml0eUxldmVsLkRFQlVHKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50Lm1vbmdvTG9nZ2VyPy5kZWJ1Zyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LlNFUlZFUl9TRUxFQ1RJT04sIG5ldyBzZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50c18xLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50KHNlbGVjdG9yLCB0aGlzLmRlc2NyaXB0aW9uLCB0aW1lb3V0RXJyb3IsIG9wdGlvbnMub3BlcmF0aW9uTmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLmNhbGxiYWNrKHRpbWVvdXRFcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzW2tXYWl0UXVldWVdLnB1c2god2FpdFF1ZXVlTWVtYmVyKTtcbiAgICAgICAgcHJvY2Vzc1dhaXRRdWV1ZSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBpbnRlcm5hbCBUb3BvbG9neURlc2NyaXB0aW9uIHdpdGggYSBTZXJ2ZXJEZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHNlcnZlckRlc2NyaXB0aW9uIC0gVGhlIHNlcnZlciB0byB1cGRhdGUgaW4gdGhlIGludGVybmFsIGxpc3Qgb2Ygc2VydmVyIGRlc2NyaXB0aW9uc1xuICAgICAqL1xuICAgIHNlcnZlclVwZGF0ZUhhbmRsZXIoc2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLnMuZGVzY3JpcHRpb24uaGFzU2VydmVyKHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWdub3JlIHRoaXMgc2VydmVyIHVwZGF0ZSBpZiBpdHMgZnJvbSBhbiBvdXRkYXRlZCB0b3BvbG9neVZlcnNpb25cbiAgICAgICAgaWYgKGlzU3RhbGVTZXJ2ZXJEZXNjcmlwdGlvbih0aGlzLnMuZGVzY3JpcHRpb24sIHNlcnZlckRlc2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgdXNlZCBmb3IgbW9uaXRvcmluZyBldmVudHMgbGF0ZXJcbiAgICAgICAgY29uc3QgcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCBwcmV2aW91c1NlcnZlckRlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uLnNlcnZlcnMuZ2V0KHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpO1xuICAgICAgICBpZiAoIXByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBEcml2ZXIgU2Vzc2lvbnMgU3BlYzogXCJXaGVuZXZlciBhIGRyaXZlciByZWNlaXZlcyBhIGNsdXN0ZXIgdGltZSBmcm9tXG4gICAgICAgIC8vIGEgc2VydmVyIGl0IE1VU1QgY29tcGFyZSBpdCB0byB0aGUgY3VycmVudCBoaWdoZXN0IHNlZW4gY2x1c3RlciB0aW1lXG4gICAgICAgIC8vIGZvciB0aGUgZGVwbG95bWVudC4gSWYgdGhlIG5ldyBjbHVzdGVyIHRpbWUgaXMgaGlnaGVyIHRoYW4gdGhlXG4gICAgICAgIC8vIGhpZ2hlc3Qgc2VlbiBjbHVzdGVyIHRpbWUgaXQgTVVTVCBiZWNvbWUgdGhlIG5ldyBoaWdoZXN0IHNlZW4gY2x1c3RlclxuICAgICAgICAvLyB0aW1lLiBUd28gY2x1c3RlciB0aW1lcyBhcmUgY29tcGFyZWQgdXNpbmcgb25seSB0aGUgQnNvblRpbWVzdGFtcFxuICAgICAgICAvLyB2YWx1ZSBvZiB0aGUgY2x1c3RlclRpbWUgZW1iZWRkZWQgZmllbGQuXCJcbiAgICAgICAgY29uc3QgY2x1c3RlclRpbWUgPSBzZXJ2ZXJEZXNjcmlwdGlvbi4kY2x1c3RlclRpbWU7XG4gICAgICAgIGlmIChjbHVzdGVyVGltZSkge1xuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLl9hZHZhbmNlQ2x1c3RlclRpbWUpKHRoaXMsIGNsdXN0ZXJUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgYWxsIHRoZSBpbmZvcm1hdGlvbiBjb250YWluZWQgaW4gdGhpcyB1cGRhdGVkIGRlc2NyaXB0aW9uLCB0aGVuXG4gICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZW1pdCBTREFNIGV2ZW50cywgYnV0IHN0aWxsIG5lZWQgdG8gdXBkYXRlIHRoZSBkZXNjcmlwdGlvbiwgaW4gb3JkZXJcbiAgICAgICAgLy8gdG8ga2VlcCBjbGllbnQtdHJhY2tlZCBhdHRyaWJ1dGVzIGxpa2UgbGFzdCB1cGRhdGUgdGltZSBhbmQgcm91bmQgdHJpcCB0aW1lIHVwIHRvIGRhdGVcbiAgICAgICAgY29uc3QgZXF1YWxEZXNjcmlwdGlvbnMgPSBwcmV2aW91c1NlcnZlckRlc2NyaXB0aW9uICYmIHByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24uZXF1YWxzKHNlcnZlckRlc2NyaXB0aW9uKTtcbiAgICAgICAgLy8gZmlyc3QgdXBkYXRlIHRoZSBUb3BvbG9neURlc2NyaXB0aW9uXG4gICAgICAgIHRoaXMucy5kZXNjcmlwdGlvbiA9IHRoaXMucy5kZXNjcmlwdGlvbi51cGRhdGUoc2VydmVyRGVzY3JpcHRpb24pO1xuICAgICAgICBpZiAodGhpcy5zLmRlc2NyaXB0aW9uLmNvbXBhdGliaWxpdHlFcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFRvcG9sb2d5LkVSUk9SLCBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcih0aGlzLnMuZGVzY3JpcHRpb24uY29tcGF0aWJpbGl0eUVycm9yKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW1pdCBtb25pdG9yaW5nIGV2ZW50cyBmb3IgdGhpcyBjaGFuZ2VcbiAgICAgICAgaWYgKCFlcXVhbERlc2NyaXB0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgbmV3RGVzY3JpcHRpb24gPSB0aGlzLnMuZGVzY3JpcHRpb24uc2VydmVycy5nZXQoc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcyk7XG4gICAgICAgICAgICBpZiAobmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVG9wb2xvZ3kuU0VSVkVSX0RFU0NSSVBUSU9OX0NIQU5HRUQsIG5ldyBldmVudHNfMS5TZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCh0aGlzLnMuaWQsIHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MsIHByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24sIG5ld0Rlc2NyaXB0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRlIHNlcnZlciBsaXN0IGZyb20gdXBkYXRlZCBkZXNjcmlwdGlvbnNcbiAgICAgICAgdXBkYXRlU2VydmVycyh0aGlzLCBzZXJ2ZXJEZXNjcmlwdGlvbik7XG4gICAgICAgIC8vIGF0dGVtcHQgdG8gcmVzb2x2ZSBhbnkgb3V0c3RhbmRpbmcgc2VydmVyIHNlbGVjdGlvbiBhdHRlbXB0c1xuICAgICAgICBpZiAodGhpc1trV2FpdFF1ZXVlXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwcm9jZXNzV2FpdFF1ZXVlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXF1YWxEZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEFuZExvZyhUb3BvbG9neS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VELCBuZXcgZXZlbnRzXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCh0aGlzLnMuaWQsIHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbiwgdGhpcy5zLmRlc2NyaXB0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXV0aChjcmVkZW50aWFscywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVkZW50aWFscyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIChjYWxsYmFjayA9IGNyZWRlbnRpYWxzKSwgKGNyZWRlbnRpYWxzID0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICAgIGdldCBjbGllbnRNZXRhZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5vcHRpb25zLm1ldGFkYXRhO1xuICAgIH1cbiAgICBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEO1xuICAgIH1cbiAgICBpc0Rlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ0xPU0VEO1xuICAgIH1cbiAgICAvLyBOT1RFOiBUaGVyZSBhcmUgbWFueSBwbGFjZXMgaW4gY29kZSB3aGVyZSB3ZSBleHBsaWNpdGx5IGNoZWNrIHRoZSBsYXN0IGhlbGxvXG4gICAgLy8gICAgICAgdG8gZG8gZmVhdHVyZSBzdXBwb3J0IGRldGVjdGlvbi4gVGhpcyBzaG91bGQgYmUgZG9uZSBhbnkgb3RoZXIgd2F5LCBidXQgZm9yXG4gICAgLy8gICAgICAgbm93IHdlIHdpbGwganVzdCByZXR1cm4gdGhlIGZpcnN0IGhlbGxvIHNlZW4sIHdoaWNoIHNob3VsZCBzdWZmaWNlLlxuICAgIGxhc3RIZWxsbygpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyRGVzY3JpcHRpb25zID0gQXJyYXkuZnJvbSh0aGlzLmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgICAgICBpZiAoc2VydmVyRGVzY3JpcHRpb25zLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgY29uc3Qgc2QgPSBzZXJ2ZXJEZXNjcmlwdGlvbnMuZmlsdGVyKChzZCkgPT4gc2QudHlwZSAhPT0gY29tbW9uXzEuU2VydmVyVHlwZS5Vbmtub3duKVswXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2QgfHwgeyBtYXhXaXJlVmVyc2lvbjogdGhpcy5kZXNjcmlwdGlvbi5jb21tb25XaXJlVmVyc2lvbiB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBnZXQgY29tbW9uV2lyZVZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uLmNvbW1vbldpcmVWZXJzaW9uO1xuICAgIH1cbiAgICBnZXQgbG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24ubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcztcbiAgICB9XG4gICAgZ2V0IGNsdXN0ZXJUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zLmNsdXN0ZXJUaW1lO1xuICAgIH1cbiAgICBzZXQgY2x1c3RlclRpbWUoY2x1c3RlclRpbWUpIHtcbiAgICAgICAgdGhpcy5zLmNsdXN0ZXJUaW1lID0gY2x1c3RlclRpbWU7XG4gICAgfVxufVxuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuU0VSVkVSX09QRU5JTkcgPSBjb25zdGFudHNfMS5TRVJWRVJfT1BFTklORztcbi8qKiBAZXZlbnQgKi9cblRvcG9sb2d5LlNFUlZFUl9DTE9TRUQgPSBjb25zdGFudHNfMS5TRVJWRVJfQ0xPU0VEO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuU0VSVkVSX0RFU0NSSVBUSU9OX0NIQU5HRUQgPSBjb25zdGFudHNfMS5TRVJWRVJfREVTQ1JJUFRJT05fQ0hBTkdFRDtcbi8qKiBAZXZlbnQgKi9cblRvcG9sb2d5LlRPUE9MT0dZX09QRU5JTkcgPSBjb25zdGFudHNfMS5UT1BPTE9HWV9PUEVOSU5HO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuVE9QT0xPR1lfQ0xPU0VEID0gY29uc3RhbnRzXzEuVE9QT0xPR1lfQ0xPU0VEO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCA9IGNvbnN0YW50c18xLlRPUE9MT0dZX0RFU0NSSVBUSU9OX0NIQU5HRUQ7XG4vKiogQGV2ZW50ICovXG5Ub3BvbG9neS5FUlJPUiA9IGNvbnN0YW50c18xLkVSUk9SO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuT1BFTiA9IGNvbnN0YW50c18xLk9QRU47XG4vKiogQGV2ZW50ICovXG5Ub3BvbG9neS5DT05ORUNUID0gY29uc3RhbnRzXzEuQ09OTkVDVDtcbi8qKiBAZXZlbnQgKi9cblRvcG9sb2d5LkNMT1NFID0gY29uc3RhbnRzXzEuQ0xPU0U7XG4vKiogQGV2ZW50ICovXG5Ub3BvbG9neS5USU1FT1VUID0gY29uc3RhbnRzXzEuVElNRU9VVDtcbmV4cG9ydHMuVG9wb2xvZ3kgPSBUb3BvbG9neTtcbi8qKiBEZXN0cm95cyBhIHNlcnZlciwgYW5kIHJlbW92ZXMgYWxsIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBpbnN0YW5jZSAqL1xuZnVuY3Rpb24gZGVzdHJveVNlcnZlcihzZXJ2ZXIsIHRvcG9sb2d5KSB7XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBjb25zdGFudHNfMS5MT0NBTF9TRVJWRVJfRVZFTlRTKSB7XG4gICAgICAgIHNlcnZlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpO1xuICAgIH1cbiAgICBzZXJ2ZXIuZGVzdHJveSgpO1xuICAgIHRvcG9sb2d5LmVtaXRBbmRMb2coVG9wb2xvZ3kuU0VSVkVSX0NMT1NFRCwgbmV3IGV2ZW50c18xLlNlcnZlckNsb3NlZEV2ZW50KHRvcG9sb2d5LnMuaWQsIHNlcnZlci5kZXNjcmlwdGlvbi5hZGRyZXNzKSk7XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBjb25zdGFudHNfMS5TRVJWRVJfUkVMQVlfRVZFTlRTKSB7XG4gICAgICAgIHNlcnZlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpO1xuICAgIH1cbn1cbi8qKiBQcmVkaWN0cyB0aGUgVG9wb2xvZ3lUeXBlIGZyb20gb3B0aW9ucyAqL1xuZnVuY3Rpb24gdG9wb2xvZ3lUeXBlRnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zPy5kaXJlY3RDb25uZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS5Ub3BvbG9neVR5cGUuU2luZ2xlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucz8ucmVwbGljYVNldCkge1xuICAgICAgICByZXR1cm4gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLlJlcGxpY2FTZXROb1ByaW1hcnk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zPy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5Mb2FkQmFsYW5jZWQ7XG4gICAgfVxuICAgIHJldHVybiBjb21tb25fMS5Ub3BvbG9neVR5cGUuVW5rbm93bjtcbn1cbi8qKlxuICogQ3JlYXRlcyBuZXcgc2VydmVyIGluc3RhbmNlcyBhbmQgYXR0ZW1wdHMgdG8gY29ubmVjdCB0aGVtXG4gKlxuICogQHBhcmFtIHRvcG9sb2d5IC0gVGhlIHRvcG9sb2d5IHRoYXQgdGhpcyBzZXJ2ZXIgYmVsb25ncyB0b1xuICogQHBhcmFtIHNlcnZlckRlc2NyaXB0aW9uIC0gVGhlIGRlc2NyaXB0aW9uIGZvciB0aGUgc2VydmVyIHRvIGluaXRpYWxpemUgYW5kIGNvbm5lY3QgdG9cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQW5kQ29ubmVjdFNlcnZlcih0b3BvbG9neSwgc2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICB0b3BvbG9neS5lbWl0QW5kTG9nKFRvcG9sb2d5LlNFUlZFUl9PUEVOSU5HLCBuZXcgZXZlbnRzXzEuU2VydmVyT3BlbmluZ0V2ZW50KHRvcG9sb2d5LnMuaWQsIHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpKTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBuZXcgc2VydmVyXzEuU2VydmVyKHRvcG9sb2d5LCBzZXJ2ZXJEZXNjcmlwdGlvbiwgdG9wb2xvZ3kucy5vcHRpb25zKTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGNvbnN0YW50c18xLlNFUlZFUl9SRUxBWV9FVkVOVFMpIHtcbiAgICAgICAgc2VydmVyLm9uKGV2ZW50LCAoZSkgPT4gdG9wb2xvZ3kuZW1pdChldmVudCwgZSkpO1xuICAgIH1cbiAgICBzZXJ2ZXIub24oc2VydmVyXzEuU2VydmVyLkRFU0NSSVBUSU9OX1JFQ0VJVkVELCBkZXNjcmlwdGlvbiA9PiB0b3BvbG9neS5zZXJ2ZXJVcGRhdGVIYW5kbGVyKGRlc2NyaXB0aW9uKSk7XG4gICAgc2VydmVyLmNvbm5lY3QoKTtcbiAgICByZXR1cm4gc2VydmVyO1xufVxuLyoqXG4gKiBAcGFyYW0gdG9wb2xvZ3kgLSBUb3BvbG9neSB0byB1cGRhdGUuXG4gKiBAcGFyYW0gaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbiAtIE5ldyBzZXJ2ZXIgZGVzY3JpcHRpb24uXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVNlcnZlcnModG9wb2xvZ3ksIGluY29taW5nU2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICAvLyB1cGRhdGUgdGhlIGludGVybmFsIHNlcnZlcidzIGRlc2NyaXB0aW9uXG4gICAgaWYgKGluY29taW5nU2VydmVyRGVzY3JpcHRpb24gJiYgdG9wb2xvZ3kucy5zZXJ2ZXJzLmhhcyhpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlciA9IHRvcG9sb2d5LnMuc2VydmVycy5nZXQoaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzKTtcbiAgICAgICAgaWYgKHNlcnZlcikge1xuICAgICAgICAgICAgc2VydmVyLnMuZGVzY3JpcHRpb24gPSBpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKGluY29taW5nU2VydmVyRGVzY3JpcHRpb24uZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IgJiZcbiAgICAgICAgICAgICAgICBpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmVycm9yLmhhc0Vycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUmVzZXRQb29sKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycnVwdEluVXNlQ29ubmVjdGlvbnMgPSBpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmVycm9yLmhhc0Vycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuSW50ZXJydXB0SW5Vc2VDb25uZWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgc2VydmVyLnBvb2wuY2xlYXIoeyBpbnRlcnJ1cHRJblVzZUNvbm5lY3Rpb25zIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbi5lcnJvciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VG9wb2xvZ3lUeXBlID0gdG9wb2xvZ3kucy5kZXNjcmlwdGlvbi50eXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZE1hcmtQb29sUmVhZHkgPSBpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmlzRGF0YUJlYXJpbmcgfHxcbiAgICAgICAgICAgICAgICAgICAgKGluY29taW5nU2VydmVyRGVzY3JpcHRpb24udHlwZSAhPT0gY29tbW9uXzEuU2VydmVyVHlwZS5Vbmtub3duICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdUb3BvbG9neVR5cGUgPT09IGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5TaW5nbGUpO1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRNYXJrUG9vbFJlYWR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZlci5wb29sLnJlYWR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGFkZCBuZXcgc2VydmVycyBmb3IgYWxsIGRlc2NyaXB0aW9ucyB3ZSBjdXJyZW50bHkgZG9uJ3Qga25vdyBhYm91dCBsb2NhbGx5XG4gICAgZm9yIChjb25zdCBzZXJ2ZXJEZXNjcmlwdGlvbiBvZiB0b3BvbG9neS5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKSB7XG4gICAgICAgIGlmICghdG9wb2xvZ3kucy5zZXJ2ZXJzLmhhcyhzZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzKSkge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyID0gY3JlYXRlQW5kQ29ubmVjdFNlcnZlcih0b3BvbG9neSwgc2VydmVyRGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgdG9wb2xvZ3kucy5zZXJ2ZXJzLnNldChzZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzLCBzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBhbGwgc2VydmVycyBubyBsb25nZXIga25vd24sIHJlbW92ZSB0aGVpciBkZXNjcmlwdGlvbnMgYW5kIGRlc3Ryb3kgdGhlaXIgaW5zdGFuY2VzXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiB0b3BvbG9neS5zLnNlcnZlcnMpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyQWRkcmVzcyA9IGVudHJ5WzBdO1xuICAgICAgICBpZiAodG9wb2xvZ3kuZGVzY3JpcHRpb24uaGFzU2VydmVyKHNlcnZlckFkZHJlc3MpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRvcG9sb2d5LnMuc2VydmVycy5oYXMoc2VydmVyQWRkcmVzcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlcnZlciA9IHRvcG9sb2d5LnMuc2VydmVycy5nZXQoc2VydmVyQWRkcmVzcyk7XG4gICAgICAgIHRvcG9sb2d5LnMuc2VydmVycy5kZWxldGUoc2VydmVyQWRkcmVzcyk7XG4gICAgICAgIC8vIHByZXBhcmUgc2VydmVyIGZvciBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgICAgaWYgKHNlcnZlcikge1xuICAgICAgICAgICAgZGVzdHJveVNlcnZlcihzZXJ2ZXIsIHRvcG9sb2d5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYWluV2FpdFF1ZXVlKHF1ZXVlLCBlcnIpIHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHdhaXRRdWV1ZU1lbWJlciA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmICghd2FpdFF1ZXVlTWVtYmVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB3YWl0UXVldWVNZW1iZXIudGltZW91dENvbnRyb2xsZXIuY2xlYXIoKTtcbiAgICAgICAgaWYgKCF3YWl0UXVldWVNZW1iZXJba0NhbmNlbGxlZF0pIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAod2FpdFF1ZXVlTWVtYmVyLm1vbmdvTG9nZ2VyPy53aWxsTG9nKG1vbmdvX2xvZ2dlcl8xLk1vbmdvTG9nZ2FibGVDb21wb25lbnQuU0VSVkVSX1NFTEVDVElPTiwgbW9uZ29fbG9nZ2VyXzEuU2V2ZXJpdHlMZXZlbC5ERUJVRykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLm1vbmdvTG9nZ2VyPy5kZWJ1Zyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LlNFUlZFUl9TRUxFQ1RJT04sIG5ldyBzZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50c18xLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50KHdhaXRRdWV1ZU1lbWJlci5zZXJ2ZXJTZWxlY3Rvciwgd2FpdFF1ZXVlTWVtYmVyLnRvcG9sb2d5RGVzY3JpcHRpb24sIGVyciwgd2FpdFF1ZXVlTWVtYmVyLm9wZXJhdGlvbk5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YWl0UXVldWVNZW1iZXIuY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NXYWl0UXVldWUodG9wb2xvZ3kpIHtcbiAgICBpZiAodG9wb2xvZ3kucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ0xPU0VEKSB7XG4gICAgICAgIGRyYWluV2FpdFF1ZXVlKHRvcG9sb2d5W2tXYWl0UXVldWVdLCBuZXcgZXJyb3JfMS5Nb25nb1RvcG9sb2d5Q2xvc2VkRXJyb3IoKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNTaGFyZGVkID0gdG9wb2xvZ3kuZGVzY3JpcHRpb24udHlwZSA9PT0gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLlNoYXJkZWQ7XG4gICAgY29uc3Qgc2VydmVyRGVzY3JpcHRpb25zID0gQXJyYXkuZnJvbSh0b3BvbG9neS5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKTtcbiAgICBjb25zdCBtZW1iZXJzVG9Qcm9jZXNzID0gdG9wb2xvZ3lba1dhaXRRdWV1ZV0ubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVtYmVyc1RvUHJvY2VzczsgKytpKSB7XG4gICAgICAgIGNvbnN0IHdhaXRRdWV1ZU1lbWJlciA9IHRvcG9sb2d5W2tXYWl0UXVldWVdLnNoaWZ0KCk7XG4gICAgICAgIGlmICghd2FpdFF1ZXVlTWVtYmVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FpdFF1ZXVlTWVtYmVyW2tDYW5jZWxsZWRdKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2VsZWN0ZWREZXNjcmlwdGlvbnM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJTZWxlY3RvciA9IHdhaXRRdWV1ZU1lbWJlci5zZXJ2ZXJTZWxlY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzU2VydmVyID0gd2FpdFF1ZXVlTWVtYmVyLnByZXZpb3VzU2VydmVyO1xuICAgICAgICAgICAgc2VsZWN0ZWREZXNjcmlwdGlvbnMgPSBzZXJ2ZXJTZWxlY3RvclxuICAgICAgICAgICAgICAgID8gc2VydmVyU2VsZWN0b3IodG9wb2xvZ3kuZGVzY3JpcHRpb24sIHNlcnZlckRlc2NyaXB0aW9ucywgcHJldmlvdXNTZXJ2ZXIgPyBbcHJldmlvdXNTZXJ2ZXJdIDogW10pXG4gICAgICAgICAgICAgICAgOiBzZXJ2ZXJEZXNjcmlwdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHdhaXRRdWV1ZU1lbWJlci50aW1lb3V0Q29udHJvbGxlci5jbGVhcigpO1xuICAgICAgICAgICAgaWYgKHRvcG9sb2d5LmNsaWVudC5tb25nb0xvZ2dlcj8ud2lsbExvZyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LlNFUlZFUl9TRUxFQ1RJT04sIG1vbmdvX2xvZ2dlcl8xLlNldmVyaXR5TGV2ZWwuREVCVUcpKSB7XG4gICAgICAgICAgICAgICAgdG9wb2xvZ3kuY2xpZW50Lm1vbmdvTG9nZ2VyPy5kZWJ1Zyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LlNFUlZFUl9TRUxFQ1RJT04sIG5ldyBzZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50c18xLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50KHdhaXRRdWV1ZU1lbWJlci5zZXJ2ZXJTZWxlY3RvciwgdG9wb2xvZ3kuZGVzY3JpcHRpb24sIGUsIHdhaXRRdWV1ZU1lbWJlci5vcGVyYXRpb25OYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YWl0UXVldWVNZW1iZXIuY2FsbGJhY2soZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2VsZWN0ZWRTZXJ2ZXI7XG4gICAgICAgIGlmIChzZWxlY3RlZERlc2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICghd2FpdFF1ZXVlTWVtYmVyLndhaXRpbmdMb2dnZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9wb2xvZ3kuY2xpZW50Lm1vbmdvTG9nZ2VyPy53aWxsTG9nKG1vbmdvX2xvZ2dlcl8xLk1vbmdvTG9nZ2FibGVDb21wb25lbnQuU0VSVkVSX1NFTEVDVElPTiwgbW9uZ29fbG9nZ2VyXzEuU2V2ZXJpdHlMZXZlbC5JTkZPUk1BVElPTkFMKSkge1xuICAgICAgICAgICAgICAgICAgICB0b3BvbG9neS5jbGllbnQubW9uZ29Mb2dnZXI/LmluZm8obW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBuZXcgc2VydmVyX3NlbGVjdGlvbl9ldmVudHNfMS5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCh3YWl0UXVldWVNZW1iZXIuc2VydmVyU2VsZWN0b3IsIHRvcG9sb2d5LmRlc2NyaXB0aW9uLCB0b3BvbG9neS5zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyAhPT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0b3BvbG9neS5zLnNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyAtICgoMCwgdXRpbHNfMS5ub3cpKCkgLSB3YWl0UXVldWVNZW1iZXIuc3RhcnRUaW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAtMSwgd2FpdFF1ZXVlTWVtYmVyLm9wZXJhdGlvbk5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLndhaXRpbmdMb2dnZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9wb2xvZ3lba1dhaXRRdWV1ZV0ucHVzaCh3YWl0UXVldWVNZW1iZXIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWREZXNjcmlwdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFNlcnZlciA9IHRvcG9sb2d5LnMuc2VydmVycy5nZXQoc2VsZWN0ZWREZXNjcmlwdGlvbnNbMF0uYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSAoMCwgdXRpbHNfMS5zaHVmZmxlKShzZWxlY3RlZERlc2NyaXB0aW9ucywgMik7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXIxID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChkZXNjcmlwdGlvbnNbMF0uYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXIyID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChkZXNjcmlwdGlvbnNbMV0uYWRkcmVzcyk7XG4gICAgICAgICAgICBzZWxlY3RlZFNlcnZlciA9XG4gICAgICAgICAgICAgICAgc2VydmVyMSAmJiBzZXJ2ZXIyICYmIHNlcnZlcjEucy5vcGVyYXRpb25Db3VudCA8IHNlcnZlcjIucy5vcGVyYXRpb25Db3VudFxuICAgICAgICAgICAgICAgICAgICA/IHNlcnZlcjFcbiAgICAgICAgICAgICAgICAgICAgOiBzZXJ2ZXIyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZWN0ZWRTZXJ2ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJTZWxlY3Rpb25FcnJvcignc2VydmVyIHNlbGVjdGlvbiByZXR1cm5lZCBhIHNlcnZlciBkZXNjcmlwdGlvbiBidXQgdGhlIHNlcnZlciB3YXMgbm90IGZvdW5kIGluIHRoZSB0b3BvbG9neScsIHRvcG9sb2d5LmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGlmICh0b3BvbG9neS5jbGllbnQubW9uZ29Mb2dnZXI/LndpbGxMb2cobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBtb25nb19sb2dnZXJfMS5TZXZlcml0eUxldmVsLkRFQlVHKSkge1xuICAgICAgICAgICAgICAgIHRvcG9sb2d5LmNsaWVudC5tb25nb0xvZ2dlcj8uZGVidWcobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBuZXcgc2VydmVyX3NlbGVjdGlvbl9ldmVudHNfMS5TZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudCh3YWl0UXVldWVNZW1iZXIuc2VydmVyU2VsZWN0b3IsIHRvcG9sb2d5LmRlc2NyaXB0aW9uLCBlcnJvciwgd2FpdFF1ZXVlTWVtYmVyLm9wZXJhdGlvbk5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhaXRRdWV1ZU1lbWJlci5jYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB3YWl0UXVldWVNZW1iZXIudHJhbnNhY3Rpb247XG4gICAgICAgIGlmIChpc1NoYXJkZWQgJiYgdHJhbnNhY3Rpb24gJiYgdHJhbnNhY3Rpb24uaXNBY3RpdmUgJiYgc2VsZWN0ZWRTZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLnBpblNlcnZlcihzZWxlY3RlZFNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLnRpbWVvdXRDb250cm9sbGVyLmNsZWFyKCk7XG4gICAgICAgIGlmICh0b3BvbG9neS5jbGllbnQubW9uZ29Mb2dnZXI/LndpbGxMb2cobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5TRVJWRVJfU0VMRUNUSU9OLCBtb25nb19sb2dnZXJfMS5TZXZlcml0eUxldmVsLkRFQlVHKSkge1xuICAgICAgICAgICAgdG9wb2xvZ3kuY2xpZW50Lm1vbmdvTG9nZ2VyPy5kZWJ1Zyhtb25nb19sb2dnZXJfMS5Nb25nb0xvZ2dhYmxlQ29tcG9uZW50LlNFUlZFUl9TRUxFQ1RJT04sIG5ldyBzZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50c18xLlNlcnZlclNlbGVjdGlvblN1Y2NlZWRlZEV2ZW50KHdhaXRRdWV1ZU1lbWJlci5zZXJ2ZXJTZWxlY3Rvciwgd2FpdFF1ZXVlTWVtYmVyLnRvcG9sb2d5RGVzY3JpcHRpb24sIHNlbGVjdGVkU2VydmVyLnBvb2wuYWRkcmVzcywgd2FpdFF1ZXVlTWVtYmVyLm9wZXJhdGlvbk5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICB3YWl0UXVldWVNZW1iZXIuY2FsbGJhY2sodW5kZWZpbmVkLCBzZWxlY3RlZFNlcnZlcik7XG4gICAgfVxuICAgIGlmICh0b3BvbG9neVtrV2FpdFF1ZXVlXS5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGVuc3VyZSBhbGwgc2VydmVyIG1vbml0b3JzIGF0dGVtcHQgbW9uaXRvcmluZyBzb29uXG4gICAgICAgIGZvciAoY29uc3QgWywgc2VydmVyXSBvZiB0b3BvbG9neS5zLnNlcnZlcnMpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gc2NoZWR1bGVTZXJ2ZXJDaGVjaygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmVyLnJlcXVlc3RDaGVjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpc1N0YWxlU2VydmVyRGVzY3JpcHRpb24odG9wb2xvZ3lEZXNjcmlwdGlvbiwgaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IGN1cnJlbnRTZXJ2ZXJEZXNjcmlwdGlvbiA9IHRvcG9sb2d5RGVzY3JpcHRpb24uc2VydmVycy5nZXQoaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbi5hZGRyZXNzKTtcbiAgICBjb25zdCBjdXJyZW50VG9wb2xvZ3lWZXJzaW9uID0gY3VycmVudFNlcnZlckRlc2NyaXB0aW9uPy50b3BvbG9neVZlcnNpb247XG4gICAgcmV0dXJuICgoMCwgc2VydmVyX2Rlc2NyaXB0aW9uXzEuY29tcGFyZVRvcG9sb2d5VmVyc2lvbikoY3VycmVudFRvcG9sb2d5VmVyc2lvbiwgaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbi50b3BvbG9neVZlcnNpb24pID4gMCk7XG59XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgU2VydmVyQ2FwYWJpbGl0aWVzIHtcbiAgICBjb25zdHJ1Y3RvcihoZWxsbykge1xuICAgICAgICB0aGlzLm1pbldpcmVWZXJzaW9uID0gaGVsbG8ubWluV2lyZVZlcnNpb24gfHwgMDtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9IGhlbGxvLm1heFdpcmVWZXJzaW9uIHx8IDA7XG4gICAgfVxuICAgIGdldCBoYXNBZ2dyZWdhdGlvbkN1cnNvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gMTtcbiAgICB9XG4gICAgZ2V0IGhhc1dyaXRlQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDI7XG4gICAgfVxuICAgIGdldCBoYXNUZXh0U2VhcmNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW5XaXJlVmVyc2lvbiA+PSAwO1xuICAgIH1cbiAgICBnZXQgaGFzQXV0aENvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhXaXJlVmVyc2lvbiA+PSAxO1xuICAgIH1cbiAgICBnZXQgaGFzTGlzdENvbGxlY3Rpb25zQ29tbWFuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gMztcbiAgICB9XG4gICAgZ2V0IGhhc0xpc3RJbmRleGVzQ29tbWFuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gMztcbiAgICB9XG4gICAgZ2V0IHN1cHBvcnRzU25hcHNob3RSZWFkcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gMTM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kc1Rha2VXcml0ZUNvbmNlcm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kc1Rha2VDb2xsYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDU7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJDYXBhYmlsaXRpZXMgPSBTZXJ2ZXJDYXBhYmlsaXRpZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3BvbG9neS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology_description.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sessions.js":
/*!**********************************************!*\
  !*** ./node_modules/mongodb/lib/sessions.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */\n    pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n        }\n        catch {\n            // spec indicates that we should ignore all errors for `endSessions`\n        }\n        finally {\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */\n    async commitTransaction() {\n        return endTransactionAsync(this, 'commitTransaction');\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n    async abortTransaction() {\n        return endTransactionAsync(this, 'abortTransaction');\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const startTime = (0, utils_1.now)();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        (err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired));\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n    return session.commitTransaction().then(() => result, (err) => {\n        if (err instanceof error_1.MongoError &&\n            hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n            !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n                return attemptTransactionCommit(session, startTime, fn, result, options);\n            }\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options = {}) {\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    }\n    catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!(0, utils_1.isPromiseLike)(promise)) {\n        session.abortTransaction().catch(() => null);\n        return Promise.reject(new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise'));\n    }\n    return promise.then(result => {\n        if (userExplicitlyEndedTransaction(session)) {\n            return result;\n        }\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n    }, err => {\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError &&\n                err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            throw err;\n        }\n        if (session.inTransaction()) {\n            return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError('No transaction started'));\n        return;\n    }\n    if (commandName === 'commitTransaction') {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n            return;\n        }\n    }\n    else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = { [commandName]: 1 };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    }\n    else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = { w: session.clientOptions.writeConcern.w };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({ wtimeoutMS: 10000 }, writeConcern, { w: 'majority' });\n    }\n    if (writeConcern) {\n        write_concern_1.WriteConcern.apply(command, writeConcern);\n    }\n    if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n        Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n    }\n    function commandHandler(error) {\n        if (commandName !== 'commitTransaction') {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, { force: false });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (error instanceof error_1.MongoError) {\n            if ((0, error_1.isRetryableWriteError)(error) ||\n                error instanceof error_1.MongoWriteConcernError ||\n                isMaxTimeMSExpiredError(error)) {\n                if (isUnknownTransactionCommitResult(error)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    // per txns spec, must unpin session in this case\n                    session.unpin({ error });\n                }\n            }\n            else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                session.unpin({ error });\n            }\n        }\n        callback(error);\n    }\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    const handleFirstCommandAttempt = (error) => {\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (error instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(error)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({ force: true });\n                command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n                    w: 'majority'\n                });\n            }\n            (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            })).then(() => commandHandler(), commandHandler);\n            return;\n        }\n        commandHandler(error);\n    };\n    // send the command\n    (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    })).then(() => handleFirstCommandAttempt(), handleFirstCommandAttempt);\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor() {\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n    static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: { id },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;\n//# sourceMappingURL=sessions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sort.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/sort.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatSort = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]);\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort);\n    if (isPair(sort))\n        return pairToMap(sort);\n    return stringsToMap(sort);\n}\nexports.formatSort = formatSort;\n//# sourceMappingURL=sort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsZ0JBQWdCLG1CQUFPLENBQUMsMERBQVM7QUFDakM7QUFDQTtBQUNBLHFCQUFxQixVQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRiwwQkFBMEI7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsOENBQThDLEVBQUU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHNCQUFzQjtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc29ydC5qcz82NGJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRTb3J0ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gcHJlcGFyZURpcmVjdGlvbihkaXJlY3Rpb24gPSAxKSB7XG4gICAgY29uc3QgdmFsdWUgPSBgJHtkaXJlY3Rpb259YC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChpc01ldGEoZGlyZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2FzY2VuZGluZyc6XG4gICAgICAgIGNhc2UgJ2FzYyc6XG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIGNhc2UgJ2Rlc2NlbmRpbmcnOlxuICAgICAgICBjYXNlICdkZXNjJzpcbiAgICAgICAgY2FzZSAnLTEnOlxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCBzb3J0IGRpcmVjdGlvbjogJHtKU09OLnN0cmluZ2lmeShkaXJlY3Rpb24pfWApO1xuICAgIH1cbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGlzTWV0YSh0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnb2JqZWN0JyAmJiB0ICE9IG51bGwgJiYgJyRtZXRhJyBpbiB0ICYmIHR5cGVvZiB0LiRtZXRhID09PSAnc3RyaW5nJztcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGlzUGFpcih0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodCkgJiYgdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXBhcmVEaXJlY3Rpb24odFsxXSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzRGVlcCh0KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodCkgJiYgQXJyYXkuaXNBcnJheSh0WzBdKTtcbn1cbmZ1bmN0aW9uIGlzTWFwKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIE1hcCAmJiB0LnNpemUgPiAwO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gcGFpclRvTWFwKHYpIHtcbiAgICByZXR1cm4gbmV3IE1hcChbW2Ake3ZbMF19YCwgcHJlcGFyZURpcmVjdGlvbihbdlsxXV0pXV0pO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gZGVlcFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IHQubWFwKChbaywgdl0pID0+IFtgJHtrfWAsIHByZXBhcmVEaXJlY3Rpb24odildKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBzdHJpbmdzVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdC5tYXAoa2V5ID0+IFtgJHtrZXl9YCwgMV0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG9iamVjdFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHQpLm1hcCgoW2ssIHZdKSA9PiBbXG4gICAgICAgIGAke2t9YCxcbiAgICAgICAgcHJlcGFyZURpcmVjdGlvbih2KVxuICAgIF0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG1hcFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IEFycmF5LmZyb20odCkubWFwKChbaywgdl0pID0+IFtcbiAgICAgICAgYCR7a31gLFxuICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHYpXG4gICAgXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIGNvbnZlcnRzIGEgU29ydCB0eXBlIGludG8gYSB0eXBlIHRoYXQgaXMgdmFsaWQgZm9yIHRoZSBzZXJ2ZXIgKFNvcnRGb3JDbWQpICovXG5mdW5jdGlvbiBmb3JtYXRTb3J0KHNvcnQsIGRpcmVjdGlvbikge1xuICAgIGlmIChzb3J0ID09IG51bGwpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBzb3J0ID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoW1tzb3J0LCBwcmVwYXJlRGlyZWN0aW9uKGRpcmVjdGlvbildXSk7XG4gICAgaWYgKHR5cGVvZiBzb3J0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHNvcnQgZm9ybWF0OiAke0pTT04uc3RyaW5naWZ5KHNvcnQpfSBTb3J0IG11c3QgYmUgYSB2YWxpZCBvYmplY3RgKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNvcnQpKSB7XG4gICAgICAgIHJldHVybiBpc01hcChzb3J0KSA/IG1hcFRvTWFwKHNvcnQpIDogT2JqZWN0LmtleXMoc29ydCkubGVuZ3RoID8gb2JqZWN0VG9NYXAoc29ydCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghc29ydC5sZW5ndGgpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKGlzRGVlcChzb3J0KSlcbiAgICAgICAgcmV0dXJuIGRlZXBUb01hcChzb3J0KTtcbiAgICBpZiAoaXNQYWlyKHNvcnQpKVxuICAgICAgICByZXR1cm4gcGFpclRvTWFwKHNvcnQpO1xuICAgIHJldHVybiBzdHJpbmdzVG9NYXAoc29ydCk7XG59XG5leHBvcnRzLmZvcm1hdFNvcnQgPSBmb3JtYXRTb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c29ydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/transactions.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/transactions.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n//# sourceMappingURL=transactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.maxWireVersion = exports.uuidV4 = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.once = exports.randomBytes = exports.promiseWithResolvers = exports.isHostMatch = exports.COSMOS_DB_MSG = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        'then' in value &&\n        typeof value.then === 'function');\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return { explain: command, verbosity: explain.verbosity };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n            // Since we do not have a monitor in the load balanced mode,\n            // we assume the load-balanced server is always pointed at the latest mongodb version.\n            // There is a risk that for on-prem deployments\n            // that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            // We also return the max supported wire version for serverAPI.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        return -1;\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n    if (value == null) {\n        return value;\n    }\n    else if (Array.isArray(value)) {\n        return value.map(item => deepCopy(item));\n    }\n    else if (isRecord(value)) {\n        const res = {};\n        for (const key in value) {\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch (ctor.name.toLowerCase()) {\n            case 'date':\n                return new ctor(Number(value));\n            case 'map':\n                return new Map(value);\n            case 'set':\n                return new Set(value);\n            case 'buffer':\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */\nclass TimeoutController extends AbortController {\n    constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(() => this.abort(), timeout) : null) {\n        super();\n        this.timeoutId = timeoutId;\n    }\n    clear() {\n        if (this.timeoutId != null) {\n            (0, timers_1.clearTimeout)(this.timeoutId);\n        }\n        this.timeoutId = null;\n    }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch;\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return { promise, resolve, reject };\n}\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nasync function once(ee, name) {\n    const { promise, resolve, reject } = promiseWithResolvers();\n    const onEvent = (data) => resolve(data);\n    const onError = (error) => reject(error);\n    ee.once(name, onEvent).once('error', onError);\n    try {\n        const res = await promise;\n        ee.off('error', onError);\n        return res;\n    }\n    catch (error) {\n        ee.off(name, onEvent);\n        throw error;\n    }\n}\nexports.once = once;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/write_concern.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/write_concern.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n//# sourceMappingURL=write_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvd3JpdGVfY29uY2Vybi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRywwQkFBMEI7QUFDakQsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxSEFBcUg7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi93cml0ZV9jb25jZXJuLmpzPzQ4MWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldyaXRlQ29uY2VybiA9IGV4cG9ydHMuV1JJVEVfQ09OQ0VSTl9LRVlTID0gdm9pZCAwO1xuZXhwb3J0cy5XUklURV9DT05DRVJOX0tFWVMgPSBbJ3cnLCAnd3RpbWVvdXQnLCAnaicsICdqb3VybmFsJywgJ2ZzeW5jJ107XG4vKipcbiAqIEEgTW9uZ29EQiBXcml0ZUNvbmNlcm4sIHdoaWNoIGRlc2NyaWJlcyB0aGUgbGV2ZWwgb2YgYWNrbm93bGVkZ2VtZW50XG4gKiByZXF1ZXN0ZWQgZnJvbSBNb25nb0RCIGZvciB3cml0ZSBvcGVyYXRpb25zLlxuICogQHB1YmxpY1xuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3dyaXRlLWNvbmNlcm4vXG4gKi9cbmNsYXNzIFdyaXRlQ29uY2VybiB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIFdyaXRlQ29uY2VybiBmcm9tIHRoZSB3cml0ZSBjb25jZXJuIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHcgLSByZXF1ZXN0IGFja25vd2xlZGdtZW50IHRoYXQgdGhlIHdyaXRlIG9wZXJhdGlvbiBoYXMgcHJvcGFnYXRlZCB0byBhIHNwZWNpZmllZCBudW1iZXIgb2YgbW9uZ29kIGluc3RhbmNlcyBvciB0byBtb25nb2QgaW5zdGFuY2VzIHdpdGggc3BlY2lmaWVkIHRhZ3MuXG4gICAgICogQHBhcmFtIHd0aW1lb3V0TVMgLSBzcGVjaWZ5IGEgdGltZSBsaW1pdCB0byBwcmV2ZW50IHdyaXRlIG9wZXJhdGlvbnMgZnJvbSBibG9ja2luZyBpbmRlZmluaXRlbHlcbiAgICAgKiBAcGFyYW0gam91cm5hbCAtIHJlcXVlc3QgYWNrbm93bGVkZ21lbnQgdGhhdCB0aGUgd3JpdGUgb3BlcmF0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gdG8gdGhlIG9uLWRpc2sgam91cm5hbFxuICAgICAqIEBwYXJhbSBmc3luYyAtIGVxdWl2YWxlbnQgdG8gdGhlIGogb3B0aW9uLiBJcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih3LCB3dGltZW91dE1TLCBqb3VybmFsLCBmc3luYykge1xuICAgICAgICBpZiAodyAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTihOdW1iZXIodykpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53ID0gTnVtYmVyKHcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod3RpbWVvdXRNUyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnd0aW1lb3V0TVMgPSB0aGlzLnd0aW1lb3V0ID0gd3RpbWVvdXRNUztcbiAgICAgICAgfVxuICAgICAgICBpZiAoam91cm5hbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmpvdXJuYWwgPSB0aGlzLmogPSBqb3VybmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmc3luYyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmpvdXJuYWwgPSB0aGlzLmogPSBmc3luYyA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSBhIHdyaXRlIGNvbmNlcm4gdG8gYSBjb21tYW5kIGRvY3VtZW50LiBXaWxsIG1vZGlmeSBhbmQgcmV0dXJuIHRoZSBjb21tYW5kLlxuICAgICAqL1xuICAgIHN0YXRpYyBhcHBseShjb21tYW5kLCB3cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgY29uc3Qgd2MgPSB7fTtcbiAgICAgICAgLy8gVGhlIHdyaXRlIGNvbmNlcm4gZG9jdW1lbnQgc2VudCB0byB0aGUgc2VydmVyIGhhcyB3L3d0aW1lb3V0L2ogZmllbGRzLlxuICAgICAgICBpZiAod3JpdGVDb25jZXJuLncgIT0gbnVsbClcbiAgICAgICAgICAgIHdjLncgPSB3cml0ZUNvbmNlcm4udztcbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi53dGltZW91dE1TICE9IG51bGwpXG4gICAgICAgICAgICB3Yy53dGltZW91dCA9IHdyaXRlQ29uY2Vybi53dGltZW91dE1TO1xuICAgICAgICBpZiAod3JpdGVDb25jZXJuLmpvdXJuYWwgIT0gbnVsbClcbiAgICAgICAgICAgIHdjLmogPSB3cml0ZUNvbmNlcm4uajtcbiAgICAgICAgY29tbWFuZC53cml0ZUNvbmNlcm4gPSB3YztcbiAgICAgICAgcmV0dXJuIGNvbW1hbmQ7XG4gICAgfVxuICAgIC8qKiBDb25zdHJ1Y3QgYSBXcml0ZUNvbmNlcm4gZ2l2ZW4gYW4gb3B0aW9ucyBvYmplY3QuICovXG4gICAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMsIGluaGVyaXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGluaGVyaXQgPSBpbmhlcml0ID8/IHt9O1xuICAgICAgICBsZXQgb3B0cztcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG9wdHMgPSB7IHc6IG9wdGlvbnMgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zIGluc3RhbmNlb2YgV3JpdGVDb25jZXJuKSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdHMgPSBvcHRpb25zLndyaXRlQ29uY2VybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRPcHRzID0gaW5oZXJpdCBpbnN0YW5jZW9mIFdyaXRlQ29uY2VybiA/IGluaGVyaXQgOiBpbmhlcml0LndyaXRlQ29uY2VybjtcbiAgICAgICAgY29uc3QgeyB3ID0gdW5kZWZpbmVkLCB3dGltZW91dCA9IHVuZGVmaW5lZCwgaiA9IHVuZGVmaW5lZCwgZnN5bmMgPSB1bmRlZmluZWQsIGpvdXJuYWwgPSB1bmRlZmluZWQsIHd0aW1lb3V0TVMgPSB1bmRlZmluZWQgfSA9IHtcbiAgICAgICAgICAgIC4uLnBhcmVudE9wdHMsXG4gICAgICAgICAgICAuLi5vcHRzXG4gICAgICAgIH07XG4gICAgICAgIGlmICh3ICE9IG51bGwgfHxcbiAgICAgICAgICAgIHd0aW1lb3V0ICE9IG51bGwgfHxcbiAgICAgICAgICAgIHd0aW1lb3V0TVMgIT0gbnVsbCB8fFxuICAgICAgICAgICAgaiAhPSBudWxsIHx8XG4gICAgICAgICAgICBqb3VybmFsICE9IG51bGwgfHxcbiAgICAgICAgICAgIGZzeW5jICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV3JpdGVDb25jZXJuKHcsIHd0aW1lb3V0ID8/IHd0aW1lb3V0TVMsIGogPz8gam91cm5hbCwgZnN5bmMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Xcml0ZUNvbmNlcm4gPSBXcml0ZUNvbmNlcm47XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cml0ZV9jb25jZXJuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/package.json":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"mongodb","version":"6.5.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.5","bson":"^6.4.0","mongodb-connection-string-url":"^3.0.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@aws-sdk/credential-providers":"^3.515.0","@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.40.6","@microsoft/tsdoc-config":"^0.16.2","@mongodb-js/zstd":"^1.2.0","@octokit/core":"^5.1.0","@types/chai":"^4.3.11","@types/chai-subset":"^1.3.5","@types/express":"^4.17.21","@types/kerberos":"^1.1.5","@types/mocha":"^10.0.6","@types/node":"^20.11.20","@types/saslprep":"^1.0.3","@types/semver":"^7.5.7","@types/sinon":"^10.0.20","@types/sinon-chai":"^3.2.12","@types/whatwg-url":"^11.0.4","@typescript-eslint/eslint-plugin":"^5.62.0","@typescript-eslint/parser":"^5.62.0","chai":"^4.4.1","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"^8.56.0","eslint-config-prettier":"^8.10.0","eslint-plugin-import":"^2.29.1","eslint-plugin-prettier":"^4.2.1","eslint-plugin-simple-import-sort":"^10.0.0","eslint-plugin-tsdoc":"^0.2.17","eslint-plugin-unused-imports":"^2.0.0","express":"^4.18.2","gcp-metadata":"^5.3.0","js-yaml":"^4.1.0","mocha":"^10.3.0","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.0.0","mongodb-legacy":"^6.0.1","nyc":"^15.1.0","prettier":"^2.8.8","semver":"^7.6.0","sinon":"^15.2.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.8.1","source-map-support":"^0.5.21","ts-node":"^10.9.2","tsd":"^0.30.6","typescript":"5.0","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && eslint mongodb.d.ts --fix","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"node test/benchmarks/driverBench","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"eslint -v && eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.json test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.json test/integration","check:unit":"mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.js","check:drivers-atlas-testing":"mocha --config test/mocha_mongodb.json test/atlas/drivers_atlas_testing.test.ts","check:adl":"mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts","check:oidc":"mocha --config test/mocha_mongodb.json test/manual/mongodb_oidc.prose.test.ts","check:oidc-azure":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_azure.prose.test.ts","check:ocsp":"mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js","check:kerberos":"nyc mocha --config test/manual/mocharc.json test/manual/kerberos.test.ts","check:tls":"mocha --config test/manual/mocharc.json test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.json test/manual/ldap.test.js","check:socks5":"mocha --config test/manual/mocharc.json test/manual/socks5.test.ts","check:csfle":"mocha --config test/mocha_mongodb.json test/integration/client-side-encryption","check:snappy":"mocha test/unit/assorted/snappy.test.js","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;